2024-04-08 10:23:22.190 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-08 10:23:22.206 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-08 10:23:29.184 +08:00 [INF] Loaded ABP modules:
2024-04-08 10:23:29.184 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-08 10:23:29.184 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-08 10:23:29.184 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-08 10:23:29.184 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-08 10:23:29.184 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-08 10:23:29.184 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-08 10:23:29.184 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-08 10:23:29.184 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-08 10:23:29.184 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-08 10:23:29.184 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-08 10:23:29.184 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-08 10:23:29.184 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-08 10:23:29.184 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-08 10:23:29.184 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-08 10:23:29.184 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-08 10:23:29.184 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-08 10:23:29.184 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-08 10:23:29.184 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-08 10:23:29.184 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-08 10:23:29.184 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-08 10:23:29.184 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-08 10:23:29.184 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-04-08 10:23:29.184 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-08 10:23:29.184 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-08 10:23:29.184 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-08 10:23:29.185 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-08 10:23:29.185 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-08 10:23:29.185 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-08 10:23:29.185 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-08 10:23:29.185 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-08 10:23:29.185 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-08 10:23:29.185 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-08 10:23:29.185 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-08 10:23:29.185 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-08 10:23:29.185 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-08 10:23:29.185 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-08 10:23:29.185 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-08 10:23:29.185 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-08 10:23:29.185 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-08 10:23:29.185 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-08 10:23:29.185 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-08 10:23:29.185 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-08 10:23:29.185 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-08 10:23:29.185 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-08 10:23:29.185 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-08 10:23:29.185 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-08 10:23:29.185 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-08 10:23:29.185 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-08 10:23:29.185 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-08 10:23:29.185 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-08 10:23:29.185 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-08 10:23:29.185 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-04-08 10:23:29.185 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-08 10:23:29.185 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-08 10:23:29.185 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-08 10:23:29.185 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-04-08 10:23:29.185 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-08 10:23:29.185 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-08 10:23:29.185 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-08 10:23:29.185 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-08 10:23:29.185 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-08 10:23:29.185 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-08 10:23:29.185 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-08 10:23:29.185 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-08 10:23:29.185 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-04-08 10:23:29.185 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-08 10:23:29.185 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-08 10:23:29.185 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-08 10:23:29.185 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-08 10:23:29.185 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-08 10:23:29.185 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-08 10:23:29.185 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-08 10:23:29.185 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-08 10:23:29.185 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-04-08 10:23:29.185 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-08 10:23:29.185 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-08 10:23:29.185 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-08 10:23:29.185 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-08 10:23:29.185 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-08 10:23:29.185 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-08 10:23:29.185 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-08 10:23:29.185 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-08 10:23:29.185 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-08 10:23:29.185 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-08 10:23:29.185 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-08 10:23:29.185 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-08 10:23:29.185 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-08 10:23:29.185 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-08 10:23:29.185 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-08 10:23:29.185 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-08 10:23:29.185 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-08 10:23:29.185 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-08 10:23:29.185 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-08 10:23:29.191 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-08 10:23:29.195 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-08 10:23:30.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:30.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.807 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:30.821 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-08 10:23:30.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:30.847 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-08 10:23:30.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.859 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:30.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.862 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:30.868 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.868 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-08 10:23:30.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-08 10:23:30.873 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.873 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-08 10:23:30.873 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.873 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-08 10:23:30.874 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-08 10:23:30.874 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-08 10:23:30.874 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-08 10:23:30.874 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-08 10:23:30.874 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-08 10:23:30.874 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-08 10:23:30.874 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-08 10:23:30.875 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:30.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-08 10:23:30.883 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.888 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:30.890 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.891 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:30.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-08 10:23:30.900 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.900 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-08 10:23:30.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-08 10:23:30.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-08 10:23:30.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-08 10:23:30.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-08 10:23:30.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-08 10:23:30.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-08 10:23:30.902 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:30.908 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-08 10:23:30.911 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.914 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:30.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:30.922 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.922 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-08 10:23:30.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-08 10:23:30.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-08 10:23:30.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-08 10:23:30.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-08 10:23:30.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-08 10:23:30.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-08 10:23:30.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-08 10:23:30.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-08 10:23:30.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-08 10:23:30.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-08 10:23:30.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-08 10:23:30.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-08 10:23:30.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-08 10:23:30.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-08 10:23:30.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:30.933 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.933 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-08 10:23:30.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.940 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:30.943 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.944 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:30.952 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.952 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-08 10:23:30.954 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-08 10:23:30.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-08 10:23:30.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-08 10:23:30.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-08 10:23:30.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-08 10:23:30.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-08 10:23:30.956 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-08 10:23:30.956 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-08 10:23:30.956 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-08 10:23:30.956 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-08 10:23:30.956 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-08 10:23:30.956 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:30.962 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-08 10:23:30.965 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:30.972 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:30.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.978 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-08 10:23:30.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.981 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-08 10:23:30.981 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.981 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-08 10:23:30.981 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.981 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-08 10:23:30.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-08 10:23:30.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-08 10:23:30.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-08 10:23:30.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-08 10:23:30.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:30.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-08 10:23:30.994 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:30.999 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.002 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.002 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.009 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.009 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-08 10:23:31.012 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.012 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-08 10:23:31.012 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-08 10:23:31.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-08 10:23:31.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.019 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-08 10:23:31.022 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-08 10:23:31.039 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-08 10:23:31.039 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-08 10:23:31.039 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-08 10:23:31.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-08 10:23:31.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-08 10:23:31.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-08 10:23:31.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.041 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 10:23:31.049 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.056 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-08 10:23:31.058 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.067 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.067 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-08 10:23:31.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.076 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-08 10:23:31.076 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.076 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-08 10:23:31.076 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.076 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-08 10:23:31.077 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-08 10:23:31.077 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-08 10:23:31.077 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-08 10:23:31.077 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-08 10:23:31.077 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-08 10:23:31.077 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-08 10:23:31.077 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-08 10:23:31.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-08 10:23:31.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-08 10:23:31.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-08 10:23:31.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-08 10:23:31.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-08 10:23:31.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-08 10:23:31.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-08 10:23:31.079 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-08 10:23:31.079 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-08 10:23:31.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.101 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.107 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.107 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-08 10:23:31.110 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-08 10:23:31.111 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.111 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-08 10:23:31.111 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.111 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-08 10:23:31.112 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.119 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-08 10:23:31.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.127 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.130 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.130 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.137 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-08 10:23:31.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-08 10:23:31.141 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-08 10:23:31.141 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-08 10:23:31.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-08 10:23:31.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-08 10:23:31.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-08 10:23:31.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-08 10:23:31.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-08 10:23:31.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-08 10:23:31.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-08 10:23:31.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-08 10:23:31.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-08 10:23:31.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.143 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.149 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-08 10:23:31.152 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.167 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-08 10:23:31.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-08 10:23:31.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-08 10:23:31.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-08 10:23:31.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-08 10:23:31.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.177 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.177 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-08 10:23:31.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.185 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.206 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.206 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-08 10:23:31.209 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.209 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-08 10:23:31.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-08 10:23:31.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-08 10:23:31.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-08 10:23:31.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-08 10:23:31.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-08 10:23:31.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-08 10:23:31.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-08 10:23:31.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-08 10:23:31.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-08 10:23:31.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-08 10:23:31.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-08 10:23:31.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-08 10:23:31.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.217 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.218 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-08 10:23:31.220 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.224 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.225 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-08 10:23:31.233 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.233 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-08 10:23:31.233 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.233 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-08 10:23:31.234 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.234 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.241 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-08 10:23:31.244 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.249 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.251 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.260 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-08 10:23:31.263 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-08 10:23:31.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-08 10:23:31.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-08 10:23:31.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-08 10:23:31.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-08 10:23:31.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-08 10:23:31.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-08 10:23:31.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-08 10:23:31.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-08 10:23:31.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-08 10:23:31.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-08 10:23:31.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-08 10:23:31.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-08 10:23:31.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-08 10:23:31.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-08 10:23:31.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-08 10:23:31.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-08 10:23:31.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-08 10:23:31.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-08 10:23:31.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-08 10:23:31.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-08 10:23:31.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-08 10:23:31.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-08 10:23:31.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-08 10:23:31.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 10:23:31.269 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.275 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.275 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-08 10:23:31.278 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.289 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.289 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-08 10:23:31.291 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-08 10:23:31.292 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.292 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-08 10:23:31.292 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.293 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-08 10:23:31.293 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.293 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-08 10:23:31.293 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.293 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.300 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.300 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-08 10:23:31.303 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.306 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.308 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.315 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-08 10:23:31.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-08 10:23:31.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-08 10:23:31.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-08 10:23:31.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-08 10:23:31.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.324 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.324 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-08 10:23:31.326 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.332 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.338 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.338 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-08 10:23:31.340 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-08 10:23:31.341 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.341 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.346 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-08 10:23:31.349 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.360 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-08 10:23:31.363 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.363 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.368 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-08 10:23:31.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.374 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.375 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.375 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.382 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.383 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-08 10:23:31.385 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-04-08 10:23:31.385 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-04-08 10:23:31.385 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-04-08 10:23:31.385 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-04-08 10:23:31.385 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-04-08 10:23:31.385 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-04-08 10:23:31.386 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.386 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-04-08 10:23:31.386 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.386 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-04-08 10:23:31.386 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.386 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-04-08 10:23:31.386 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.386 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 10:23:31.387 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.387 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.393 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-08 10:23:31.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.400 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.400 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.405 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.405 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-08 10:23:31.407 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.413 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.413 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-08 10:23:31.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-08 10:23:31.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-04-08 10:23:31.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-04-08 10:23:31.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-04-08 10:23:31.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-04-08 10:23:31.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-04-08 10:23:31.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-04-08 10:23:31.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-08 10:23:31.436 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-08 10:23:31.449 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-04-08 10:23:31.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-04-08 10:23:31.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-04-08 10:23:31.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 10:23:31.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.457 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.458 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-08 10:23:31.461 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.466 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.466 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.472 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-08 10:23:31.475 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.475 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-04-08 10:23:31.475 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.475 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-04-08 10:23:31.475 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.475 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 10:23:31.477 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.477 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-08 10:23:31.485 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.490 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.497 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.497 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-08 10:23:31.500 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.500 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-04-08 10:23:31.501 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.501 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 10:23:31.503 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.503 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 10:23:31.504 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.505 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 10:23:31.505 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.511 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.512 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-08 10:23:31.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.519 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.521 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-08 10:23:31.533 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.541 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.542 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-08 10:23:31.544 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.549 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.551 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.551 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.556 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-08 10:23:31.559 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-04-08 10:23:31.559 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-04-08 10:23:31.559 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.560 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 10:23:31.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 10:23:31.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.569 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-08 10:23:31.571 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.578 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-08 10:23:31.586 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-04-08 10:23:31.587 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-04-08 10:23:31.587 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-04-08 10:23:31.587 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 10:23:31.589 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.589 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 10:23:31.590 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.590 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 10:23:31.591 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.598 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-08 10:23:31.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.604 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.605 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.611 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.611 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-08 10:23:31.613 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.614 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.618 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.619 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-08 10:23:31.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.630 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.630 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-08 10:23:31.632 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.632 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-04-08 10:23:31.633 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.633 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-08 10:23:31.640 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.644 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.645 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.645 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-08 10:23:31.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.658 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.658 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-08 10:23:31.661 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.664 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.666 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.666 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-08 10:23:31.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-04-08 10:23:31.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.679 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.679 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-08 10:23:31.681 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.686 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.686 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.691 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.691 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-08 10:23:31.693 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.694 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-04-08 10:23:31.694 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.694 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-04-08 10:23:31.694 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.694 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-04-08 10:23:31.694 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.694 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-04-08 10:23:31.694 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.694 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-04-08 10:23:31.694 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.694 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-04-08 10:23:31.695 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-04-08 10:23:31.695 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-04-08 10:23:31.695 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-08 10:23:31.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.707 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-08 10:23:31.714 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.714 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-04-08 10:23:31.714 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-04-08 10:23:31.715 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-04-08 10:23:31.715 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-04-08 10:23:31.715 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.720 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.720 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-08 10:23:31.722 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.726 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.727 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.733 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.733 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-08 10:23:31.735 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 10:23:31.736 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 10:23:31.737 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.737 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.742 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.742 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-08 10:23:31.745 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.753 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.753 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.759 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.759 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-08 10:23:31.761 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.761 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 10:23:31.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 10:23:31.763 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.769 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-08 10:23:31.771 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.774 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.776 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.776 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.782 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.782 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-08 10:23:31.784 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.784 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 10:23:31.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 10:23:31.786 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.786 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.792 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.792 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-08 10:23:31.795 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.799 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-08 10:23:31.806 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 10:23:31.807 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.807 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.814 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.814 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-08 10:23:31.817 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-08 10:23:31.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-08 10:23:31.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-08 10:23:31.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-08 10:23:31.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-08 10:23:31.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-08 10:23:31.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-08 10:23:31.839 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.844 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-08 10:23:31.851 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.851 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-08 10:23:31.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-08 10:23:31.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-08 10:23:31.859 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.862 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 10:23:31.864 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-08 10:23:31.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-08 10:23:31.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-08 10:23:31.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-08 10:23:31.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-08 10:23:31.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.872 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 10:23:31.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-08 10:23:31.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 10:23:31.975 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 10:23:31.984 +08:00 [DBG] =========Yi-SQL耗时9.1791毫秒=====
2024-04-08 10:23:31.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 10:23:32.000 +08:00 [DBG] =========Yi-SQL耗时1.878毫秒=====
2024-04-08 10:23:32.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 10:23:32.005 +08:00 [DBG] =========Yi-SQL耗时1.4732毫秒=====
2024-04-08 10:23:32.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 10:23:32.014 +08:00 [DBG] =========Yi-SQL耗时3.6931毫秒=====
2024-04-08 10:23:32.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 10:23:32.020 +08:00 [DBG] =========Yi-SQL耗时2.2246毫秒=====
2024-04-08 10:23:32.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 10:23:32.025 +08:00 [DBG] =========Yi-SQL耗时1.7155毫秒=====
2024-04-08 10:23:32.031 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 10:23:32.034 +08:00 [DBG] =========Yi-SQL耗时2.8014毫秒=====
2024-04-08 10:23:32.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "banner"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 10:23:32.040 +08:00 [DBG] =========Yi-SQL耗时2.2803毫秒=====
2024-04-08 10:23:32.042 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( "dicttype" = N'bbs_type_lable' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 10:23:32.042 +08:00 [DBG] =========Yi-SQL耗时0.5816毫秒=====
2024-04-08 10:23:32.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'BBS' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 10:23:32.046 +08:00 [DBG] =========Yi-SQL耗时0.8601毫秒=====
2024-04-08 10:23:32.048 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "bbsuserextrainfo"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-08 10:23:32.050 +08:00 [DBG] =========Yi-SQL耗时1.6472毫秒=====
2024-04-08 10:23:32.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "config"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 10:23:32.054 +08:00 [DBG] =========Yi-SQL耗时1.3534毫秒=====
2024-04-08 10:23:32.056 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "level"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-08 10:23:32.058 +08:00 [DBG] =========Yi-SQL耗时1.458毫秒=====
2024-04-08 10:23:32.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-08 10:23:32.063 +08:00 [DBG] =========Yi-SQL耗时1.4733毫秒=====
2024-04-08 10:23:32.071 +08:00 [DBG] 耗时-2879ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-08 10:23:32.154 +08:00 [DBG] 耗时-80ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-08 10:23:32.157 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-08 10:23:32.173 +08:00 [DBG] 耗时-15ms,已加载模块-Volo.Abp.AspNetCore
2024-04-08 10:23:32.178 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-04-08 10:23:32.205 +08:00 [DBG] 耗时-26ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-08 10:23:32.207 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-08 10:23:32.512 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-08 10:23:32.605 +08:00 [DBG] 耗时-397ms,已加载模块-Yi.Abp.Web
2024-04-08 10:23:32.617 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-04-08 10:23:32.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","currentlevel","minexperience","name","nick","logo" FROM "level"  
===============================

2024-04-08 10:23:32.629 +08:00 [DBG] =========Yi-SQL耗时1.6431毫秒=====
2024-04-08 10:23:32.712 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-04-08 10:23:32.712 +08:00 [DBG] 耗时-106ms,已加载模块-Yi.Framework.Bbs.Domain
2024-04-08 10:23:32.712 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【3514ms】==========
2024-04-08 10:23:32.871 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-08 10:23:32.871 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-08 10:23:32.871 +08:00 [INF] Hosting environment: Development
2024-04-08 10:23:32.871 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-08 10:23:38.288 +08:00 [INF] Sending file. Request path: '/swagger-ui.css'. Physical path: 'N/A'
2024-04-08 10:23:38.288 +08:00 [INF] Sending file. Request path: '/swagger-ui-standalone-preset.js'. Physical path: 'N/A'
2024-04-08 10:23:38.297 +08:00 [INF] Sending file. Request path: '/swagger-ui-bundle.js'. Physical path: 'N/A'
2024-04-08 10:23:38.451 +08:00 [INF] Sending file. Request path: '/favicon-32x32.png'. Physical path: 'N/A'
2024-04-08 10:23:51.301 +08:00 [INF] CORS policy execution successful.
2024-04-08 10:23:51.378 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 10:23:51.378 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-08 10:23:51.384 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-08 10:23:51.397 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 10:23:51.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 10:23:51.497 +08:00 [DBG] =========Yi-SQL耗时3.5765毫秒=====
2024-04-08 10:23:51.500 +08:00 [INF] CORS policy execution successful.
2024-04-08 10:23:51.502 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-08 10:23:51.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-08 10:23:51.533 +08:00 [DBG] =========Yi-SQL耗时2.3275毫秒=====
2024-04-08 10:23:51.542 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-08 10:23:51.543 +08:00 [DBG] =========Yi-SQL耗时0.8648毫秒=====
2024-04-08 10:23:51.623 +08:00 [INF] 2024/4/8 10:23:51：cc,zMBd_H-m6pj8uLqogOsb8w连接服务端success，当前已连接0个
2024-04-08 10:23:51.626 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-08 10:23:51.700 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 300.7513ms
2024-04-08 10:23:51.701 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 10:23:51.734 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 10:23:51.737 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 10:23:51.739 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 10:23:51.740 +08:00 [DBG] =========Yi-SQL耗时0.8384毫秒=====
2024-04-08 10:23:51.744 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-08 10:23:51.744 +08:00 [DBG] =========Yi-SQL耗时0.6531毫秒=====
2024-04-08 10:23:51.745 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-08 10:23:51.745 +08:00 [DBG] =========Yi-SQL耗时0.5018毫秒=====
2024-04-08 10:23:51.748 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 10:23:51.750 +08:00 [DBG] =========Yi-SQL耗时1.5295毫秒=====
2024-04-08 10:23:51.773 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 10:23:51.776 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 38.8385ms
2024-04-08 10:23:51.776 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 10:23:56.590 +08:00 [INF] CORS policy execution successful.
2024-04-08 10:23:56.592 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-04-08 10:23:56.595 +08:00 [INF] Route matched with {action = "PostLogout", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] PostLogout() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 10:23:56.599 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-04-08 10:23:56.600 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application) in 4.5083ms
2024-04-08 10:23:56.600 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-04-08 10:23:56.605 +08:00 [INF] CORS policy execution successful.
2024-04-08 10:23:56.607 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-08 10:23:56.608 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-08 10:23:56.608 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-08 10:23:56.608 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-08 10:23:56.640 +08:00 [INF] CORS policy execution successful.
2024-04-08 10:23:56.641 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-08 10:23:56.641 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-08 10:23:56.642 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-08 10:23:56.662 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-08 10:23:56.672 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-08 10:23:56.673 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-08 10:23:56.821 +08:00 [INF] CORS policy execution successful.
2024-04-08 10:23:56.822 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-08 10:23:56.822 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-08 10:23:56.824 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-08 10:23:56.825 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-08 10:23:56.913 +08:00 [INF] CORS policy execution successful.
2024-04-08 10:23:56.914 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-08 10:23:56.914 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-08 10:23:56.916 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-08 10:23:56.967 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:23:56.967 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-04-08 10:23:56.971 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 10:23:56.971 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-08 10:23:56.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 10:23:56.986 +08:00 [DBG] =========Yi-SQL耗时3.7109毫秒=====
2024-04-08 10:23:56.992 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 10:23:56.996 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 24.0401ms
2024-04-08 10:23:56.996 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-04-08 10:23:57.048 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-04-08 10:23:57.050 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 79.4426ms
2024-04-08 10:23:57.050 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:23:58.932 +08:00 [INF] CORS policy execution successful.
2024-04-08 10:23:58.933 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:23:58.940 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 10:23:58.981 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"   WHERE (( "username" = N'cc' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 10:23:58.982 +08:00 [DBG] =========Yi-SQL耗时1.3987毫秒=====
2024-04-08 10:23:58.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 10:23:58.990 +08:00 [DBG] =========Yi-SQL耗时1.0574毫秒=====
2024-04-08 10:23:58.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-08 10:23:58.991 +08:00 [DBG] =========Yi-SQL耗时0.4334毫秒=====
2024-04-08 10:23:58.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-08 10:23:58.992 +08:00 [DBG] =========Yi-SQL耗时0.3088毫秒=====
2024-04-08 10:23:59.022 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-04-08 10:23:59.025 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 85.0428ms
2024-04-08 10:23:59.025 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:23:59.030 +08:00 [INF] CORS policy execution successful.
2024-04-08 10:23:59.032 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-08 10:23:59.032 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-08 10:23:59.036 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 10:23:59.037 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 10:23:59.038 +08:00 [INF] CORS policy execution successful.
2024-04-08 10:23:59.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 10:23:59.039 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-08 10:23:59.044 +08:00 [INF] 用户【e94b7363-80d1-10a3-eb2c-3a119a976151:cc】登入系统
2024-04-08 10:23:59.064 +08:00 [INF] 2024/4/8 10:23:59：cc,AxnBT2aBajGQWR87zn96HQ连接服务端success，当前已连接1个
2024-04-08 10:23:59.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "loginlog"  
           ("id","creationtime","loginuser","loginlocation","loginip","browser","os","logmsg","creatorid")
     VALUES
           (N'8999fb4d-e85a-dca9-9124-3a11cdb1d653',CAST('2024-04-08 10:23:59.066' AS DATETIME),N'cc',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'cc登录系统',N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-04-08 10:23:59.086 +08:00 [DBG] =========Yi-SQL耗时7.7653毫秒=====
2024-04-08 10:23:59.102 +08:00 [DBG] =========Yi-SQL耗时62.8078毫秒=====
2024-04-08 10:23:59.103 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-08 10:23:59.103 +08:00 [DBG] =========Yi-SQL耗时0.2596毫秒=====
2024-04-08 10:23:59.104 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-08 10:23:59.104 +08:00 [DBG] =========Yi-SQL耗时0.5587毫秒=====
2024-04-08 10:23:59.104 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-08 10:23:59.105 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 68.3784ms
2024-04-08 10:23:59.105 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 10:23:59.114 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 10:23:59.114 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 10:23:59.115 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 10:23:59.116 +08:00 [DBG] =========Yi-SQL耗时0.7799毫秒=====
2024-04-08 10:23:59.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-08 10:23:59.118 +08:00 [DBG] =========Yi-SQL耗时0.7057毫秒=====
2024-04-08 10:23:59.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-08 10:23:59.119 +08:00 [DBG] =========Yi-SQL耗时0.2988毫秒=====
2024-04-08 10:23:59.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 10:23:59.120 +08:00 [DBG] =========Yi-SQL耗时0.8222毫秒=====
2024-04-08 10:23:59.121 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 10:23:59.121 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 7.5655ms
2024-04-08 10:23:59.121 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 10:24:06.627 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 10:24:06.628 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 10:24:06.632 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:24:06.634 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 10:24:06.634 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 10:24:06.637 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 10:24:06.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 10:24:06.643 +08:00 [DBG] =========Yi-SQL耗时0.9835毫秒=====
2024-04-08 10:24:06.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 10:24:06.654 +08:00 [DBG] =========Yi-SQL耗时1.5842毫秒=====
2024-04-08 10:24:06.670 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 10:24:06.670 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 10:24:06.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 10:24:06.673 +08:00 [DBG] =========Yi-SQL耗时0.9709毫秒=====
2024-04-08 10:24:06.674 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 39.9843ms
2024-04-08 10:24:06.674 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 39.8162ms
2024-04-08 10:24:06.674 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 10:24:06.674 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 10:24:06.707 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 10:24:06.726 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 89.0395ms
2024-04-08 10:24:06.726 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:24:12.245 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:24:12.245 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 10:24:12.247 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 10:24:12.248 +08:00 [DBG] =========Yi-SQL耗时0.9666毫秒=====
2024-04-08 10:24:12.262 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 10:24:12.274 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 29.3228ms
2024-04-08 10:24:12.275 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:25:12.930 +08:00 [INF] CORS policy execution successful.
2024-04-08 10:25:12.932 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:25:12.935 +08:00 [INF] Route matched with {action = "Create", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] CreateAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuCreateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 10:25:12.965 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "menu"  
           ("id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query")
     VALUES
           (N'7e4f4c22-9927-da88-9330-3a11cdb2f701',0,CAST('2024-04-08 10:25:12.937' AS DATETIME),N'e94b7363-80d1-10a3-eb2c-3a119a976151',null,null,101,1,N'问题管理',0,null,N'00000000-0000-0000-0000-000000000000',N'bug',N'/question',0,0,1,null,null,null) ;
===============================

2024-04-08 10:25:12.970 +08:00 [DBG] =========Yi-SQL耗时5.1244毫秒=====
2024-04-08 10:25:12.982 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 10:25:12.986 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application) in 50.7348ms
2024-04-08 10:25:12.986 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:25:13.016 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:25:13.016 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 10:25:13.019 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 10:25:13.020 +08:00 [DBG] =========Yi-SQL耗时1.2231毫秒=====
2024-04-08 10:25:13.045 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 10:25:13.052 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 35.4576ms
2024-04-08 10:25:13.052 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:25:30.112 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:25:30.118 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-08 10:25:30.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-08 10:25:30.144 +08:00 [DBG] =========Yi-SQL耗时1.9788毫秒=====
2024-04-08 10:25:30.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-08 10:25:30.149 +08:00 [DBG] =========Yi-SQL耗时1.9802毫秒=====
2024-04-08 10:25:30.160 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 10:25:30.164 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 45.1682ms
2024-04-08 10:25:30.164 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:33:14.577 +08:00 [INF] 用户cc离开了，当前已连接1个
2024-04-08 10:33:14.578 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-08 10:33:14.578 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-08 10:33:14.753 +08:00 [INF] CORS policy execution successful.
2024-04-08 10:33:14.755 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-08 10:33:14.759 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-08 10:33:14.763 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 10:33:14.765 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 10:33:14.781 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-08 10:33:14.781 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 16.1404ms
2024-04-08 10:33:14.781 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 10:33:14.836 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 10:33:14.836 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 10:33:14.840 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 10:33:14.843 +08:00 [INF] CORS policy execution successful.
2024-04-08 10:33:14.847 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-08 10:33:14.881 +08:00 [INF] 2024/4/8 10:33:14：cc,4vnoYYzH68JqyT_OFRV5hA连接服务端success，当前已连接0个
2024-04-08 10:33:14.935 +08:00 [DBG] =========Yi-SQL耗时95.6441毫秒=====
2024-04-08 10:33:14.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-08 10:33:14.939 +08:00 [DBG] =========Yi-SQL耗时2.8211毫秒=====
2024-04-08 10:33:14.940 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-08 10:33:14.942 +08:00 [DBG] =========Yi-SQL耗时2.2719毫秒=====
2024-04-08 10:33:14.944 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 10:33:14.946 +08:00 [DBG] =========Yi-SQL耗时1.9515毫秒=====
2024-04-08 10:33:14.946 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 10:33:14.947 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 110.3193ms
2024-04-08 10:33:14.947 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 10:33:15.111 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:33:15.111 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 10:33:15.111 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 10:33:15.111 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 10:33:15.111 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 10:33:15.112 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 10:33:15.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 10:33:15.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 10:33:15.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 10:33:15.118 +08:00 [DBG] =========Yi-SQL耗时5.303毫秒=====
2024-04-08 10:33:15.120 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 10:33:15.120 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 8.8171ms
2024-04-08 10:33:15.120 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 10:33:15.179 +08:00 [DBG] =========Yi-SQL耗时65.9524毫秒=====
2024-04-08 10:33:15.183 +08:00 [DBG] =========Yi-SQL耗时70.3294毫秒=====
2024-04-08 10:33:15.184 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 10:33:15.184 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 72.9097ms
2024-04-08 10:33:15.184 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 10:33:15.194 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 10:33:15.198 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 86.8375ms
2024-04-08 10:33:15.198 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:33:27.544 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:33:27.545 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 10:33:27.546 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 10:33:27.548 +08:00 [DBG] =========Yi-SQL耗时1.3106毫秒=====
2024-04-08 10:33:27.586 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 10:33:27.600 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 54.8415ms
2024-04-08 10:33:27.600 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:34:16.493 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:34:16.493 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:34:16.493 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 10:34:16.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 10:34:16.496 +08:00 [DBG] =========Yi-SQL耗时1.1398毫秒=====
2024-04-08 10:34:16.499 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 10:34:16.511 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 10:34:16.528 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 34.9138ms
2024-04-08 10:34:16.528 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:34:16.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'c42e8baf-a6e9-6825-aab6-3a119a97612e'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 10:34:16.565 +08:00 [DBG] =========Yi-SQL耗时2.1011毫秒=====
2024-04-08 10:34:16.574 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 10:34:16.575 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 75.1799ms
2024-04-08 10:34:16.575 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:34:34.666 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:34:34.666 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 10:34:34.667 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:34:34.668 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 10:34:34.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 10:34:34.669 +08:00 [DBG] =========Yi-SQL耗时0.9124毫秒=====
2024-04-08 10:34:34.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'02fe9835-2400-fed3-81aa-3a119a97612e'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 10:34:34.673 +08:00 [DBG] =========Yi-SQL耗时0.9164毫秒=====
2024-04-08 10:34:34.679 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 10:34:34.679 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 11.8002ms
2024-04-08 10:34:34.679 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:34:34.684 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 10:34:34.688 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 21.9706ms
2024-04-08 10:34:34.688 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:34:59.778 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:34:59.778 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 10:34:59.778 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:34:59.778 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 10:34:59.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 10:34:59.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'552344a6-57cb-14ca-7d6a-3a119a97612e'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 10:34:59.782 +08:00 [DBG] =========Yi-SQL耗时2.062毫秒=====
2024-04-08 10:34:59.782 +08:00 [DBG] =========Yi-SQL耗时2.4726毫秒=====
2024-04-08 10:34:59.791 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 10:34:59.792 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 13.0279ms
2024-04-08 10:34:59.792 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:34:59.802 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 10:34:59.806 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 28.3759ms
2024-04-08 10:34:59.806 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:35:45.652 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:35:45.652 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 10:35:45.653 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:35:45.653 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 10:35:45.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 10:35:45.656 +08:00 [DBG] =========Yi-SQL耗时1.9938毫秒=====
2024-04-08 10:35:45.687 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'e893eea8-99b8-2d23-4c3f-3a119a97612e'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 10:35:45.695 +08:00 [DBG] =========Yi-SQL耗时7.8081毫秒=====
2024-04-08 10:35:45.710 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 10:35:45.712 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 58.9327ms
2024-04-08 10:35:45.712 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:35:45.730 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 10:35:45.738 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 85.4365ms
2024-04-08 10:35:45.738 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:36:34.641 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:36:34.641 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 10:36:34.641 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:36:34.642 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 10:36:34.643 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 10:36:34.644 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'25f689bd-33d2-ee71-65e6-3a119a97612e'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 10:36:34.645 +08:00 [DBG] =========Yi-SQL耗时1.2466毫秒=====
2024-04-08 10:36:34.646 +08:00 [DBG] =========Yi-SQL耗时1.6395毫秒=====
2024-04-08 10:36:34.653 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 10:36:34.655 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 12.5362ms
2024-04-08 10:36:34.655 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 10:36:34.666 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 10:36:34.672 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 30.4057ms
2024-04-08 10:36:34.672 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 11:00:00.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-04-08 11:00:00.212 +08:00 [DBG] =========Yi-SQL耗时90.3562毫秒=====
2024-04-08 11:00:00.634 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an unhandled Exception: 
System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
2024-04-08 11:00:00.636 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an exception.
Quartz.SchedulerException: Job threw an unhandled exception.
 ---> System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
   --- End of inner exception stack trace --- [See nested exception: System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)]
2024-04-08 11:23:21.345 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 11:23:21.407 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-08 11:23:21.525 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 11:23:21.619 +08:00 [DBG] =========Yi-SQL耗时94.0133毫秒=====
2024-04-08 11:23:21.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 11:23:21.643 +08:00 [DBG] =========Yi-SQL耗时1.9017毫秒=====
2024-04-08 11:23:21.680 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 11:23:21.694 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 287.4673ms
2024-04-08 11:23:21.694 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 11:23:27.986 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 11:23:27.986 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-08 11:23:27.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 11:23:28.007 +08:00 [DBG] =========Yi-SQL耗时13.4977毫秒=====
2024-04-08 11:23:28.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 11:23:28.009 +08:00 [DBG] =========Yi-SQL耗时0.8083毫秒=====
2024-04-08 11:23:28.011 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 11:23:28.013 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 25.9293ms
2024-04-08 11:23:28.013 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:00:00.192 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-04-08 12:00:00.313 +08:00 [DBG] =========Yi-SQL耗时122.6797毫秒=====
2024-04-08 12:00:00.609 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an unhandled Exception: 
System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
2024-04-08 12:00:00.609 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an exception.
Quartz.SchedulerException: Job threw an unhandled exception.
 ---> System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
   --- End of inner exception stack trace --- [See nested exception: System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)]
2024-04-08 12:18:52.547 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 12:18:52.547 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 12:18:52.547 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:18:52.556 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 12:18:52.556 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 12:18:52.581 +08:00 [INF] Route matched with {action = "GetList", controller = "Task", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Task.TaskGetListOutput]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Task.TaskGetListInput) on controller Yi.Framework.Rbac.Application.Services.Monitor.TaskService (Yi.Framework.Rbac.Application).
2024-04-08 12:18:52.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_job_group' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:18:52.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_job_status' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:18:52.666 +08:00 [DBG] =========Yi-SQL耗时84.8633毫秒=====
2024-04-08 12:18:52.666 +08:00 [DBG] =========Yi-SQL耗时83.8106毫秒=====
2024-04-08 12:18:52.734 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:18:52.734 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:18:52.740 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 182.8363ms
2024-04-08 12:18:52.740 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 182.8204ms
2024-04-08 12:18:52.740 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 12:18:52.740 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 12:18:52.827 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Task.TaskGetListOutput, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:18:52.839 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetListAsync (Yi.Framework.Rbac.Application) in 257.0329ms
2024-04-08 12:18:52.839 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:19:10.786 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:19:10.788 +08:00 [INF] Route matched with {action = "Get", controller = "Task", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Task.TaskGetOutput] GetAsync(System.String) on controller Yi.Framework.Rbac.Application.Services.Monitor.TaskService (Yi.Framework.Rbac.Application).
2024-04-08 12:19:10.796 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Task.TaskGetOutput'.
2024-04-08 12:19:10.799 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetAsync (Yi.Framework.Rbac.Application) in 11.6142ms
2024-04-08 12:19:10.799 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:19:26.300 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:19:26.301 +08:00 [INF] Route matched with {action = "Get", controller = "Task", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Task.TaskGetOutput] GetAsync(System.String) on controller Yi.Framework.Rbac.Application.Services.Monitor.TaskService (Yi.Framework.Rbac.Application).
2024-04-08 12:19:26.302 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Task.TaskGetOutput'.
2024-04-08 12:19:26.302 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetAsync (Yi.Framework.Rbac.Application) in 1.3249ms
2024-04-08 12:19:26.302 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:19:28.987 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:19:28.987 +08:00 [INF] Route matched with {action = "Get", controller = "Task", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Task.TaskGetOutput] GetAsync(System.String) on controller Yi.Framework.Rbac.Application.Services.Monitor.TaskService (Yi.Framework.Rbac.Application).
2024-04-08 12:19:28.988 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Task.TaskGetOutput'.
2024-04-08 12:19:28.990 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetAsync (Yi.Framework.Rbac.Application) in 2.5147ms
2024-04-08 12:19:28.990 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:19:30.829 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:19:30.830 +08:00 [INF] Route matched with {action = "Get", controller = "Task", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Task.TaskGetOutput] GetAsync(System.String) on controller Yi.Framework.Rbac.Application.Services.Monitor.TaskService (Yi.Framework.Rbac.Application).
2024-04-08 12:19:30.830 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Task.TaskGetOutput'.
2024-04-08 12:19:30.830 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetAsync (Yi.Framework.Rbac.Application) in 0.8478ms
2024-04-08 12:19:30.830 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:19:42.599 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 12:19:42.599 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 12:19:42.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_common_status' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:19:42.609 +08:00 [DBG] =========Yi-SQL耗时3.4833毫秒=====
2024-04-08 12:19:42.615 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:19:42.615 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 16.1825ms
2024-04-08 12:19:42.615 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 12:20:04.221 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:20:04.221 +08:00 [INF] Route matched with {action = "Get", controller = "Task", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Task.TaskGetOutput] GetAsync(System.String) on controller Yi.Framework.Rbac.Application.Services.Monitor.TaskService (Yi.Framework.Rbac.Application).
2024-04-08 12:20:04.222 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Task.TaskGetOutput'.
2024-04-08 12:20:04.222 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetAsync (Yi.Framework.Rbac.Application) in 0.9009ms
2024-04-08 12:20:04.222 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:20:13.000 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:20:13.001 +08:00 [INF] Route matched with {action = "Get", controller = "Task", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Task.TaskGetOutput] GetAsync(System.String) on controller Yi.Framework.Rbac.Application.Services.Monitor.TaskService (Yi.Framework.Rbac.Application).
2024-04-08 12:20:13.004 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Task.TaskGetOutput'.
2024-04-08 12:20:13.004 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetAsync (Yi.Framework.Rbac.Application) in 3.6041ms
2024-04-08 12:20:13.004 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:20:29.452 +08:00 [INF] CORS policy execution successful.
2024-04-08 12:20:29.454 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.TaskService.RunOnceAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:20:29.457 +08:00 [INF] Route matched with {action = "RunOnce", controller = "Task", area = ""}. Executing controller action with signature System.Threading.Tasks.Task RunOnceAsync(System.String) on controller Yi.Framework.Rbac.Application.Services.Monitor.TaskService (Yi.Framework.Rbac.Application).
2024-04-08 12:20:29.462 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.Monitor.TaskService.RunOnceAsync (Yi.Framework.Rbac.Application) in 4.9763ms
2024-04-08 12:20:29.462 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.TaskService.RunOnceAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:20:43.976 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 12:20:43.977 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 12:20:43.977 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:20:43.977 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:20:43.978 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:20:43.978 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-08 12:20:43.979 +08:00 [DBG] =========Yi-SQL耗时1.1218毫秒=====
2024-04-08 12:20:44.016 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:20:44.017 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 39.7724ms
2024-04-08 12:20:44.017 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 12:20:44.017 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-08 12:20:44.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-08 12:20:44.032 +08:00 [DBG] =========Yi-SQL耗时9.3944毫秒=====
2024-04-08 12:20:44.034 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-08 12:20:44.038 +08:00 [DBG] =========Yi-SQL耗时3.603毫秒=====
2024-04-08 12:20:44.042 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:20:44.042 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 64.0256ms
2024-04-08 12:20:44.042 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:20:44.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-08 12:20:44.181 +08:00 [DBG] =========Yi-SQL耗时4.5578毫秒=====
2024-04-08 12:20:44.182 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-08 12:20:44.184 +08:00 [DBG] =========Yi-SQL耗时2.0053毫秒=====
2024-04-08 12:20:44.190 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:20:44.194 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 177.4538ms
2024-04-08 12:20:44.194 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:20:51.563 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:20:51.568 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:20:51.570 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:20:51.570 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:20:51.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 12:20:51.575 +08:00 [DBG] =========Yi-SQL耗时4.257毫秒=====
2024-04-08 12:20:51.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'e6bf52fd-b827-33d0-b83c-3a119a97612e'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:20:51.578 +08:00 [DBG] =========Yi-SQL耗时1.4739毫秒=====
2024-04-08 12:20:51.581 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 12:20:51.582 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 11.6819ms
2024-04-08 12:20:51.582 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:20:51.595 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:20:51.601 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 32.4168ms
2024-04-08 12:20:51.601 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:21:29.723 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:21:29.723 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:21:29.725 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 12:21:29.726 +08:00 [DBG] =========Yi-SQL耗时1.4381毫秒=====
2024-04-08 12:21:29.750 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:21:29.760 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 36.6345ms
2024-04-08 12:21:29.760 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:22:18.062 +08:00 [INF] CORS policy execution successful.
2024-04-08 12:22:18.066 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:22:18.067 +08:00 [INF] Route matched with {action = "Create", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] CreateAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuCreateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:22:18.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "menu"  
           ("id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query")
     VALUES
           (N'6799560e-c779-66bf-d6aa-3a11ce1e28dd',0,CAST('2024-04-08 12:22:18.071' AS DATETIME),N'e94b7363-80d1-10a3-eb2c-3a119a976151',null,null,0,1,N'问题列表',1,null,N'7e4f4c22-9927-da88-9330-3a11cdb2f701',N'list',N'/question',0,0,1,null,N'/question/questions/index',null) ;
===============================

2024-04-08 12:22:18.091 +08:00 [DBG] =========Yi-SQL耗时8.3943毫秒=====
2024-04-08 12:22:18.094 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 12:22:18.094 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application) in 27.3273ms
2024-04-08 12:22:18.094 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:22:18.121 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:22:18.121 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:22:18.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 12:22:18.124 +08:00 [DBG] =========Yi-SQL耗时0.9485毫秒=====
2024-04-08 12:22:18.153 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:22:18.161 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 39.8696ms
2024-04-08 12:22:18.161 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:22:26.332 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:22:26.332 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:22:26.340 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:22:26.340 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:22:26.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 12:22:26.341 +08:00 [DBG] =========Yi-SQL耗时0.9024毫秒=====
2024-04-08 12:22:26.346 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'c42e8baf-a6e9-6825-aab6-3a119a97612e'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:22:26.349 +08:00 [DBG] =========Yi-SQL耗时2.7286毫秒=====
2024-04-08 12:22:26.356 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 12:22:26.356 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 15.6969ms
2024-04-08 12:22:26.356 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:22:26.367 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:22:26.370 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 37.8915ms
2024-04-08 12:22:26.370 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:22:36.637 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:22:36.638 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:22:36.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:22:36.640 +08:00 [DBG] =========Yi-SQL耗时0.7842毫秒=====
2024-04-08 12:22:36.643 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:22:36.643 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:22:36.643 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 12:22:36.644 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 5.8153ms
2024-04-08 12:22:36.644 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:22:36.644 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 12:22:36.646 +08:00 [DBG] =========Yi-SQL耗时1.1149毫秒=====
2024-04-08 12:22:36.660 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:22:36.665 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 21.6045ms
2024-04-08 12:22:36.665 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:22:41.996 +08:00 [INF] CORS policy execution successful.
2024-04-08 12:22:41.998 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:22:42.000 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:22:42.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:22:42.018 +08:00 [DBG] =========Yi-SQL耗时0.6618毫秒=====
2024-04-08 12:22:42.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-04-08 12:22:18.071' AS DATETIME),"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-08 12:22:42.050' AS DATETIME),"ordernum"=0,"state"=1,"menuname"=N'问题列表',"menutype"=1,"permissioncode"=null,"parentid"=N'7e4f4c22-9927-da88-9330-3a11cdb2f701',"menuicon"=N'list',"router"=N'question',"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=N'/question/questions/index',"query"=null  WHERE "id"=N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'
===============================

2024-04-08 12:22:42.067 +08:00 [DBG] =========Yi-SQL耗时2.2307毫秒=====
2024-04-08 12:22:42.069 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 12:22:42.069 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 69.0052ms
2024-04-08 12:22:42.069 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:22:42.095 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:22:42.095 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:22:42.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 12:22:42.097 +08:00 [DBG] =========Yi-SQL耗时0.7254毫秒=====
2024-04-08 12:22:42.109 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:22:42.115 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 19.1784ms
2024-04-08 12:22:42.115 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:22:44.378 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:22:44.378 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:22:44.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 12:22:44.381 +08:00 [DBG] =========Yi-SQL耗时0.9715毫秒=====
2024-04-08 12:22:44.383 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:22:44.384 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:22:44.386 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'c42e8baf-a6e9-6825-aab6-3a119a97612e'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:22:44.387 +08:00 [DBG] =========Yi-SQL耗时0.9282毫秒=====
2024-04-08 12:22:44.391 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 12:22:44.391 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 7.0262ms
2024-04-08 12:22:44.391 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:22:44.407 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:22:44.410 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 31.7258ms
2024-04-08 12:22:44.410 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:08.221 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-08 12:23:08.223 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-08 12:23:08.333 +08:00 [INF] CORS policy execution successful.
2024-04-08 12:23:08.337 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-08 12:23:08.342 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-08 12:23:08.351 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:08.352 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:08.370 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-08 12:23:08.371 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 18.4468ms
2024-04-08 12:23:08.371 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:08.423 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:08.423 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:08.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:23:08.427 +08:00 [DBG] =========Yi-SQL耗时0.8946毫秒=====
2024-04-08 12:23:08.430 +08:00 [INF] CORS policy execution successful.
2024-04-08 12:23:08.467 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-08 12:23:08.468 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-08 12:23:08.470 +08:00 [DBG] =========Yi-SQL耗时2.0243毫秒=====
2024-04-08 12:23:08.473 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-08 12:23:08.474 +08:00 [DBG] =========Yi-SQL耗时1.1435毫秒=====
2024-04-08 12:23:08.475 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:23:08.475 +08:00 [DBG] =========Yi-SQL耗时0.5349毫秒=====
2024-04-08 12:23:08.476 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:23:08.477 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 53.4081ms
2024-04-08 12:23:08.477 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:08.512 +08:00 [INF] 2024/4/8 12:23:08：cc,klXfoOlKLq2eA50JBHlJpQ连接服务端success，当前已连接0个
2024-04-08 12:23:13.921 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:13.921 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:13.921 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:13.921 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:13.921 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:13.921 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:13.921 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:13.921 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:13.922 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:23:13.922 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:23:13.924 +08:00 [DBG] =========Yi-SQL耗时1.1636毫秒=====
2024-04-08 12:23:13.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-08 12:23:13.926 +08:00 [DBG] =========Yi-SQL耗时3.4265毫秒=====
2024-04-08 12:23:13.928 +08:00 [DBG] =========Yi-SQL耗时3.2008毫秒=====
2024-04-08 12:23:13.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-08 12:23:13.928 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:23:13.929 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 7.6934ms
2024-04-08 12:23:13.929 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:13.930 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-08 12:23:13.943 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:23:13.948 +08:00 [DBG] =========Yi-SQL耗时19.2134毫秒=====
2024-04-08 12:23:13.949 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 28.4493ms
2024-04-08 12:23:13.950 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:13.958 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:23:13.959 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 37.7412ms
2024-04-08 12:23:13.959 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:14.007 +08:00 [DBG] =========Yi-SQL耗时77.1562毫秒=====
2024-04-08 12:23:14.009 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-08 12:23:14.010 +08:00 [DBG] =========Yi-SQL耗时0.863毫秒=====
2024-04-08 12:23:14.010 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:23:14.010 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 89.2911ms
2024-04-08 12:23:14.010 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:19.956 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:19.956 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:19.956 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:19.956 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:19.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:23:19.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 12:23:19.959 +08:00 [DBG] =========Yi-SQL耗时0.9294毫秒=====
2024-04-08 12:23:19.960 +08:00 [DBG] =========Yi-SQL耗时1.9684毫秒=====
2024-04-08 12:23:19.964 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:23:19.964 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 7.3876ms
2024-04-08 12:23:19.964 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:19.978 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:23:19.982 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 25.4344ms
2024-04-08 12:23:19.982 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:23.091 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:23.091 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:23.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:23:23.100 +08:00 [DBG] =========Yi-SQL耗时0.8157毫秒=====
2024-04-08 12:23:23.102 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 12:23:23.105 +08:00 [DBG] =========Yi-SQL耗时1.984毫秒=====
2024-04-08 12:23:23.107 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:23:23.107 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 15.8154ms
2024-04-08 12:23:23.107 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:26.437 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:26.437 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:26.437 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:26.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 12:23:26.440 +08:00 [DBG] =========Yi-SQL耗时0.8455毫秒=====
2024-04-08 12:23:26.444 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:26.453 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:23:26.458 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 20.9789ms
2024-04-08 12:23:26.458 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:26.466 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:26.468 +08:00 [INF] Route matched with {action = "GetListRoleId", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:26.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"  WHERE "id" = N'3476ed9f-ffd6-04f3-c9e2-3a119a976147'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:23:26.470 +08:00 [DBG] =========Yi-SQL耗时0.8186毫秒=====
2024-04-08 12:23:26.479 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-04-08 12:23:26.480 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 35.9251ms
2024-04-08 12:23:26.480 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:26.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu" "m"  WHERE (EXISTS ( SELECT * FROM "rolemenu" "rm"  WHERE (( "roleid" = N'3476ed9f-ffd6-04f3-c9e2-3a119a976147' ) AND ( "menuid" = "m"."id" )) ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:23:26.497 +08:00 [DBG] =========Yi-SQL耗时2.5863毫秒=====
2024-04-08 12:23:26.498 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:23:26.498 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application) in 30.3599ms
2024-04-08 12:23:26.498 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:33.474 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:33.474 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:33.474 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:33.474 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:33.476 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 12:23:33.477 +08:00 [DBG] =========Yi-SQL耗时0.9139毫秒=====
2024-04-08 12:23:33.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"  WHERE "id" = N'516fc634-a2be-dc35-a8e4-3a119a976148'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:23:33.481 +08:00 [DBG] =========Yi-SQL耗时3.4771毫秒=====
2024-04-08 12:23:33.486 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-04-08 12:23:33.486 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 11.9043ms
2024-04-08 12:23:33.486 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:33.501 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:23:33.506 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 32.0508ms
2024-04-08 12:23:33.506 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:33.520 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:33.520 +08:00 [INF] Route matched with {action = "GetListRoleId", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:33.522 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu" "m"  WHERE (EXISTS ( SELECT * FROM "rolemenu" "rm"  WHERE (( "roleid" = N'516fc634-a2be-dc35-a8e4-3a119a976148' ) AND ( "menuid" = "m"."id" )) ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:23:33.523 +08:00 [DBG] =========Yi-SQL耗时0.7103毫秒=====
2024-04-08 12:23:33.524 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:23:33.525 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application) in 4.414ms
2024-04-08 12:23:33.525 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:37.182 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:37.182 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:37.182 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:37.182 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:37.183 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"  WHERE "id" = N'3428b091-ec42-9caa-c39d-3a119a976148'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:23:37.183 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 12:23:37.185 +08:00 [DBG] =========Yi-SQL耗时1.2346毫秒=====
2024-04-08 12:23:37.185 +08:00 [DBG] =========Yi-SQL耗时1.8331毫秒=====
2024-04-08 12:23:37.190 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-04-08 12:23:37.190 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 8.0808ms
2024-04-08 12:23:37.190 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:37.200 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:23:37.204 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 22.253ms
2024-04-08 12:23:37.204 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:37.221 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:37.221 +08:00 [INF] Route matched with {action = "GetListRoleId", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:37.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu" "m"  WHERE (EXISTS ( SELECT * FROM "rolemenu" "rm"  WHERE (( "roleid" = N'3428b091-ec42-9caa-c39d-3a119a976148' ) AND ( "menuid" = "m"."id" )) ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:23:37.223 +08:00 [DBG] =========Yi-SQL耗时0.8179毫秒=====
2024-04-08 12:23:37.225 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:23:37.225 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application) in 4.3922ms
2024-04-08 12:23:37.225 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:46.111 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:46.111 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:46.111 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:46.111 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:46.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"  WHERE "id" = N'516fc634-a2be-dc35-a8e4-3a119a976148'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:23:46.114 +08:00 [DBG] =========Yi-SQL耗时0.9735毫秒=====
2024-04-08 12:23:46.115 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-08 12:23:46.116 +08:00 [DBG] =========Yi-SQL耗时1.1102毫秒=====
2024-04-08 12:23:46.118 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-04-08 12:23:46.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-08 12:23:46.119 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 7.5758ms
2024-04-08 12:23:46.120 +08:00 [DBG] =========Yi-SQL耗时1.7619毫秒=====
2024-04-08 12:23:46.121 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:46.123 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:23:46.123 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 12.4384ms
2024-04-08 12:23:46.123 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:46.156 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:46.160 +08:00 [INF] Route matched with {action = "GetRoleId", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:46.164 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept" "d"  WHERE (EXISTS ( SELECT * FROM "roledept" "rd"  WHERE (( "roleid" = N'516fc634-a2be-dc35-a8e4-3a119a976148' ) AND ( "d"."id" = "deptid" )) ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:23:46.166 +08:00 [DBG] =========Yi-SQL耗时1.9731毫秒=====
2024-04-08 12:23:46.167 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:23:46.167 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetRoleIdAsync (Yi.Framework.Rbac.Application) in 7.0435ms
2024-04-08 12:23:46.167 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:52.118 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:52.118 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:52.118 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:52.118 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:52.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-08 12:23:52.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"  WHERE "id" = N'3476ed9f-ffd6-04f3-c9e2-3a119a976147'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:23:52.121 +08:00 [DBG] =========Yi-SQL耗时0.9525毫秒=====
2024-04-08 12:23:52.122 +08:00 [DBG] =========Yi-SQL耗时1.8523毫秒=====
2024-04-08 12:23:52.125 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-08 12:23:52.125 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-04-08 12:23:52.125 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 7.0042ms
2024-04-08 12:23:52.125 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:52.126 +08:00 [DBG] =========Yi-SQL耗时0.9609毫秒=====
2024-04-08 12:23:52.128 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:23:52.128 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 10.3356ms
2024-04-08 12:23:52.129 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:52.144 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:52.144 +08:00 [INF] Route matched with {action = "GetRoleId", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:52.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept" "d"  WHERE (EXISTS ( SELECT * FROM "roledept" "rd"  WHERE (( "roleid" = N'3476ed9f-ffd6-04f3-c9e2-3a119a976147' ) AND ( "d"."id" = "deptid" )) ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:23:52.147 +08:00 [DBG] =========Yi-SQL耗时1.4716毫秒=====
2024-04-08 12:23:52.149 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:23:52.149 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetRoleIdAsync (Yi.Framework.Rbac.Application) in 5.1936ms
2024-04-08 12:23:52.149 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:54.638 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:54.638 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:54.639 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:54.639 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:54.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"  WHERE "id" = N'516fc634-a2be-dc35-a8e4-3a119a976148'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:23:54.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 12:23:54.641 +08:00 [DBG] =========Yi-SQL耗时0.8093毫秒=====
2024-04-08 12:23:54.646 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-04-08 12:23:54.647 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 7.7217ms
2024-04-08 12:23:54.647 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:54.698 +08:00 [DBG] =========Yi-SQL耗时57.0828毫秒=====
2024-04-08 12:23:54.708 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:23:54.715 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 76.2272ms
2024-04-08 12:23:54.715 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:54.727 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:23:54.727 +08:00 [INF] Route matched with {action = "GetListRoleId", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 12:23:54.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu" "m"  WHERE (EXISTS ( SELECT * FROM "rolemenu" "rm"  WHERE (( "roleid" = N'516fc634-a2be-dc35-a8e4-3a119a976148' ) AND ( "menuid" = "m"."id" )) ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:23:54.733 +08:00 [DBG] =========Yi-SQL耗时3.0696毫秒=====
2024-04-08 12:23:54.734 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:23:54.734 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application) in 6.5858ms
2024-04-08 12:23:54.734 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:01.073 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:01.073 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-08 12:24:01.074 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:24:01.076 +08:00 [DBG] =========Yi-SQL耗时1.7558毫秒=====
2024-04-08 12:24:01.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 12:24:01.080 +08:00 [DBG] =========Yi-SQL耗时1.0782毫秒=====
2024-04-08 12:24:01.081 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:24:01.081 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 8.5293ms
2024-04-08 12:24:01.081 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:06.903 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:06.903 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-08 12:24:06.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:24:06.906 +08:00 [DBG] =========Yi-SQL耗时0.7506毫秒=====
2024-04-08 12:24:06.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 12:24:06.909 +08:00 [DBG] =========Yi-SQL耗时1.2358毫秒=====
2024-04-08 12:24:06.910 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:06.910 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:06.910 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:24:06.911 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 7.3682ms
2024-04-08 12:24:06.911 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:06.913 +08:00 [INF] Route matched with {action = "Get", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-08 12:24:06.914 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-04-08 12:24:06.918 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'14034830-d11c-db5d-ea3e-3a11a05c01b1'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:24:06.920 +08:00 [DBG] =========Yi-SQL耗时1.27毫秒=====
2024-04-08 12:24:06.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-08 12:24:06.924 +08:00 [DBG] =========Yi-SQL耗时1.5457毫秒=====
2024-04-08 12:24:06.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-04-08 12:24:06.927 +08:00 [DBG] =========Yi-SQL耗时0.3698毫秒=====
2024-04-08 12:24:06.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "post"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:24:06.928 +08:00 [DBG] =========Yi-SQL耗时1.1042毫秒=====
2024-04-08 12:24:06.931 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 12:24:06.931 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"postid" as bid FROM "userpost"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-08 12:24:06.932 +08:00 [DBG] =========Yi-SQL耗时1.2223毫秒=====
2024-04-08 12:24:06.933 +08:00 [DBG] =========Yi-SQL耗时1.5064毫秒=====
2024-04-08 12:24:06.933 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","postcode" AS "postcode","postname" AS "postname","remark" AS "remark" FROM "post"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)    
===============================

2024-04-08 12:24:06.933 +08:00 [DBG] =========Yi-SQL耗时0.2745毫秒=====
2024-04-08 12:24:06.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","deptname" AS "deptname","deptcode" AS "deptcode","leader" AS "leader","parentid" AS "parentid","remark" AS "remark" FROM "dept"  WHERE   "id" IN (null)    
===============================

2024-04-08 12:24:06.939 +08:00 [DBG] =========Yi-SQL耗时1.0466毫秒=====
2024-04-08 12:24:06.941 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:24:06.943 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 29.4024ms
2024-04-08 12:24:06.943 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:06.954 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto'.
2024-04-08 12:24:06.958 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application) in 44.7824ms
2024-04-08 12:24:06.958 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:19.549 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:19.549 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:19.549 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 12:24:19.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:24:19.551 +08:00 [DBG] =========Yi-SQL耗时0.8003毫秒=====
2024-04-08 12:24:19.553 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:24:19.553 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 4.1721ms
2024-04-08 12:24:19.553 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:19.554 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-08 12:24:19.567 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:24:19.572 +08:00 [DBG] =========Yi-SQL耗时4.1751毫秒=====
2024-04-08 12:24:19.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 12:24:19.577 +08:00 [DBG] =========Yi-SQL耗时1.3706毫秒=====
2024-04-08 12:24:19.586 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:24:19.589 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 34.7913ms
2024-04-08 12:24:19.589 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:23.510 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:23.520 +08:00 [INF] Route matched with {action = "GetList", controller = "Notice", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListInput) on controller Yi.Framework.Rbac.Application.Services.NoticeService (Yi.Framework.Rbac.Application).
2024-04-08 12:24:23.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "notice"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:24:23.535 +08:00 [DBG] =========Yi-SQL耗时2.2794毫秒=====
2024-04-08 12:24:23.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","title","type","content","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "notice"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 12:24:23.538 +08:00 [DBG] =========Yi-SQL耗时1.2298毫秒=====
2024-04-08 12:24:23.544 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:24:23.545 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application) in 25.151ms
2024-04-08 12:24:23.545 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:26.018 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:26.018 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 12:24:26.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_oper_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:24:26.025 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:26.025 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 12:24:26.027 +08:00 [DBG] =========Yi-SQL耗时2.0592毫秒=====
2024-04-08 12:24:26.027 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.RecordLog.OperationLogService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:26.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_common_status' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:24:26.028 +08:00 [DBG] =========Yi-SQL耗时0.7603毫秒=====
2024-04-08 12:24:26.030 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:24:26.030 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 5.6867ms
2024-04-08 12:24:26.031 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:26.031 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:24:26.032 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 13.2271ms
2024-04-08 12:24:26.032 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:26.032 +08:00 [INF] Route matched with {action = "GetList", controller = "OperationLog", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.OperLog.OperationLogGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.OperLog.OperationLogGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.RecordLog.OperationLogService (Yi.Framework.Rbac.Application).
2024-04-08 12:24:26.042 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "operationlog"  
===============================

2024-04-08 12:24:26.045 +08:00 [DBG] =========Yi-SQL耗时2.736毫秒=====
2024-04-08 12:24:26.046 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","title","opertype","requestmethod","operuser","operip","operlocation","method","requestparam","requestresult","creationtime","creatorid" FROM "operationlog"     LIMIT 10 offset 0
===============================

2024-04-08 12:24:26.047 +08:00 [DBG] =========Yi-SQL耗时0.6747毫秒=====
2024-04-08 12:24:26.057 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.OperLog.OperationLogGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:24:26.060 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.RecordLog.OperationLogService.GetListAsync (Yi.Framework.Rbac.Application) in 27.9182ms
2024-04-08 12:24:26.060 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.RecordLog.OperationLogService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:31.023 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.RecordLog.LoginLogService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:31.026 +08:00 [INF] Route matched with {action = "GetList", controller = "LoginLog", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.LoginLog.LoginLogGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.LoginLog.LoginLogGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.RecordLog.LoginLogService (Yi.Framework.Rbac.Application).
2024-04-08 12:24:31.041 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "loginlog"  
===============================

2024-04-08 12:24:31.043 +08:00 [DBG] =========Yi-SQL耗时2.1281毫秒=====
2024-04-08 12:24:31.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","loginuser","loginlocation","loginip","browser","os","logmsg","creatorid" FROM "loginlog"     LIMIT 10 offset 0
===============================

2024-04-08 12:24:31.046 +08:00 [DBG] =========Yi-SQL耗时0.7842毫秒=====
2024-04-08 12:24:31.052 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.LoginLog.LoginLogGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:24:31.056 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.RecordLog.LoginLogService.GetListAsync (Yi.Framework.Rbac.Application) in 30.142ms
2024-04-08 12:24:31.056 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.RecordLog.LoginLogService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:39.154 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:39.159 +08:00 [INF] Route matched with {action = "GetList", controller = "Online", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Domain.Shared.Model.OnlineUserModel]] GetListAsync(Yi.Framework.Rbac.Domain.Shared.Model.OnlineUserModel) on controller Yi.Framework.Rbac.Application.Services.Monitor.OnlineService (Yi.Framework.Rbac.Application).
2024-04-08 12:24:39.164 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Domain.Shared.Model.OnlineUserModel, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:24:39.166 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.GetListAsync (Yi.Framework.Rbac.Application) in 6.7515ms
2024-04-08 12:24:39.166 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:41.101 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.MonitorCacheService.GetName (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:41.103 +08:00 [INF] Route matched with {action = "GetName", controller = "MonitorCache", area = ""}. Executing controller action with signature System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.MonitorCache.MonitorCacheNameGetListOutputDto] GetName() on controller Yi.Framework.Rbac.Application.Services.Monitor.MonitorCacheService (Yi.Framework.Rbac.Application).
2024-04-08 12:24:47.032 +08:00 [WRN] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "后端程序未使用Redis缓存，无法对Redis进行监控，可切换使用Redis",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-08 12:24:47.033 +08:00 [WRN] 后端程序未使用Redis缓存，无法对Redis进行监控，可切换使用Redis
Volo.Abp.UserFriendlyException: 后端程序未使用Redis缓存，无法对Redis进行监控，可切换使用Redis
   at Yi.Framework.Rbac.Application.Services.Monitor.MonitorCacheService.VerifyRedisCacheEnable() in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\Monitor\MonitorCacheService.cs:line 80
   at Yi.Framework.Rbac.Application.Services.Monitor.MonitorCacheService.GetName() in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\Monitor\MonitorCacheService.cs:line 44
   at lambda_method2097(Closure, Object, Object[])
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-08 12:24:47.033 +08:00 [WRN] Code:
2024-04-08 12:24:47.034 +08:00 [WRN] Details:
2024-04-08 12:24:47.059 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-08 12:24:47.065 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.Monitor.MonitorCacheService.GetName (Yi.Framework.Rbac.Application) in 5961.1427ms
2024-04-08 12:24:47.065 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.MonitorCacheService.GetName (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:52.184 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.MonitorServerService.GetInfo (Yi.Framework.Rbac.Application)'
2024-04-08 12:24:52.186 +08:00 [INF] Route matched with {action = "GetInfo", controller = "MonitorServer", area = ""}. Executing controller action with signature System.Object GetInfo() on controller Yi.Framework.Rbac.Application.Services.Monitor.MonitorServerService (Yi.Framework.Rbac.Application).
2024-04-08 12:24:54.226 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType3`4[[Yi.Framework.Core.Helper.MemoryMetrics, Yi.Framework.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Collections.Generic.List`1[[Yi.Framework.Core.Helper.DiskInfo, Yi.Framework.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType4`6[[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.Rbac.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType5`8[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.Rbac.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:24:54.234 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.Monitor.MonitorServerService.GetInfo (Yi.Framework.Rbac.Application) in 2048.8915ms
2024-04-08 12:24:54.235 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.MonitorServerService.GetInfo (Yi.Framework.Rbac.Application)'
2024-04-08 12:25:04.437 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:04.468 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-08 12:25:04.499 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-08 12:25:04.502 +08:00 [DBG] =========Yi-SQL耗时3.7883毫秒=====
2024-04-08 12:25:04.503 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-08 12:25:04.504 +08:00 [DBG] =========Yi-SQL耗时1.2155毫秒=====
2024-04-08 12:25:04.511 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-08 12:25:04.512 +08:00 [DBG] =========Yi-SQL耗时0.6233毫秒=====
2024-04-08 12:25:04.524 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:25:04.526 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 58.5425ms
2024-04-08 12:25:04.527 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:07.020 +08:00 [INF] CORS policy execution successful.
2024-04-08 12:25:07.021 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.CodeGenService.PostCodeBuildWebAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:07.024 +08:00 [INF] Route matched with {action = "PostCodeBuildWeb", controller = "CodeGen", area = ""}. Executing controller action with signature System.Threading.Tasks.Task PostCodeBuildWebAsync() on controller Yi.Framework.CodeGen.Application.Services.CodeGenService (Yi.Framework.CodeGen.Application).
2024-04-08 12:25:07.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
TRUNCATE TABLE "yitable"
===============================

2024-04-08 12:25:07.073 +08:00 [DBG] =========Yi-SQL耗时12.6185毫秒=====
2024-04-08 12:25:07.074 +08:00 [DBG] 
==========Yi-SQL执行:==========
TRUNCATE TABLE "yifield"
===============================

2024-04-08 12:25:07.084 +08:00 [DBG] =========Yi-SQL耗时10.1824毫秒=====
2024-04-08 12:25:07.130 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"  WHERE ( (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   ) )  
===============================

2024-04-08 12:25:07.131 +08:00 [DBG] =========Yi-SQL耗时0.8828毫秒=====
2024-04-08 12:25:07.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "yitable"  ("id","name","description","concurrencystamp") VALUES 
 (  'fcd2ecd3-7120-4d56-8728-235b3538ddfb' , 'YiTenant' , NULL , 'c663f790600e47b884668cebd6bcf94f' ),
 (  '4a36ecc6-5f5f-42aa-9b61-7e3b4ef3b8df' , 'OperationLog' , NULL , 'a0974ef20e5046baa2d24932776fa6f2' ),
 (  'f745df9a-d9bd-4d30-b0e1-0fa93170a171' , 'Config' , NULL , '2b5e5e0253af40eaa5508f9fac6eafb9' ),
 (  '1b6cd40c-3d0d-4390-9fa3-1dcaca4b9758' , 'Dept' , NULL , 'b0722666bfab41728b25af8449fd207d' ),
 (  '1f139fce-b2da-45b5-a28b-94102d524635' , 'Dictionary' , NULL , '1afe787313664dbfb7ca98c2b9bf7577' ),
 (  '6f82f3d1-ccbf-41ac-be46-7e0d630361c8' , 'DictionaryType' , NULL , '81c9b3d2442447c0a05caca30deb320f' ),
 (  '0198fcca-ff8b-4139-964b-b0883726e019' , 'File' , NULL , '910663812ba0445aacfd8b2f414cdf5c' ),
 (  '50755c2a-6714-4436-a493-e40fccf16460' , 'LoginLog' , NULL , '34e3cf1e951f48749952fd94156af7b3' ),
 (  'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'Menu' , NULL , '88f4e93c7e144b738344d7741c0a95f1' ),
 (  '44620b40-32ec-4e2c-a5d1-184512d059dc' , 'Notice' , NULL , '3cbea720f167406a9ce95bc5a7eed763' ),
 (  '7509e730-0fa0-4225-80f8-6338bcd4ba78' , 'Post' , NULL , '544ebf0dbfce405b9969bd9440a16f29' ),
 (  'e675298d-80b4-4428-87c4-300d943b7046' , 'RoleDept' , NULL , '8527a4a3376b4cc398b663f33a5c1181' ),
 (  '8dd11e96-b706-44ee-b19f-83e7ffdb2933' , 'Role' , NULL , '95bf7068b759482789714649c95f53d5' ),
 (  '39c0acb4-fac3-4a4c-aab6-abaf0b430264' , 'RoleMenu' , NULL , '3b1e65ba97614befa4276b4973e7a018' ),
 (  '3932df96-3b3b-4224-bd2c-27404dc36458' , 'User' , NULL , 'c897349ba2a54b669bc9a6c6e570cb2c' ),
 (  '3153ba4b-0c35-4a76-aae3-83b71837715c' , 'UserPost' , NULL , '45d99aed33e44576adababf084bf14df' ),
 (  'e055dd29-d51e-4912-ba9a-2e0a4ab28754' , 'UserRole' , NULL , '4ce71c6394d74c8f8b3cb39e14d29dc9' ),
 (  'e7816f2f-9c63-4dc5-ae42-785ea7d7041c' , 'Auth' , NULL , 'a0c9bdc421744710adacc69c7e3948af' ),
 (  'a72052a9-274e-4f62-a59f-4d7181f9dc19' , 'AccessLog' , NULL , 'd7709222d39c43ceb286e95f84770f88' ),
 (  '16d294d6-8dea-48f8-bba9-2b40d25170fa' , 'BbsUserExtraInfo' , NULL , '0c4dfa0412c94a7f9199843cd74cc2f7' ),
 (  'b80e1e4e-65b5-4c84-8e59-d8eaff2149a3' , 'Setting' , NULL , 'a1e2b4124f644a908aa0f7f2b9943831' ),
 (  'bc852714-2147-401f-941f-e2ea82ff3c11' , 'Level' , NULL , '0d1539c81d4e4ade93ad1e08e9d7ec07' ),
 (  '6a94204c-b184-4771-87c3-01f7a2e339dc' , 'SignIn' , NULL , 'ea47712c83614f92a990b9372b40021e' ),
 (  '7f9524ed-8eb4-4d67-b58b-a5f234d6d36a' , 'Agree' , NULL , 'aaf3c16f38ec47bdb144da4655323b55' ),
 (  '72a5b72a-7391-44e1-9225-edd5b79c6512' , 'Article' , NULL , '659956f56d674160b35281ce413f88af' ),
 (  '15af39da-2ca1-4a09-a5ed-31d16e18ee50' , 'Banner' , NULL , '891ff6878c8e4a94a565cbb121250c7b' ),
 (  'a011f600-0a34-4b77-b8cc-f71faac3c7f8' , 'Comment' , NULL , '211e217d61e140f39ee3a9ae3ed704cb' ),
 (  '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'Discuss' , NULL , 'b3e1951e6a484c17bf2d3429d254fab9' ),
 (  '74f94a32-ed10-4915-aeee-1a277b7a81d8' , 'DiscussMyType' , NULL , 'f6adde7e3fe145959a55024706721221' ),
 (  'c589a5ef-b24e-4230-8f8f-026be10bdedf' , 'DiscussTop' , NULL , 'db5887572cac4d7083801c5e97dcea9f' ),
 (  '9b398187-2232-462f-8b44-0eceb17c3053' , 'MyType' , NULL , '68e65b61b2644b0f908c27074749f701' ),
 (  'ae3715a2-8c60-49fb-896e-2d3aaf82562b' , 'Plate' , NULL , '84e0685f4e694e45843610dbf813344a' ),
 (  '39d5fe35-f817-44b6-9ef1-e780a50b4c9e' , 'BankCard' , NULL , '3678d575903a4148ae41ea066762c34a' ),
 (  'e43de526-3d18-4e9d-8783-a75e066cae44' , 'InterestRecords' , NULL , '2e573273680e4ee697505053c33fb1e7' ),
 (  '59452e04-971a-4024-9bdf-e9e92be7938e' , 'YiAuditLogAction' , NULL , '077a4df79ab341e4ae2cb3d7618b9288' ),
 (  'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'YiAuditLog' , NULL , '437b7d8905b34efa829463baf87cc264' ),
 (  '2e6f5d1d-98e8-468d-8608-b0ceb03d39dd' , 'YiEntityChange' , NULL , '20de27cb69d44430bc4a43032c6d70c3' ),
 (  'd1dac163-cd2a-42ad-b5b7-48de07dca06b' , 'YiEntityPropertyChange' , NULL , '4daf530090ca488dba086edd3654d4e4' ),
 (  'ec2ff903-6477-4487-a20a-a9c62e9ff777' , 'YiField' , NULL , 'c3255d3625534054a6e04bcb3beeb846' ),
 (  'df39c26f-162f-42d7-8d6d-d02ecd1d0436' , 'YiTable' , NULL , '428c624a53f04d6385d89c664bc75194' ),
 (  'bad32a49-67a2-4ccd-bbc9-7b3c23d64965' , 'YiTemplate' , NULL , '088305cdd5974a01ab876b9eba9f76c6' )
;

===============================

2024-04-08 12:25:07.151 +08:00 [DBG] =========Yi-SQL耗时1.5441毫秒=====
2024-04-08 12:25:07.158 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"  WHERE ( (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   ) )  
===============================

2024-04-08 12:25:07.161 +08:00 [DBG] =========Yi-SQL耗时4.2222毫秒=====
2024-04-08 12:25:07.165 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"  WHERE ( (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   ) )  
===============================

2024-04-08 12:25:07.165 +08:00 [DBG] =========Yi-SQL耗时1.7028毫秒=====
2024-04-08 12:25:07.190 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "yifield"  ("id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic") VALUES 
 (  'd9c2767f-64c7-4d30-aa7b-ef75d6b4ffc2' , 'Id' , NULL , '0' , '0' , '6' , 'fcd2ecd3-7120-4d56-8728-235b3538ddfb' , 'True' , 'True' , 'False' , 'False' ),
 (  '5da40b9c-7fe4-4b1f-9303-90ca2e4193bd' , 'Name' , NULL , '0' , '0' , '0' , 'fcd2ecd3-7120-4d56-8728-235b3538ddfb' , 'True' , 'False' , 'False' , 'False' ),
 (  '38ab8c8d-8f73-4b3c-8233-79b98264b284' , 'EntityVersion' , NULL , '0' , '0' , '1' , 'fcd2ecd3-7120-4d56-8728-235b3538ddfb' , 'True' , 'False' , 'False' , 'False' ),
 (  '144fa3b4-00b2-46d1-97ad-622bb0af72cd' , 'TenantConnectionString' , NULL , '0' , '0' , '0' , 'fcd2ecd3-7120-4d56-8728-235b3538ddfb' , 'True' , 'False' , 'False' , 'False' ),
 (  '93bceb6d-8dbf-4bb6-a1e2-027bc3631dad' , 'DbType' , NULL , '0' , '0' , '0' , 'fcd2ecd3-7120-4d56-8728-235b3538ddfb' , 'True' , 'False' , 'False' , 'False' ),
 (  '460361e8-ec23-4618-91c4-bec322a07214' , 'ExtraProperties' , NULL , '0' , '0' , '0' , 'fcd2ecd3-7120-4d56-8728-235b3538ddfb' , 'True' , 'False' , 'False' , 'False' ),
 (  '50b1d957-7eb2-4242-b77e-a28ca2ef8362' , 'IsDeleted' , NULL , '0' , '0' , '3' , 'fcd2ecd3-7120-4d56-8728-235b3538ddfb' , 'True' , 'False' , 'False' , 'False' ),
 (  '67c761cb-6075-4d88-b758-b10345a73ea2' , 'DeleterId' , NULL , '0' , '0' , '6' , 'fcd2ecd3-7120-4d56-8728-235b3538ddfb' , 'False' , 'False' , 'False' , 'False' ),
 (  '5eb32767-7964-4615-bbc7-ae3d0028f829' , 'DeletionTime' , NULL , '0' , '0' , '5' , 'fcd2ecd3-7120-4d56-8728-235b3538ddfb' , 'False' , 'False' , 'False' , 'False' ),
 (  '373555a4-28ae-43e7-8f3a-c2d80052bf5f' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'fcd2ecd3-7120-4d56-8728-235b3538ddfb' , 'False' , 'False' , 'False' , 'False' ),
 (  '3392b58d-02ee-492b-ac89-295af7dcd3d3' , 'LastModifierId' , NULL , '0' , '0' , '6' , 'fcd2ecd3-7120-4d56-8728-235b3538ddfb' , 'False' , 'False' , 'False' , 'False' ),
 (  '6e8f8056-27b5-4ade-96d9-9e051c52ae87' , 'CreationTime' , NULL , '0' , '0' , '5' , 'fcd2ecd3-7120-4d56-8728-235b3538ddfb' , 'True' , 'False' , 'False' , 'False' ),
 (  'cb9a3fad-4651-4d5e-aa2b-7e43610a67bd' , 'CreatorId' , NULL , '0' , '0' , '6' , 'fcd2ecd3-7120-4d56-8728-235b3538ddfb' , 'False' , 'False' , 'False' , 'False' ),
 (  '935b8d86-7272-40c1-b600-592bf8192835' , 'ConcurrencyStamp' , NULL , '0' , '0' , '0' , 'fcd2ecd3-7120-4d56-8728-235b3538ddfb' , 'True' , 'False' , 'False' , 'False' ),
 (  '52aaa0c8-c677-402f-a47d-daba79536f49' , 'Id' , NULL , '0' , '0' , '6' , '4a36ecc6-5f5f-42aa-9b61-7e3b4ef3b8df' , 'True' , 'True' , 'False' , 'False' ),
 (  'e1435439-b8b4-4fae-9955-b8edda58afe6' , 'Title' , NULL , '0' , '0' , '0' , '4a36ecc6-5f5f-42aa-9b61-7e3b4ef3b8df' , 'True' , 'False' , 'False' , 'False' ),
 (  '6b60d5ac-45a7-4eb9-bc96-dbe4fac168f4' , 'OperType' , NULL , '0' , '0' , '0' , '4a36ecc6-5f5f-42aa-9b61-7e3b4ef3b8df' , 'True' , 'False' , 'False' , 'False' ),
 (  '0909c72d-3e3b-440e-b0d4-a9ef1450e6df' , 'RequestMethod' , NULL , '0' , '0' , '0' , '4a36ecc6-5f5f-42aa-9b61-7e3b4ef3b8df' , 'True' , 'False' , 'False' , 'False' ),
 (  '589ecdcc-511d-4e39-870b-ff8105ac3bb1' , 'OperUser' , NULL , '0' , '0' , '0' , '4a36ecc6-5f5f-42aa-9b61-7e3b4ef3b8df' , 'True' , 'False' , 'False' , 'False' ),
 (  '5c863409-a8ea-4552-ac45-a10bf51b6ee4' , 'OperIp' , NULL , '0' , '0' , '0' , '4a36ecc6-5f5f-42aa-9b61-7e3b4ef3b8df' , 'True' , 'False' , 'False' , 'False' ),
 (  '88cbb29a-905a-4734-81f4-a342537e2779' , 'OperLocation' , NULL , '0' , '0' , '0' , '4a36ecc6-5f5f-42aa-9b61-7e3b4ef3b8df' , 'True' , 'False' , 'False' , 'False' ),
 (  '33658096-cc84-4925-9e94-1d3f7ec3bc04' , 'Method' , NULL , '0' , '0' , '0' , '4a36ecc6-5f5f-42aa-9b61-7e3b4ef3b8df' , 'True' , 'False' , 'False' , 'False' ),
 (  '95a6e0af-2aa2-4126-bca6-632314433d18' , 'RequestParam' , NULL , '0' , '0' , '0' , '4a36ecc6-5f5f-42aa-9b61-7e3b4ef3b8df' , 'True' , 'False' , 'False' , 'False' ),
 (  '11ce9fe1-ba1c-4ad7-90f7-5379bec1544e' , 'RequestResult' , NULL , '0' , '9999' , '0' , '4a36ecc6-5f5f-42aa-9b61-7e3b4ef3b8df' , 'True' , 'False' , 'False' , 'False' ),
 (  '15279a4d-f221-4ca9-8688-d1c77aa12257' , 'CreationTime' , NULL , '0' , '0' , '5' , '4a36ecc6-5f5f-42aa-9b61-7e3b4ef3b8df' , 'True' , 'False' , 'False' , 'False' ),
 (  '1a66cf25-21fe-4baa-915a-17e2785a0f7c' , 'CreatorId' , NULL , '0' , '0' , '6' , '4a36ecc6-5f5f-42aa-9b61-7e3b4ef3b8df' , 'False' , 'False' , 'False' , 'False' ),
 (  '8ba8a0e1-bccb-4c3c-879f-00efa667539a' , 'Id' , NULL , '0' , '0' , '6' , 'f745df9a-d9bd-4d30-b0e1-0fa93170a171' , 'True' , 'True' , 'False' , 'False' ),
 (  '222ae645-7a5e-467f-88e1-d80e383611ac' , 'ConfigName' , NULL , '0' , '0' , '0' , 'f745df9a-d9bd-4d30-b0e1-0fa93170a171' , 'True' , 'False' , 'False' , 'False' ),
 (  '2875b5f2-5182-4a43-9d5b-c0a87a3bf658' , 'ConfigKey' , NULL , '0' , '0' , '0' , 'f745df9a-d9bd-4d30-b0e1-0fa93170a171' , 'True' , 'False' , 'False' , 'False' ),
 (  'a66355ee-c070-464f-be6c-28288cb8b415' , 'ConfigValue' , NULL , '0' , '0' , '0' , 'f745df9a-d9bd-4d30-b0e1-0fa93170a171' , 'True' , 'False' , 'False' , 'False' ),
 (  '3f44c9e1-9e51-4454-b695-aba9e5f7e068' , 'ConfigType' , NULL , '0' , '0' , '0' , 'f745df9a-d9bd-4d30-b0e1-0fa93170a171' , 'True' , 'False' , 'False' , 'False' ),
 (  'fdbd0b11-5fab-48b2-a4b1-a333c9021283' , 'OrderNum' , NULL , '0' , '0' , '1' , 'f745df9a-d9bd-4d30-b0e1-0fa93170a171' , 'True' , 'False' , 'False' , 'False' ),
 (  'd7cf0b90-7a69-4d9c-a8c3-f99ea53f80d8' , 'Remark' , NULL , '0' , '0' , '0' , 'f745df9a-d9bd-4d30-b0e1-0fa93170a171' , 'True' , 'False' , 'False' , 'False' ),
 (  '2fc45655-983f-497c-82ad-991e42d536b9' , 'IsDeleted' , NULL , '0' , '0' , '3' , 'f745df9a-d9bd-4d30-b0e1-0fa93170a171' , 'True' , 'False' , 'False' , 'False' ),
 (  'b2e67b8d-deb9-4f22-8a80-599de80bc14d' , 'CreationTime' , NULL , '0' , '0' , '5' , 'f745df9a-d9bd-4d30-b0e1-0fa93170a171' , 'True' , 'False' , 'False' , 'False' ),
 (  '5c4f70ea-6965-4186-9308-6e0499f4354f' , 'CreatorId' , NULL , '0' , '0' , '6' , 'f745df9a-d9bd-4d30-b0e1-0fa93170a171' , 'False' , 'False' , 'False' , 'False' ),
 (  'e99590eb-aeb8-4203-9dde-e7eabb082e93' , 'LastModifierId' , NULL , '0' , '0' , '6' , 'f745df9a-d9bd-4d30-b0e1-0fa93170a171' , 'False' , 'False' , 'False' , 'False' ),
 (  '3bbd401c-9375-4130-9a58-0cd10d0e0c0b' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'f745df9a-d9bd-4d30-b0e1-0fa93170a171' , 'False' , 'False' , 'False' , 'False' ),
 (  'fea5a922-17e1-4ae8-9f5c-75b8367200c6' , 'Id' , NULL , '0' , '0' , '6' , '1b6cd40c-3d0d-4390-9fa3-1dcaca4b9758' , 'True' , 'True' , 'False' , 'False' ),
 (  '03c4bbd1-5429-4aeb-900c-78eda3f5f432' , 'IsDeleted' , NULL , '0' , '0' , '3' , '1b6cd40c-3d0d-4390-9fa3-1dcaca4b9758' , 'True' , 'False' , 'False' , 'False' ),
 (  '902e0f90-5105-4b50-b341-b29d730c11b9' , 'CreationTime' , NULL , '0' , '0' , '5' , '1b6cd40c-3d0d-4390-9fa3-1dcaca4b9758' , 'True' , 'False' , 'False' , 'False' ),
 (  'e0df1b24-625d-4378-a581-6fb3b9795008' , 'CreatorId' , NULL , '0' , '0' , '6' , '1b6cd40c-3d0d-4390-9fa3-1dcaca4b9758' , 'False' , 'False' , 'False' , 'False' ),
 (  '7791661c-5288-4fd6-93ab-ecc3e3fdb80b' , 'LastModifierId' , NULL , '0' , '0' , '6' , '1b6cd40c-3d0d-4390-9fa3-1dcaca4b9758' , 'False' , 'False' , 'False' , 'False' ),
 (  '145aadf4-89f1-4dc6-a256-ab2bdd6b3216' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '1b6cd40c-3d0d-4390-9fa3-1dcaca4b9758' , 'False' , 'False' , 'False' , 'False' ),
 (  '4289a863-feed-46ab-a667-df94f46e55a0' , 'OrderNum' , NULL , '0' , '0' , '1' , '1b6cd40c-3d0d-4390-9fa3-1dcaca4b9758' , 'True' , 'False' , 'False' , 'False' ),
 (  'f331be8a-797d-4ab1-bb84-59f28abc1fd8' , 'State' , NULL , '0' , '0' , '3' , '1b6cd40c-3d0d-4390-9fa3-1dcaca4b9758' , 'True' , 'False' , 'False' , 'False' ),
 (  '4291c8f9-d42c-42a9-ab09-7c30c3e8de3e' , 'DeptName' , NULL , '0' , '0' , '0' , '1b6cd40c-3d0d-4390-9fa3-1dcaca4b9758' , 'True' , 'False' , 'False' , 'False' ),
 (  '0d281259-922c-4b49-9cb5-25274de41a3a' , 'DeptCode' , NULL , '0' , '0' , '0' , '1b6cd40c-3d0d-4390-9fa3-1dcaca4b9758' , 'True' , 'False' , 'False' , 'False' ),
 (  'd1506a44-68b0-430b-9b8a-3b7d0caae80a' , 'Leader' , NULL , '0' , '0' , '0' , '1b6cd40c-3d0d-4390-9fa3-1dcaca4b9758' , 'True' , 'False' , 'False' , 'False' ),
 (  'f3ca4d19-0730-46df-9d56-ab572517d79d' , 'ParentId' , NULL , '0' , '0' , '6' , '1b6cd40c-3d0d-4390-9fa3-1dcaca4b9758' , 'True' , 'False' , 'False' , 'False' ),
 (  'fdada30a-3e71-44ea-9fc9-1a2c04cbe605' , 'Remark' , NULL , '0' , '0' , '0' , '1b6cd40c-3d0d-4390-9fa3-1dcaca4b9758' , 'True' , 'False' , 'False' , 'False' ),
 (  'b2b8c8b4-90c8-4574-96d3-37171f856a96' , 'Id' , NULL , '0' , '0' , '6' , '1f139fce-b2da-45b5-a28b-94102d524635' , 'True' , 'True' , 'False' , 'False' ),
 (  'd7fb44be-3784-4ede-b92d-3e5900b7ed0d' , 'IsDeleted' , NULL , '0' , '0' , '3' , '1f139fce-b2da-45b5-a28b-94102d524635' , 'True' , 'False' , 'False' , 'False' ),
 (  '896ddbfd-f516-4065-a1b0-0f456fb70d82' , 'OrderNum' , NULL , '0' , '0' , '1' , '1f139fce-b2da-45b5-a28b-94102d524635' , 'True' , 'False' , 'False' , 'False' ),
 (  'efcacdf4-f42c-4c9a-bc89-71d3bbaff0ab' , 'State' , NULL , '0' , '0' , '3' , '1f139fce-b2da-45b5-a28b-94102d524635' , 'True' , 'False' , 'False' , 'False' ),
 (  'b31700db-c4ad-4605-b4c9-ed538e7a4e68' , 'Remark' , NULL , '0' , '0' , '0' , '1f139fce-b2da-45b5-a28b-94102d524635' , 'True' , 'False' , 'False' , 'False' ),
 (  '4074202d-e060-49a0-91d2-50d43274341a' , 'ListClass' , NULL , '0' , '0' , '0' , '1f139fce-b2da-45b5-a28b-94102d524635' , 'True' , 'False' , 'False' , 'False' ),
 (  '015df911-29f6-44fa-8243-07795d3d762d' , 'CssClass' , NULL , '0' , '0' , '0' , '1f139fce-b2da-45b5-a28b-94102d524635' , 'True' , 'False' , 'False' , 'False' ),
 (  '2863932c-bb27-45ec-bb36-2638dc042f71' , 'DictType' , NULL , '0' , '0' , '0' , '1f139fce-b2da-45b5-a28b-94102d524635' , 'True' , 'False' , 'False' , 'False' ),
 (  'e681bfb9-bf0a-448b-b8af-e46eaf4f1176' , 'DictLabel' , NULL , '0' , '0' , '0' , '1f139fce-b2da-45b5-a28b-94102d524635' , 'True' , 'False' , 'False' , 'False' ),
 (  '48a6bca3-5d58-49a6-b19b-1c21269040ef' , 'DictValue' , NULL , '0' , '0' , '0' , '1f139fce-b2da-45b5-a28b-94102d524635' , 'True' , 'False' , 'False' , 'False' ),
 (  'e6161b81-c6bf-40f4-94a9-50ebfcb174ca' , 'IsDefault' , NULL , '0' , '0' , '3' , '1f139fce-b2da-45b5-a28b-94102d524635' , 'True' , 'False' , 'False' , 'False' ),
 (  '6fa37a37-d393-4758-bfa6-f565ae6408dd' , 'CreationTime' , NULL , '0' , '0' , '5' , '1f139fce-b2da-45b5-a28b-94102d524635' , 'True' , 'False' , 'False' , 'False' ),
 (  'a923587f-20ae-46a8-97da-61e33f506b36' , 'CreatorId' , NULL , '0' , '0' , '6' , '1f139fce-b2da-45b5-a28b-94102d524635' , 'False' , 'False' , 'False' , 'False' ),
 (  '4856c28d-2964-4248-a489-0c2e0bfeff78' , 'LastModifierId' , NULL , '0' , '0' , '6' , '1f139fce-b2da-45b5-a28b-94102d524635' , 'False' , 'False' , 'False' , 'False' ),
 (  'c556ec52-818c-49c6-ac56-e67df96efe42' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '1f139fce-b2da-45b5-a28b-94102d524635' , 'False' , 'False' , 'False' , 'False' ),
 (  '7946ea32-2254-4e50-aa92-5f8c087c6f78' , 'Id' , NULL , '0' , '0' , '6' , '6f82f3d1-ccbf-41ac-be46-7e0d630361c8' , 'True' , 'True' , 'False' , 'False' ),
 (  'afd52044-b1e0-4aa4-8744-e583514398ae' , 'IsDeleted' , NULL , '0' , '0' , '3' , '6f82f3d1-ccbf-41ac-be46-7e0d630361c8' , 'True' , 'False' , 'False' , 'False' ),
 (  '5740f514-e232-43da-8401-d13ad4f20cad' , 'OrderNum' , NULL , '0' , '0' , '1' , '6f82f3d1-ccbf-41ac-be46-7e0d630361c8' , 'True' , 'False' , 'False' , 'False' ),
 (  'cf4725aa-08a6-45bb-88f7-c50f1ca28182' , 'State' , NULL , '0' , '0' , '3' , '6f82f3d1-ccbf-41ac-be46-7e0d630361c8' , 'False' , 'False' , 'False' , 'False' ),
 (  'bc194264-e17d-422a-a106-dfdcd9185f45' , 'DictName' , NULL , '0' , '0' , '0' , '6f82f3d1-ccbf-41ac-be46-7e0d630361c8' , 'True' , 'False' , 'False' , 'False' ),
 (  '04010930-50a4-44b4-abce-58542cc022ae' , 'DictType' , NULL , '0' , '0' , '0' , '6f82f3d1-ccbf-41ac-be46-7e0d630361c8' , 'True' , 'False' , 'False' , 'False' ),
 (  'ab11dee4-356f-4507-9ab4-7aad71194413' , 'Remark' , NULL , '0' , '0' , '0' , '6f82f3d1-ccbf-41ac-be46-7e0d630361c8' , 'True' , 'False' , 'False' , 'False' ),
 (  'ba425eda-fd8d-4e32-9dee-460beaee4ebb' , 'CreationTime' , NULL , '0' , '0' , '5' , '6f82f3d1-ccbf-41ac-be46-7e0d630361c8' , 'True' , 'False' , 'False' , 'False' ),
 (  'eae36c33-3d56-4392-8d89-57e7da2e58b5' , 'CreatorId' , NULL , '0' , '0' , '6' , '6f82f3d1-ccbf-41ac-be46-7e0d630361c8' , 'False' , 'False' , 'False' , 'False' ),
 (  '4935713c-d5c7-4c48-a3d0-ea734d445cc4' , 'LastModifierId' , NULL , '0' , '0' , '6' , '6f82f3d1-ccbf-41ac-be46-7e0d630361c8' , 'False' , 'False' , 'False' , 'False' ),
 (  'bb666ec4-4e34-4b06-99c3-7973496ae378' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '6f82f3d1-ccbf-41ac-be46-7e0d630361c8' , 'False' , 'False' , 'False' , 'False' ),
 (  '94566e2a-8935-4579-9374-f5439cb24808' , 'ExtraProperties' , NULL , '0' , '0' , '0' , '6f82f3d1-ccbf-41ac-be46-7e0d630361c8' , 'True' , 'False' , 'False' , 'False' ),
 (  'ca8b4fb3-6960-4fe1-8d3f-e6946caa2bb3' , 'ConcurrencyStamp' , NULL , '0' , '0' , '0' , '6f82f3d1-ccbf-41ac-be46-7e0d630361c8' , 'True' , 'False' , 'False' , 'False' ),
 (  '8dc762a0-2ced-47aa-9edd-7f010da6b64d' , 'Id' , NULL , '0' , '0' , '6' , '0198fcca-ff8b-4139-964b-b0883726e019' , 'True' , 'True' , 'False' , 'False' ),
 (  'f3ac09ab-cee0-4fb6-b97f-4ed19328fa5e' , 'FileSize' , NULL , '0' , '0' , '4' , '0198fcca-ff8b-4139-964b-b0883726e019' , 'True' , 'False' , 'False' , 'False' ),
 (  '812d136c-5a1d-4f78-8121-732de10fa65f' , 'FileName' , NULL , '0' , '0' , '0' , '0198fcca-ff8b-4139-964b-b0883726e019' , 'True' , 'False' , 'False' , 'False' ),
 (  'ef93abfb-9a85-4ff5-8b76-17fcfbefba6a' , 'FilePath' , NULL , '0' , '0' , '0' , '0198fcca-ff8b-4139-964b-b0883726e019' , 'True' , 'False' , 'False' , 'False' ),
 (  '33b98861-d56a-4bd0-a87a-6468d9d9e7e3' , 'CreationTime' , NULL , '0' , '0' , '5' , '0198fcca-ff8b-4139-964b-b0883726e019' , 'True' , 'False' , 'False' , 'False' ),
 (  '35d803e7-8f95-4888-8c75-e94e30eeedea' , 'CreatorId' , NULL , '0' , '0' , '6' , '0198fcca-ff8b-4139-964b-b0883726e019' , 'False' , 'False' , 'False' , 'False' ),
 (  '5449bea8-0664-4bc2-b713-354452672029' , 'LastModifierId' , NULL , '0' , '0' , '6' , '0198fcca-ff8b-4139-964b-b0883726e019' , 'False' , 'False' , 'False' , 'False' ),
 (  '51ca6254-d51b-4f2c-90ff-9fa6437414f6' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '0198fcca-ff8b-4139-964b-b0883726e019' , 'False' , 'False' , 'False' , 'False' ),
 (  '7f28b6ea-ea45-4daf-b3a2-d1901283b451' , 'ExtraProperties' , NULL , '0' , '0' , '0' , '0198fcca-ff8b-4139-964b-b0883726e019' , 'True' , 'False' , 'False' , 'False' ),
 (  'ca5ef4fb-2e6c-4602-9722-6fe49a439601' , 'ConcurrencyStamp' , NULL , '0' , '0' , '0' , '0198fcca-ff8b-4139-964b-b0883726e019' , 'True' , 'False' , 'False' , 'False' ),
 (  '97253acf-1128-4166-95a7-2447afb48fc5' , 'Id' , NULL , '0' , '0' , '6' , '50755c2a-6714-4436-a493-e40fccf16460' , 'True' , 'True' , 'False' , 'False' ),
 (  'db86725b-21bd-4462-b234-07b18ace0e03' , 'CreationTime' , NULL , '0' , '0' , '5' , '50755c2a-6714-4436-a493-e40fccf16460' , 'True' , 'False' , 'False' , 'False' ),
 (  '6527f804-7029-4b96-bdb9-e9f72be44da9' , 'LoginUser' , NULL , '0' , '0' , '0' , '50755c2a-6714-4436-a493-e40fccf16460' , 'True' , 'False' , 'False' , 'False' ),
 (  '65ba9b6b-1f93-4b8c-98d0-8709e58a10f1' , 'LoginLocation' , NULL , '0' , '0' , '0' , '50755c2a-6714-4436-a493-e40fccf16460' , 'True' , 'False' , 'False' , 'False' ),
 (  '15c6d253-e787-4860-a3cd-f3920d76f635' , 'LoginIp' , NULL , '0' , '0' , '0' , '50755c2a-6714-4436-a493-e40fccf16460' , 'True' , 'False' , 'False' , 'False' ),
 (  'd9f92ac1-e2ef-407e-aaed-0ca24263b071' , 'Browser' , NULL , '0' , '0' , '0' , '50755c2a-6714-4436-a493-e40fccf16460' , 'True' , 'False' , 'False' , 'False' ),
 (  'b741306f-f203-4aec-98ef-0e1698a41bf6' , 'Os' , NULL , '0' , '0' , '0' , '50755c2a-6714-4436-a493-e40fccf16460' , 'True' , 'False' , 'False' , 'False' ),
 (  '3dbf6582-dc9a-426c-8b52-4c5ef7f6143c' , 'LogMsg' , NULL , '0' , '0' , '0' , '50755c2a-6714-4436-a493-e40fccf16460' , 'True' , 'False' , 'False' , 'False' ),
 (  '3b8f3b1f-d505-4118-89b7-5d3aa10d6f96' , 'CreatorId' , NULL , '0' , '0' , '6' , '50755c2a-6714-4436-a493-e40fccf16460' , 'False' , 'False' , 'False' , 'False' ),
 (  'db2cd41d-149b-4463-86e0-47a05a18d252' , 'Id' , NULL , '0' , '0' , '6' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'True' , 'True' , 'False' , 'False' ),
 (  '97e16963-c304-4bd5-9120-135e64bf1054' , 'IsDeleted' , NULL , '0' , '0' , '3' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'True' , 'False' , 'False' , 'False' ),
 (  '99f35ddb-7428-461e-bf55-6bbc152c1e45' , 'CreationTime' , NULL , '0' , '0' , '5' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'True' , 'False' , 'False' , 'False' ),
 (  'e87a0651-02a5-479b-950c-a502416fbfda' , 'CreatorId' , NULL , '0' , '0' , '6' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'False' , 'False' , 'False' , 'False' ),
 (  '6440dec7-9f5b-428a-8fe7-921cd5cd3140' , 'LastModifierId' , NULL , '0' , '0' , '6' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'False' , 'False' , 'False' , 'False' ),
 (  '2c439871-7ce1-4944-ac01-9f17304d5880' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'False' , 'False' , 'False' , 'False' ),
 (  '702f17e2-b989-4fd2-b0d6-53b59b6abdf0' , 'OrderNum' , NULL , '0' , '0' , '1' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'True' , 'False' , 'False' , 'False' ),
 (  '28bce2dc-4a50-4cc0-8171-83f91d598607' , 'State' , NULL , '0' , '0' , '3' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'True' , 'False' , 'False' , 'False' ),
 (  'df947d10-f4c2-4285-b845-6de3a7e9dd8a' , 'MenuName' , NULL , '0' , '0' , '0' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'True' , 'False' , 'False' , 'False' ),
 (  'f93fb3a4-3cd7-4b31-b33d-19e485bc0c69' , 'MenuType' , NULL , '0' , '0' , '0' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'True' , 'False' , 'False' , 'False' ),
 (  '52f9289d-cbbd-4951-a2ca-2e2b6f5376fd' , 'PermissionCode' , NULL , '0' , '0' , '0' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'True' , 'False' , 'False' , 'False' ),
 (  'd3762c88-0e37-4ea3-8f66-8d15002eb06d' , 'ParentId' , NULL , '0' , '0' , '6' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'True' , 'False' , 'False' , 'False' ),
 (  '817fbabc-ac3b-4cfe-94f0-891dcc8c4965' , 'MenuIcon' , NULL , '0' , '0' , '0' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'True' , 'False' , 'False' , 'False' ),
 (  '37e5fccc-3baa-4745-951f-92ffcfadd3f5' , 'Router' , NULL , '0' , '0' , '0' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'True' , 'False' , 'False' , 'False' ),
 (  'a097cfb4-62ce-4655-a3ab-257ee74b38d1' , 'IsLink' , NULL , '0' , '0' , '3' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'True' , 'False' , 'False' , 'False' ),
 (  '43c678fb-774b-4d86-947e-829088dc2222' , 'IsCache' , NULL , '0' , '0' , '3' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'True' , 'False' , 'False' , 'False' ),
 (  'f70a2319-7898-402e-b91b-9c314d55226e' , 'IsShow' , NULL , '0' , '0' , '3' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'True' , 'False' , 'False' , 'False' ),
 (  '0d7fe1df-b890-4f90-81df-96358c7c2da1' , 'Remark' , NULL , '0' , '0' , '0' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'True' , 'False' , 'False' , 'False' ),
 (  '7e945379-054c-431c-83ab-af7ba5c7a516' , 'Component' , NULL , '0' , '0' , '0' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'True' , 'False' , 'False' , 'False' ),
 (  'f2d77358-32ad-4330-9e9a-b690fc19987b' , 'Query' , NULL , '0' , '0' , '0' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'True' , 'False' , 'False' , 'False' ),
 (  'a01919d6-6d96-48b0-ae56-898e02a9e386' , 'Children' , NULL , '0' , '0' , '0' , 'b0a219f7-f25c-4c8b-9485-a43a361fc65a' , 'True' , 'False' , 'False' , 'False' ),
 (  'da3eb735-e4ac-46a5-a067-db1d899d598e' , 'Id' , NULL , '0' , '0' , '6' , '44620b40-32ec-4e2c-a5d1-184512d059dc' , 'True' , 'True' , 'False' , 'False' ),
 (  '1def8ec6-fd20-455a-a2e0-6fc8da2d055a' , 'Title' , NULL , '0' , '0' , '0' , '44620b40-32ec-4e2c-a5d1-184512d059dc' , 'True' , 'False' , 'False' , 'False' ),
 (  '6ff16b9c-2b78-4ea0-9a09-0dfee67ca07e' , 'Type' , NULL , '0' , '0' , '0' , '44620b40-32ec-4e2c-a5d1-184512d059dc' , 'True' , 'False' , 'False' , 'False' ),
 (  'b8f6efc6-5494-4310-81fb-bba67a9e927a' , 'Content' , NULL , '0' , '0' , '0' , '44620b40-32ec-4e2c-a5d1-184512d059dc' , 'True' , 'False' , 'False' , 'False' ),
 (  'a21d9f15-ece3-4052-8f99-fdcc51a8e43d' , 'IsDeleted' , NULL , '0' , '0' , '3' , '44620b40-32ec-4e2c-a5d1-184512d059dc' , 'True' , 'False' , 'False' , 'False' ),
 (  '1c557346-b60f-4fd7-951f-6efe9cb0ffcd' , 'CreationTime' , NULL , '0' , '0' , '5' , '44620b40-32ec-4e2c-a5d1-184512d059dc' , 'True' , 'False' , 'False' , 'False' ),
 (  'f24f0964-1a79-402d-9351-46626a994262' , 'CreatorId' , NULL , '0' , '0' , '6' , '44620b40-32ec-4e2c-a5d1-184512d059dc' , 'False' , 'False' , 'False' , 'False' ),
 (  '62687cfd-0ec7-4b78-aa9d-69be4e37228a' , 'LastModifierId' , NULL , '0' , '0' , '6' , '44620b40-32ec-4e2c-a5d1-184512d059dc' , 'False' , 'False' , 'False' , 'False' ),
 (  '171b8353-7110-4eea-af3a-a2373936591a' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '44620b40-32ec-4e2c-a5d1-184512d059dc' , 'False' , 'False' , 'False' , 'False' ),
 (  'a970017a-07fa-427d-b67f-5c992bc7fec5' , 'OrderNum' , NULL , '0' , '0' , '1' , '44620b40-32ec-4e2c-a5d1-184512d059dc' , 'True' , 'False' , 'False' , 'False' ),
 (  '2045710a-0a15-4fa2-ba51-8d71c4c11339' , 'State' , NULL , '0' , '0' , '3' , '44620b40-32ec-4e2c-a5d1-184512d059dc' , 'True' , 'False' , 'False' , 'False' ),
 (  '154a4196-7452-48be-aa10-f12ab3ce2b20' , 'Id' , NULL , '0' , '0' , '6' , '7509e730-0fa0-4225-80f8-6338bcd4ba78' , 'True' , 'True' , 'False' , 'False' ),
 (  'a9df8420-73bc-46d4-8007-fab0b4bf5a52' , 'IsDeleted' , NULL , '0' , '0' , '3' , '7509e730-0fa0-4225-80f8-6338bcd4ba78' , 'True' , 'False' , 'False' , 'False' ),
 (  '2218d848-5558-40d1-8658-2046d8d443b2' , 'CreationTime' , NULL , '0' , '0' , '5' , '7509e730-0fa0-4225-80f8-6338bcd4ba78' , 'True' , 'False' , 'False' , 'False' ),
 (  'bd62ba1d-e6eb-4da7-bba0-cf2efa9d5f8e' , 'CreatorId' , NULL , '0' , '0' , '6' , '7509e730-0fa0-4225-80f8-6338bcd4ba78' , 'False' , 'False' , 'False' , 'False' ),
 (  '1a0d84ce-14be-45e7-ac4f-6da480976d6f' , 'LastModifierId' , NULL , '0' , '0' , '6' , '7509e730-0fa0-4225-80f8-6338bcd4ba78' , 'False' , 'False' , 'False' , 'False' ),
 (  '2536ea5a-9e25-4902-820b-efcf3bf4f7b8' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '7509e730-0fa0-4225-80f8-6338bcd4ba78' , 'False' , 'False' , 'False' , 'False' ),
 (  '99305a25-18ab-4710-9fdd-6e1c158bd06c' , 'OrderNum' , NULL , '0' , '0' , '1' , '7509e730-0fa0-4225-80f8-6338bcd4ba78' , 'True' , 'False' , 'False' , 'False' ),
 (  '09502c82-fa61-4067-9e06-2fb4c5e4f27e' , 'State' , NULL , '0' , '0' , '3' , '7509e730-0fa0-4225-80f8-6338bcd4ba78' , 'True' , 'False' , 'False' , 'False' ),
 (  '052e22f8-2180-4398-9af8-6ca69bab9d50' , 'PostCode' , NULL , '0' , '0' , '0' , '7509e730-0fa0-4225-80f8-6338bcd4ba78' , 'True' , 'False' , 'False' , 'False' ),
 (  '73ab1c8d-2bd7-4fab-8154-e78a2e1f5444' , 'PostName' , NULL , '0' , '0' , '0' , '7509e730-0fa0-4225-80f8-6338bcd4ba78' , 'True' , 'False' , 'False' , 'False' ),
 (  'fb4b0d4c-681b-4ec3-b0b5-7ea7361c2ec4' , 'Remark' , NULL , '0' , '0' , '0' , '7509e730-0fa0-4225-80f8-6338bcd4ba78' , 'True' , 'False' , 'False' , 'False' ),
 (  'd1547d96-9c54-4722-8462-3e5cf035e1df' , 'Id' , NULL , '0' , '0' , '6' , 'e675298d-80b4-4428-87c4-300d943b7046' , 'True' , 'True' , 'False' , 'False' ),
 (  '8695a34b-6612-4af1-9331-840fc950e1ab' , 'RoleId' , NULL , '0' , '0' , '6' , 'e675298d-80b4-4428-87c4-300d943b7046' , 'True' , 'False' , 'False' , 'False' ),
 (  '497ff218-0d4d-4ae0-9432-be6a21a9f753' , 'DeptId' , NULL , '0' , '0' , '6' , 'e675298d-80b4-4428-87c4-300d943b7046' , 'True' , 'False' , 'False' , 'False' ),
 (  '5229d739-cf6f-478f-9c24-df94dbeb488f' , 'Id' , NULL , '0' , '0' , '6' , '8dd11e96-b706-44ee-b19f-83e7ffdb2933' , 'True' , 'True' , 'False' , 'False' ),
 (  'd1e0bb47-d416-4d66-b00d-12937a1acb51' , 'IsDeleted' , NULL , '0' , '0' , '3' , '8dd11e96-b706-44ee-b19f-83e7ffdb2933' , 'True' , 'False' , 'False' , 'False' ),
 (  'bf454f30-0297-41f3-a858-f10ae3a4a74e' , 'CreationTime' , NULL , '0' , '0' , '5' , '8dd11e96-b706-44ee-b19f-83e7ffdb2933' , 'True' , 'False' , 'False' , 'False' ),
 (  '10890119-837c-43f6-b5ac-642b663684a6' , 'CreatorId' , NULL , '0' , '0' , '6' , '8dd11e96-b706-44ee-b19f-83e7ffdb2933' , 'False' , 'False' , 'False' , 'False' ),
 (  '8e714830-3a0b-419f-ae4f-47df40c2a067' , 'LastModifierId' , NULL , '0' , '0' , '6' , '8dd11e96-b706-44ee-b19f-83e7ffdb2933' , 'False' , 'False' , 'False' , 'False' ),
 (  '9d7840f4-82aa-49eb-bdae-7a9fd7405b55' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '8dd11e96-b706-44ee-b19f-83e7ffdb2933' , 'False' , 'False' , 'False' , 'False' ),
 (  '3d53e548-825c-486c-9d85-e376fbfd7303' , 'OrderNum' , NULL , '0' , '0' , '1' , '8dd11e96-b706-44ee-b19f-83e7ffdb2933' , 'True' , 'False' , 'False' , 'False' ),
 (  '2cffd2d6-a2f3-4316-9708-3ecdf64f2c97' , 'RoleName' , NULL , '0' , '0' , '0' , '8dd11e96-b706-44ee-b19f-83e7ffdb2933' , 'True' , 'False' , 'False' , 'False' ),
 (  'ee5081f6-5324-4084-ad77-a548457d978e' , 'RoleCode' , NULL , '0' , '0' , '0' , '8dd11e96-b706-44ee-b19f-83e7ffdb2933' , 'True' , 'False' , 'False' , 'False' ),
 (  '2074e641-6b25-4cef-b763-0d0a0e48d2c4' , 'Remark' , NULL , '0' , '0' , '0' , '8dd11e96-b706-44ee-b19f-83e7ffdb2933' , 'True' , 'False' , 'False' , 'False' ),
 (  '31093429-d613-4e9f-8e3b-d11262492b38' , 'DataScope' , NULL , '0' , '0' , '0' , '8dd11e96-b706-44ee-b19f-83e7ffdb2933' , 'True' , 'False' , 'False' , 'False' ),
 (  '5564c4f2-7849-4394-aa96-839cb7aea739' , 'State' , NULL , '0' , '0' , '3' , '8dd11e96-b706-44ee-b19f-83e7ffdb2933' , 'True' , 'False' , 'False' , 'False' ),
 (  'ef5c1709-1eb8-491e-a826-6a24c9123006' , 'Menus' , NULL , '0' , '0' , '0' , '8dd11e96-b706-44ee-b19f-83e7ffdb2933' , 'True' , 'False' , 'False' , 'False' ),
 (  'd71d9c49-ad58-428c-84a1-546b8d0107ad' , 'Depts' , NULL , '0' , '0' , '0' , '8dd11e96-b706-44ee-b19f-83e7ffdb2933' , 'True' , 'False' , 'False' , 'False' ),
 (  '0ab100cd-7dc4-4539-9c9d-bc8d71d76519' , 'Id' , NULL , '0' , '0' , '6' , '39c0acb4-fac3-4a4c-aab6-abaf0b430264' , 'True' , 'True' , 'False' , 'False' ),
 (  '1247f69f-a5ea-480c-891a-1a4d34a5f4ea' , 'RoleId' , NULL , '0' , '0' , '6' , '39c0acb4-fac3-4a4c-aab6-abaf0b430264' , 'True' , 'False' , 'False' , 'False' ),
 (  'ee679e44-f38e-4445-a37e-17cd9f193fea' , 'MenuId' , NULL , '0' , '0' , '6' , '39c0acb4-fac3-4a4c-aab6-abaf0b430264' , 'True' , 'False' , 'False' , 'False' ),
 (  'b27953b7-a47a-482e-be67-c4251e979fb3' , 'Id' , NULL , '0' , '0' , '6' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'True' , 'True' , 'False' , 'False' ),
 (  'c166d8b7-c336-4d24-9f28-5824e812b55e' , 'IsDeleted' , NULL , '0' , '0' , '3' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'True' , 'False' , 'False' , 'False' ),
 (  'a8fbbf6e-c2a1-4824-8412-7a77e04bf5a9' , 'Name' , NULL , '0' , '0' , '0' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'True' , 'False' , 'False' , 'False' ),
 (  'dcdb32af-ac9f-417e-b26e-eb591ae0cfdb' , 'Age' , NULL , '0' , '0' , '1' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'False' , 'False' , 'False' , 'False' ),
 (  '57f2fcdc-8665-4e74-beb1-85c1d739d9f8' , 'UserName' , NULL , '0' , '0' , '0' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'True' , 'False' , 'False' , 'False' ),
 (  '7e951625-ac97-429b-b9d7-1aa45193b728' , 'Password' , NULL , '0' , '0' , '0' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'True' , 'False' , 'False' , 'False' ),
 (  'e88d1f26-2134-4704-ad38-43eb038217e7' , 'Salt' , NULL , '0' , '0' , '0' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'True' , 'False' , 'False' , 'False' ),
 (  '86792ebc-c1c0-4b8e-a50e-acc8621f411f' , 'Icon' , NULL , '0' , '0' , '0' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'True' , 'False' , 'False' , 'False' ),
 (  '5255b4dd-189c-4bb4-95e9-ad18532e7aa1' , 'Nick' , NULL , '0' , '0' , '0' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'True' , 'False' , 'False' , 'False' ),
 (  'bd823b74-5393-4c72-98a2-6b3022f377e9' , 'Email' , NULL , '0' , '0' , '0' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'True' , 'False' , 'False' , 'False' ),
 (  '36ed335d-cc30-4715-b661-8f929a6f6642' , 'Ip' , NULL , '0' , '0' , '0' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'True' , 'False' , 'False' , 'False' ),
 (  '3e8538c7-f503-4b28-abfc-362cfd379ccf' , 'Address' , NULL , '0' , '0' , '0' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'True' , 'False' , 'False' , 'False' ),
 (  '909ebaed-e12c-40e7-9fc5-6819dc58372c' , 'Phone' , NULL , '0' , '0' , '2' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'False' , 'False' , 'False' , 'False' ),
 (  'c7e92bb5-55fe-4a51-b160-8195e9bef21a' , 'Introduction' , NULL , '0' , '0' , '0' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'True' , 'False' , 'False' , 'False' ),
 (  '64174485-5d89-472b-ad17-1def73be0137' , 'Remark' , NULL , '0' , '0' , '0' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'True' , 'False' , 'False' , 'False' ),
 (  'b2be1d08-5695-418b-b09d-e5d34918e0a6' , 'Sex' , NULL , '0' , '0' , '0' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'True' , 'False' , 'False' , 'False' ),
 (  '6c128904-ddaf-49a3-aed4-85fbe92204c0' , 'DeptId' , NULL , '0' , '0' , '6' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'False' , 'False' , 'False' , 'False' ),
 (  '50f05c8a-357b-4d6d-8cca-b6a18cde8ae2' , 'CreationTime' , NULL , '0' , '0' , '5' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'True' , 'False' , 'False' , 'False' ),
 (  '85766b2c-0dd5-483c-ae84-8bedfd289b0a' , 'CreatorId' , NULL , '0' , '0' , '6' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'False' , 'False' , 'False' , 'False' ),
 (  '879f54f0-6216-423e-8bc7-de43e0c52a19' , 'LastModifierId' , NULL , '0' , '0' , '6' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'False' , 'False' , 'False' , 'False' ),
 (  'e5e938b6-5090-4ae0-8902-c5af65f76345' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'False' , 'False' , 'False' , 'False' ),
 (  '50df2b2e-84f2-48b3-8a2d-c19c24c250bc' , 'OrderNum' , NULL , '0' , '0' , '1' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'True' , 'False' , 'False' , 'False' ),
 (  '8e721877-8201-4500-92eb-795d976f48f0' , 'State' , NULL , '0' , '0' , '3' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'True' , 'False' , 'False' , 'False' ),
 (  '13680aaf-5e8c-49c8-b1b3-846f6a4780b5' , 'Roles' , NULL , '0' , '0' , '0' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'True' , 'False' , 'False' , 'False' ),
 (  'ebe1e8ca-ff24-4248-a3dd-fe86974d5abb' , 'Posts' , NULL , '0' , '0' , '0' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'True' , 'False' , 'False' , 'False' ),
 (  'be015aea-033d-455c-b39e-72caafb2adbd' , 'Dept' , NULL , '0' , '0' , '0' , '3932df96-3b3b-4224-bd2c-27404dc36458' , 'True' , 'False' , 'False' , 'False' ),
 (  '4c51d7d0-8973-4544-a183-66832a7ecb5f' , 'Id' , NULL , '0' , '0' , '6' , '3153ba4b-0c35-4a76-aae3-83b71837715c' , 'True' , 'True' , 'False' , 'False' ),
 (  '7da6383d-51b4-42e5-b7c1-835b911f2034' , 'UserId' , NULL , '0' , '0' , '6' , '3153ba4b-0c35-4a76-aae3-83b71837715c' , 'True' , 'False' , 'False' , 'False' ),
 (  '748bb58c-5068-4a0a-aca5-0ad8000faa72' , 'PostId' , NULL , '0' , '0' , '6' , '3153ba4b-0c35-4a76-aae3-83b71837715c' , 'True' , 'False' , 'False' , 'False' ),
 (  '9f18b67f-cc73-48b5-abda-7c23aaef3f03' , 'Id' , NULL , '0' , '0' , '6' , 'e055dd29-d51e-4912-ba9a-2e0a4ab28754' , 'True' , 'True' , 'False' , 'False' ),
 (  '3b1db9a1-a020-45f7-a35a-57a68ace6582' , 'RoleId' , NULL , '0' , '0' , '6' , 'e055dd29-d51e-4912-ba9a-2e0a4ab28754' , 'True' , 'False' , 'False' , 'False' ),
 (  '8f18d66a-efec-46e2-bab9-079b2c47d0d6' , 'UserId' , NULL , '0' , '0' , '6' , 'e055dd29-d51e-4912-ba9a-2e0a4ab28754' , 'True' , 'False' , 'False' , 'False' ),
 (  'd2513c71-cac7-41f2-901e-51f1ee6abf55' , 'Id' , NULL , '0' , '0' , '6' , 'e7816f2f-9c63-4dc5-ae42-785ea7d7041c' , 'True' , 'True' , 'False' , 'False' ),
 (  'da0e8934-05aa-43a8-b305-846b20900e8f' , 'UserId' , NULL , '0' , '0' , '6' , 'e7816f2f-9c63-4dc5-ae42-785ea7d7041c' , 'True' , 'False' , 'False' , 'False' ),
 (  '55485965-c57e-4960-ad1b-fe3d26383659' , 'OpenId' , NULL , '0' , '0' , '0' , 'e7816f2f-9c63-4dc5-ae42-785ea7d7041c' , 'True' , 'False' , 'False' , 'False' ),
 (  'd68fc880-9c34-46bf-aff5-1d0b7b6068dd' , 'Name' , NULL , '0' , '0' , '0' , 'e7816f2f-9c63-4dc5-ae42-785ea7d7041c' , 'True' , 'False' , 'False' , 'False' ),
 (  'a6fabb90-226e-43c0-bb4b-45d36b491856' , 'AuthType' , NULL , '0' , '0' , '0' , 'e7816f2f-9c63-4dc5-ae42-785ea7d7041c' , 'True' , 'False' , 'False' , 'False' ),
 (  'e282d6b7-0806-4886-99d4-2180beb59170' , 'IsDeleted' , NULL , '0' , '0' , '3' , 'e7816f2f-9c63-4dc5-ae42-785ea7d7041c' , 'True' , 'False' , 'False' , 'False' ),
 (  'f7f9148f-8631-4f52-bcdd-e35a096e820a' , 'ExtraProperties' , NULL , '0' , '0' , '0' , 'e7816f2f-9c63-4dc5-ae42-785ea7d7041c' , 'True' , 'False' , 'False' , 'False' )
;
INSERT INTO "yifield"  ("id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic") VALUES 
 (  'b77713b7-820b-4d55-be7b-5ea98607bb63' , 'CreationTime' , NULL , '0' , '0' , '5' , 'e7816f2f-9c63-4dc5-ae42-785ea7d7041c' , 'True' , 'False' , 'False' , 'False' ),
 (  'cf639b8f-fd90-4b29-b94a-b370a08cdb6e' , 'ConcurrencyStamp' , NULL , '0' , '0' , '0' , 'e7816f2f-9c63-4dc5-ae42-785ea7d7041c' , 'True' , 'False' , 'False' , 'False' ),
 (  '13d9f2e0-4453-4ec7-99a6-c703b1f738a6' , 'Id' , NULL , '0' , '0' , '6' , 'a72052a9-274e-4f62-a59f-4d7181f9dc19' , 'True' , 'True' , 'False' , 'False' ),
 (  '86566171-849a-41d9-ad1d-16adf26065e4' , 'Number' , NULL , '0' , '0' , '2' , 'a72052a9-274e-4f62-a59f-4d7181f9dc19' , 'True' , 'False' , 'False' , 'False' ),
 (  '6771753f-214a-4772-8243-b86b05f37580' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'a72052a9-274e-4f62-a59f-4d7181f9dc19' , 'False' , 'False' , 'False' , 'False' ),
 (  '1fd04c82-207b-47f0-8469-281a05b37835' , 'CreationTime' , NULL , '0' , '0' , '5' , 'a72052a9-274e-4f62-a59f-4d7181f9dc19' , 'True' , 'False' , 'False' , 'False' ),
 (  '8db251df-1505-493b-92ae-1f9d645cee20' , 'Id' , NULL , '0' , '0' , '6' , '16d294d6-8dea-48f8-bba9-2b40d25170fa' , 'True' , 'True' , 'False' , 'False' ),
 (  '641a9cee-7124-4929-a5ac-2f4457189aec' , 'UserId' , NULL , '0' , '0' , '6' , '16d294d6-8dea-48f8-bba9-2b40d25170fa' , 'True' , 'False' , 'False' , 'False' ),
 (  '2a18d991-9d26-41d4-b397-e7b2d8c62f40' , 'UserLimit' , NULL , '0' , '0' , '0' , '16d294d6-8dea-48f8-bba9-2b40d25170fa' , 'True' , 'False' , 'False' , 'False' ),
 (  'c3fec85a-e6b6-4366-93df-1d6e45cbaefa' , 'Level' , NULL , '0' , '0' , '1' , '16d294d6-8dea-48f8-bba9-2b40d25170fa' , 'True' , 'False' , 'False' , 'False' ),
 (  '28597a21-9c90-4f4c-8b73-470f593728bf' , 'Money' , NULL , '0' , '0' , '4' , '16d294d6-8dea-48f8-bba9-2b40d25170fa' , 'True' , 'False' , 'False' , 'False' ),
 (  '66a83e25-6d5f-4102-b921-90f26da70683' , 'Experience' , NULL , '0' , '0' , '2' , '16d294d6-8dea-48f8-bba9-2b40d25170fa' , 'True' , 'False' , 'False' , 'False' ),
 (  '892e4d13-e6b3-40e4-a36c-c2e5ac941f07' , 'DiscussNumber' , NULL , '0' , '0' , '1' , '16d294d6-8dea-48f8-bba9-2b40d25170fa' , 'True' , 'False' , 'False' , 'False' ),
 (  'c36a5153-9382-478d-8005-e780f037327b' , 'CommentNumber' , NULL , '0' , '0' , '1' , '16d294d6-8dea-48f8-bba9-2b40d25170fa' , 'True' , 'False' , 'False' , 'False' ),
 (  'ab4aa9db-05c8-40d7-818c-37b5ea7dc722' , 'AgreeNumber' , NULL , '0' , '0' , '1' , '16d294d6-8dea-48f8-bba9-2b40d25170fa' , 'True' , 'False' , 'False' , 'False' ),
 (  '167d3c81-68e3-4f81-b17c-322cc09ae80c' , 'Id' , NULL , '0' , '0' , '6' , 'b80e1e4e-65b5-4c84-8e59-d8eaff2149a3' , 'True' , 'True' , 'False' , 'False' ),
 (  'a755e383-0b83-4715-acd6-89f03deb5580' , 'CommentPage' , NULL , '0' , '0' , '1' , 'b80e1e4e-65b5-4c84-8e59-d8eaff2149a3' , 'True' , 'False' , 'False' , 'False' ),
 (  'd6fe054f-2ca4-42ed-9bc6-8408c46f9e4c' , 'DiscussPage' , NULL , '0' , '0' , '1' , 'b80e1e4e-65b5-4c84-8e59-d8eaff2149a3' , 'True' , 'False' , 'False' , 'False' ),
 (  'a422da7c-ead7-4555-815a-4475bf0371cb' , 'CommentExperience' , NULL , '0' , '0' , '1' , 'b80e1e4e-65b5-4c84-8e59-d8eaff2149a3' , 'True' , 'False' , 'False' , 'False' ),
 (  'bb45c163-904e-4028-bbef-4ecd9f8f6856' , 'DiscussExperience' , NULL , '0' , '0' , '1' , 'b80e1e4e-65b5-4c84-8e59-d8eaff2149a3' , 'True' , 'False' , 'False' , 'False' ),
 (  '9180b85b-ed6e-48a2-9165-95f2c9234c83' , 'Title' , NULL , '0' , '0' , '0' , 'b80e1e4e-65b5-4c84-8e59-d8eaff2149a3' , 'True' , 'False' , 'False' , 'False' ),
 (  '0c546df5-f847-4772-871b-3e4506c22ff4' , 'Id' , NULL , '0' , '0' , '6' , 'bc852714-2147-401f-941f-e2ea82ff3c11' , 'True' , 'True' , 'False' , 'False' ),
 (  '7af0cdb1-2f48-432b-aeef-d4024f3602d3' , 'CurrentLevel' , NULL , '0' , '0' , '1' , 'bc852714-2147-401f-941f-e2ea82ff3c11' , 'True' , 'False' , 'False' , 'False' ),
 (  'a6bb10b9-b882-4649-836e-e35274490992' , 'MinExperience' , NULL , '0' , '0' , '4' , 'bc852714-2147-401f-941f-e2ea82ff3c11' , 'True' , 'False' , 'False' , 'False' ),
 (  '2bd06c1f-6465-425a-843e-7c8e1a3040b0' , 'Name' , NULL , '0' , '0' , '0' , 'bc852714-2147-401f-941f-e2ea82ff3c11' , 'True' , 'False' , 'False' , 'False' ),
 (  '0d74496e-a696-4cd3-b5a5-a98533f14edf' , 'Nick' , NULL , '0' , '0' , '0' , 'bc852714-2147-401f-941f-e2ea82ff3c11' , 'True' , 'False' , 'False' , 'False' ),
 (  '51c03650-db8b-4851-a232-5f7238c195ea' , 'Logo' , NULL , '0' , '0' , '0' , 'bc852714-2147-401f-941f-e2ea82ff3c11' , 'True' , 'False' , 'False' , 'False' ),
 (  'a8aeb103-c5d0-4bac-b75f-d9b0ca33518a' , 'Id' , NULL , '0' , '0' , '6' , '6a94204c-b184-4771-87c3-01f7a2e339dc' , 'True' , 'True' , 'False' , 'False' ),
 (  '25a7e463-b1e3-4f99-b2df-fdb7d7f15ad4' , 'CreationTime' , NULL , '0' , '0' , '5' , '6a94204c-b184-4771-87c3-01f7a2e339dc' , 'True' , 'False' , 'False' , 'False' ),
 (  'f4c9c739-b5cc-4bdf-a560-1081f465a933' , 'CreatorId' , NULL , '0' , '0' , '6' , '6a94204c-b184-4771-87c3-01f7a2e339dc' , 'False' , 'False' , 'False' , 'False' ),
 (  'b6de8ee5-e62a-4c3b-b81c-fe30c1a0a524' , 'ContinuousNumber' , NULL , '0' , '0' , '1' , '6a94204c-b184-4771-87c3-01f7a2e339dc' , 'True' , 'False' , 'False' , 'False' ),
 (  '4563ade7-6ec0-42d2-94db-e05bd4fd3a70' , 'Id' , NULL , '0' , '0' , '6' , '7f9524ed-8eb4-4d67-b58b-a5f234d6d36a' , 'True' , 'True' , 'False' , 'False' ),
 (  'c3151bac-ed26-4f1d-b817-b1c5e2dba442' , 'CreationTime' , NULL , '0' , '0' , '5' , '7f9524ed-8eb4-4d67-b58b-a5f234d6d36a' , 'True' , 'False' , 'False' , 'False' ),
 (  '780ac5b1-7d7e-4504-86fd-ff5da60400cc' , 'DiscussId' , NULL , '0' , '0' , '6' , '7f9524ed-8eb4-4d67-b58b-a5f234d6d36a' , 'True' , 'False' , 'False' , 'False' ),
 (  '6bd0ee86-b90e-4dd5-bb94-5d50e4f5bda9' , 'CreatorId' , NULL , '0' , '0' , '6' , '7f9524ed-8eb4-4d67-b58b-a5f234d6d36a' , 'False' , 'False' , 'False' , 'False' ),
 (  'a9a37f67-575d-428f-bea7-829f818b78e4' , 'Id' , NULL , '0' , '0' , '6' , '72a5b72a-7391-44e1-9225-edd5b79c6512' , 'True' , 'True' , 'False' , 'False' ),
 (  '45619ecf-2276-482c-9b0f-ea15e2ba1cf8' , 'IsDeleted' , NULL , '0' , '0' , '3' , '72a5b72a-7391-44e1-9225-edd5b79c6512' , 'True' , 'False' , 'False' , 'False' ),
 (  'c38dde87-8ae4-4702-985e-d124885906c9' , 'Content' , NULL , '0' , '0' , '0' , '72a5b72a-7391-44e1-9225-edd5b79c6512' , 'True' , 'False' , 'False' , 'False' ),
 (  'c4fe8c15-a4c5-4f8b-9beb-73c048ebcc8c' , 'Name' , NULL , '0' , '0' , '0' , '72a5b72a-7391-44e1-9225-edd5b79c6512' , 'True' , 'False' , 'False' , 'False' ),
 (  '0f8ff763-50dc-442a-89ea-d9a3aefc7a8a' , 'DiscussId' , NULL , '0' , '0' , '6' , '72a5b72a-7391-44e1-9225-edd5b79c6512' , 'True' , 'False' , 'False' , 'False' ),
 (  'a63b00e2-8577-4314-9426-54ff2c8a7db5' , 'ParentId' , NULL , '0' , '0' , '6' , '72a5b72a-7391-44e1-9225-edd5b79c6512' , 'True' , 'False' , 'False' , 'False' ),
 (  '31986f61-724b-455d-a74c-e49ac3c1aac2' , 'Children' , NULL , '0' , '0' , '0' , '72a5b72a-7391-44e1-9225-edd5b79c6512' , 'True' , 'False' , 'False' , 'False' ),
 (  'a2554cbe-2b10-4409-93ad-6607f5475c0a' , 'CreationTime' , NULL , '0' , '0' , '5' , '72a5b72a-7391-44e1-9225-edd5b79c6512' , 'True' , 'False' , 'False' , 'False' ),
 (  '9a6e87e2-c9d0-46a8-b517-fd7169df17da' , 'CreatorId' , NULL , '0' , '0' , '6' , '72a5b72a-7391-44e1-9225-edd5b79c6512' , 'False' , 'False' , 'False' , 'False' ),
 (  '1651b526-9b3c-40f0-8bf0-344198da099d' , 'LastModifierId' , NULL , '0' , '0' , '6' , '72a5b72a-7391-44e1-9225-edd5b79c6512' , 'False' , 'False' , 'False' , 'False' ),
 (  'f456912e-d3fa-49b8-a4a6-789935c99f8a' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '72a5b72a-7391-44e1-9225-edd5b79c6512' , 'False' , 'False' , 'False' , 'False' ),
 (  '3063fdd0-a03d-439f-99f3-20e378775f80' , 'OrderNum' , NULL , '0' , '0' , '1' , '72a5b72a-7391-44e1-9225-edd5b79c6512' , 'True' , 'False' , 'False' , 'False' ),
 (  '0a393b69-1590-469c-9d6b-44f5f0904672' , 'Id' , NULL , '0' , '0' , '6' , '15af39da-2ca1-4a09-a5ed-31d16e18ee50' , 'True' , 'True' , 'False' , 'False' ),
 (  '76869b65-940b-4168-b577-b2c802b2e28d' , 'Name' , NULL , '0' , '0' , '0' , '15af39da-2ca1-4a09-a5ed-31d16e18ee50' , 'True' , 'False' , 'False' , 'False' ),
 (  '19538a1e-590c-43eb-8592-0ea275a50125' , 'Logo' , NULL , '0' , '0' , '0' , '15af39da-2ca1-4a09-a5ed-31d16e18ee50' , 'True' , 'False' , 'False' , 'False' ),
 (  '6a4043b8-d14e-4f06-b545-ab02bf8ed5f6' , 'Color' , NULL , '0' , '0' , '0' , '15af39da-2ca1-4a09-a5ed-31d16e18ee50' , 'True' , 'False' , 'False' , 'False' ),
 (  'a15fae90-69f1-4c38-9801-346722e98254' , 'IsDeleted' , NULL , '0' , '0' , '3' , '15af39da-2ca1-4a09-a5ed-31d16e18ee50' , 'True' , 'False' , 'False' , 'False' ),
 (  '4a2a6ac9-3427-4813-a00f-d143a0cfc61e' , 'CreationTime' , NULL , '0' , '0' , '5' , '15af39da-2ca1-4a09-a5ed-31d16e18ee50' , 'True' , 'False' , 'False' , 'False' ),
 (  '41efa147-6320-4433-b5b0-4c8730291e12' , 'CreatorId' , NULL , '0' , '0' , '6' , '15af39da-2ca1-4a09-a5ed-31d16e18ee50' , 'False' , 'False' , 'False' , 'False' ),
 (  '7425b524-675c-44ec-b94d-4dbff27dd417' , 'LastModifierId' , NULL , '0' , '0' , '6' , '15af39da-2ca1-4a09-a5ed-31d16e18ee50' , 'False' , 'False' , 'False' , 'False' ),
 (  '55c35f79-4269-4984-bdab-fc1bff5bcfa8' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '15af39da-2ca1-4a09-a5ed-31d16e18ee50' , 'False' , 'False' , 'False' , 'False' ),
 (  '068f91f0-1f2f-478e-8f66-bcc21e822c97' , 'Id' , NULL , '0' , '0' , '6' , 'a011f600-0a34-4b77-b8cc-f71faac3c7f8' , 'True' , 'True' , 'False' , 'False' ),
 (  '11806f3b-e939-458e-892b-781902f7372c' , 'IsDeleted' , NULL , '0' , '0' , '3' , 'a011f600-0a34-4b77-b8cc-f71faac3c7f8' , 'True' , 'False' , 'False' , 'False' ),
 (  'c5406f12-bcb1-4615-826b-963e0917cf03' , 'Content' , NULL , '0' , '500' , '0' , 'a011f600-0a34-4b77-b8cc-f71faac3c7f8' , 'True' , 'False' , 'False' , 'False' ),
 (  '63b8402c-22e8-4ba8-9799-08a172c6dc0d' , 'DiscussId' , NULL , '0' , '0' , '6' , 'a011f600-0a34-4b77-b8cc-f71faac3c7f8' , 'True' , 'False' , 'False' , 'False' ),
 (  '0efd0eec-c22a-484b-989e-6860d77a6829' , 'ParentId' , NULL , '0' , '0' , '6' , 'a011f600-0a34-4b77-b8cc-f71faac3c7f8' , 'True' , 'False' , 'False' , 'False' ),
 (  'f8c34199-1dbe-42b2-888d-d37cad5440f0' , 'CreationTime' , NULL , '0' , '0' , '5' , 'a011f600-0a34-4b77-b8cc-f71faac3c7f8' , 'True' , 'False' , 'False' , 'False' ),
 (  'e0313d4c-0298-4def-8180-25d99d1d6335' , 'RootId' , NULL , '0' , '0' , '6' , 'a011f600-0a34-4b77-b8cc-f71faac3c7f8' , 'True' , 'False' , 'False' , 'False' ),
 (  'c138cd4d-5a2d-4203-a690-20ac615b99a5' , 'Children' , NULL , '0' , '0' , '0' , 'a011f600-0a34-4b77-b8cc-f71faac3c7f8' , 'True' , 'False' , 'False' , 'False' ),
 (  '7d799455-8974-4feb-9316-abb23576b5f6' , 'CreateUser' , NULL , '0' , '0' , '0' , 'a011f600-0a34-4b77-b8cc-f71faac3c7f8' , 'True' , 'False' , 'False' , 'False' ),
 (  '507ca4e2-7357-4356-9869-098b82cc805a' , 'CommentedUser' , NULL , '0' , '0' , '0' , 'a011f600-0a34-4b77-b8cc-f71faac3c7f8' , 'True' , 'False' , 'False' , 'False' ),
 (  '96860928-f66c-4d63-8d72-e7bda80fb582' , 'CreatorId' , NULL , '0' , '0' , '6' , 'a011f600-0a34-4b77-b8cc-f71faac3c7f8' , 'False' , 'False' , 'False' , 'False' ),
 (  '03ac5a4e-c31b-41e8-bf7c-214c934a4dd7' , 'LastModifierId' , NULL , '0' , '0' , '6' , 'a011f600-0a34-4b77-b8cc-f71faac3c7f8' , 'False' , 'False' , 'False' , 'False' ),
 (  'c1b70bbb-5910-4a8b-ab1c-14a0878f4ad6' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'a011f600-0a34-4b77-b8cc-f71faac3c7f8' , 'False' , 'False' , 'False' , 'False' ),
 (  'e85c5597-0576-4671-803d-a6630a9e1455' , 'Id' , NULL , '0' , '0' , '6' , '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'True' , 'True' , 'False' , 'False' ),
 (  'ffb22fb0-570a-408d-a9d2-a05f2c44a001' , 'Title' , NULL , '0' , '0' , '0' , '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'True' , 'False' , 'False' , 'False' ),
 (  'b877d77a-bb28-4476-b0ec-715fb735c845' , 'Types' , NULL , '0' , '0' , '0' , '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'True' , 'False' , 'False' , 'False' ),
 (  '16976d44-e5db-45d8-bd56-a84c94da4bdd' , 'Introduction' , NULL , '0' , '0' , '0' , '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'True' , 'False' , 'False' , 'False' ),
 (  '45c78023-d296-44e5-83bc-e68d9f9b588e' , 'AgreeNum' , NULL , '0' , '0' , '1' , '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'True' , 'False' , 'False' , 'False' ),
 (  '4f813c48-64b2-46e3-ba63-4bd99d744b2c' , 'SeeNum' , NULL , '0' , '0' , '1' , '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'True' , 'False' , 'False' , 'False' ),
 (  '0765b3a0-0678-46b4-a0e7-abe612c4cdb5' , 'Cover' , NULL , '0' , '0' , '0' , '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'True' , 'False' , 'False' , 'False' ),
 (  '4e1dc32b-f660-41bd-86aa-612d6d7bd2bb' , 'Content' , NULL , '0' , '0' , '0' , '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'True' , 'False' , 'False' , 'False' ),
 (  'c52f3ff5-4d3a-4f22-8226-dacbefdcf556' , 'Color' , NULL , '0' , '0' , '0' , '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'True' , 'False' , 'False' , 'False' ),
 (  '1ec2a802-9e82-4b33-987d-9dd363e457a9' , 'IsDeleted' , NULL , '0' , '0' , '3' , '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'True' , 'False' , 'False' , 'False' ),
 (  '57e68844-e005-4013-bcee-a2e2ca143f12' , 'IsTop' , NULL , '0' , '0' , '3' , '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'True' , 'False' , 'False' , 'False' ),
 (  'c2b3154e-20e2-445d-a6a0-3dc986892483' , 'OrderNum' , NULL , '0' , '0' , '1' , '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'True' , 'False' , 'False' , 'False' ),
 (  '836f6d75-b811-4547-a96c-0882431dbf1c' , 'PermissionType' , NULL , '0' , '0' , '0' , '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'True' , 'False' , 'False' , 'False' ),
 (  '7ecf5c74-fb7c-40d0-b4c5-f8c7d806bff5' , 'PlateId' , NULL , '0' , '0' , '6' , '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'True' , 'False' , 'False' , 'False' ),
 (  '8f6bf164-f641-4c8f-a09a-011fcebc0f61' , 'CreationTime' , NULL , '0' , '0' , '5' , '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'True' , 'False' , 'False' , 'False' ),
 (  'a8a6bee4-13bd-4693-b1b0-7dab19d74a4d' , 'CreatorId' , NULL , '0' , '0' , '6' , '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'False' , 'False' , 'False' , 'False' ),
 (  '5c846ee6-390d-47c1-a145-1389ad6330c8' , 'LastModifierId' , NULL , '0' , '0' , '6' , '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'False' , 'False' , 'False' , 'False' ),
 (  '0ed2f77a-82ff-4efa-aeb0-38bec9dd1a6d' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'False' , 'False' , 'False' , 'False' ),
 (  '4a4bf247-6748-48c5-8f86-79e7d1c3fcb6' , 'PermissionUserIds' , NULL , '0' , '0' , '0' , '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'True' , 'False' , 'False' , 'False' ),
 (  'd8a38697-26b2-424c-9fb8-eb1edd852147' , 'IsDisableCreateComment' , NULL , '0' , '0' , '3' , '71ed12f0-12a7-41e6-ae5d-1dff01a86f1b' , 'True' , 'False' , 'False' , 'False' ),
 (  'b01a2007-4ceb-48cd-a3ab-4b9ede5d6e93' , 'Id' , NULL , '0' , '0' , '6' , '74f94a32-ed10-4915-aeee-1a277b7a81d8' , 'True' , 'True' , 'False' , 'False' ),
 (  '7c2484d5-00dd-40bd-adb5-a0383234b209' , 'DiscussId' , NULL , '0' , '0' , '6' , '74f94a32-ed10-4915-aeee-1a277b7a81d8' , 'True' , 'False' , 'False' , 'False' ),
 (  '8d89029e-ab2c-430f-8b1d-0764d5911f47' , 'MyTypeId' , NULL , '0' , '0' , '6' , '74f94a32-ed10-4915-aeee-1a277b7a81d8' , 'True' , 'False' , 'False' , 'False' ),
 (  'f442c42e-5869-450f-942f-b24b194fefbe' , 'Id' , NULL , '0' , '0' , '6' , 'c589a5ef-b24e-4230-8f8f-026be10bdedf' , 'True' , 'True' , 'False' , 'False' ),
 (  'b7ef18dc-4bc0-4096-9d2d-43d8c7dc3cee' , 'OrderNum' , NULL , '0' , '0' , '1' , 'c589a5ef-b24e-4230-8f8f-026be10bdedf' , 'True' , 'False' , 'False' , 'False' ),
 (  '0fd72731-d111-4e13-b5a2-bd0df30d2f5b' , 'DiscussId' , NULL , '0' , '0' , '6' , 'c589a5ef-b24e-4230-8f8f-026be10bdedf' , 'True' , 'False' , 'False' , 'False' ),
 (  '2bf5bd79-5582-437e-8f9e-f03104285deb' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'c589a5ef-b24e-4230-8f8f-026be10bdedf' , 'False' , 'False' , 'False' , 'False' ),
 (  '2853a9b0-ff7b-4ce2-ba76-3fd898eb7209' , 'Id' , NULL , '0' , '0' , '6' , '9b398187-2232-462f-8b44-0eceb17c3053' , 'True' , 'True' , 'False' , 'False' ),
 (  '45b1a467-a0f0-4bdd-8a11-c72adfccdd92' , 'IsDeleted' , NULL , '0' , '0' , '3' , '9b398187-2232-462f-8b44-0eceb17c3053' , 'True' , 'False' , 'False' , 'False' ),
 (  '63ee7907-b9ee-42ce-8c7f-0cd0a4e3f4a6' , 'Name' , NULL , '0' , '0' , '0' , '9b398187-2232-462f-8b44-0eceb17c3053' , 'True' , 'False' , 'False' , 'False' ),
 (  '50d6aaa4-0728-49a1-bbb2-c77ea5acdc59' , 'Color' , NULL , '0' , '0' , '0' , '9b398187-2232-462f-8b44-0eceb17c3053' , 'True' , 'False' , 'False' , 'False' ),
 (  '62f9ae87-1265-43c4-aa33-739caf36ba5b' , 'BackgroundColor' , NULL , '0' , '0' , '0' , '9b398187-2232-462f-8b44-0eceb17c3053' , 'True' , 'False' , 'False' , 'False' ),
 (  '87e696a0-ea4f-4009-91a9-39be33fcbfb9' , 'UserId' , NULL , '0' , '0' , '6' , '9b398187-2232-462f-8b44-0eceb17c3053' , 'True' , 'False' , 'False' , 'False' ),
 (  '09cecdb4-6664-409b-8e41-d4e61ebd50d2' , 'Id' , NULL , '0' , '0' , '6' , 'ae3715a2-8c60-49fb-896e-2d3aaf82562b' , 'True' , 'True' , 'False' , 'False' ),
 (  '538126b4-1d50-4fdb-9e5d-c348c6675f98' , 'Code' , NULL , '0' , '0' , '0' , 'ae3715a2-8c60-49fb-896e-2d3aaf82562b' , 'True' , 'False' , 'False' , 'False' ),
 (  '5ff22e83-0b2e-4245-a052-b62ac03f563f' , 'Name' , NULL , '0' , '0' , '0' , 'ae3715a2-8c60-49fb-896e-2d3aaf82562b' , 'True' , 'False' , 'False' , 'False' ),
 (  '3a732136-56a2-45bf-a46f-a84abd1ad174' , 'Logo' , NULL , '0' , '0' , '0' , 'ae3715a2-8c60-49fb-896e-2d3aaf82562b' , 'True' , 'False' , 'False' , 'False' ),
 (  '7a7a951f-881c-4bfc-b38d-308530aef64f' , 'Introduction' , NULL , '0' , '0' , '0' , 'ae3715a2-8c60-49fb-896e-2d3aaf82562b' , 'True' , 'False' , 'False' , 'False' ),
 (  '40074ef3-55f9-4769-a2b3-b295dc5c8f37' , 'IsDeleted' , NULL , '0' , '0' , '3' , 'ae3715a2-8c60-49fb-896e-2d3aaf82562b' , 'True' , 'False' , 'False' , 'False' ),
 (  '6eac048a-21cf-424f-930c-a984f0b34ea1' , 'CreationTime' , NULL , '0' , '0' , '5' , 'ae3715a2-8c60-49fb-896e-2d3aaf82562b' , 'True' , 'False' , 'False' , 'False' ),
 (  'd363a88d-8014-42f1-993a-f06b10f3ed06' , 'CreatorId' , NULL , '0' , '0' , '6' , 'ae3715a2-8c60-49fb-896e-2d3aaf82562b' , 'False' , 'False' , 'False' , 'False' ),
 (  '6b5ec427-0f1f-46ee-aecd-d7ec6ef99fb7' , 'LastModifierId' , NULL , '0' , '0' , '6' , 'ae3715a2-8c60-49fb-896e-2d3aaf82562b' , 'False' , 'False' , 'False' , 'False' ),
 (  '338b153b-0443-4c23-a7d9-cb169b907fcb' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'ae3715a2-8c60-49fb-896e-2d3aaf82562b' , 'False' , 'False' , 'False' , 'False' ),
 (  '55652124-ec6d-4475-87dc-62428dfb7127' , 'OrderNum' , NULL , '0' , '0' , '1' , 'ae3715a2-8c60-49fb-896e-2d3aaf82562b' , 'True' , 'False' , 'False' , 'False' ),
 (  'c9ba9db6-5b17-458c-b8df-0a0e62b56a52' , 'IsDisableCreateDiscuss' , NULL , '0' , '0' , '3' , 'ae3715a2-8c60-49fb-896e-2d3aaf82562b' , 'True' , 'False' , 'False' , 'False' ),
 (  'd5430518-d32c-4287-a4db-9327f774a93a' , 'Id' , NULL , '0' , '0' , '6' , '39d5fe35-f817-44b6-9ef1-e780a50b4c9e' , 'True' , 'True' , 'False' , 'False' ),
 (  '78f1ec34-c219-445b-b013-564f489d452c' , 'CreationTime' , NULL , '0' , '0' , '5' , '39d5fe35-f817-44b6-9ef1-e780a50b4c9e' , 'True' , 'False' , 'False' , 'False' ),
 (  '509138f3-5c1a-4dce-873b-d4784134adc6' , 'LastDepositTime' , NULL , '0' , '0' , '5' , '39d5fe35-f817-44b6-9ef1-e780a50b4c9e' , 'False' , 'False' , 'False' , 'False' ),
 (  '72cf6a2b-f12f-4bc3-b6bc-d56763063f3a' , 'LastDrawTime' , NULL , '0' , '0' , '5' , '39d5fe35-f817-44b6-9ef1-e780a50b4c9e' , 'False' , 'False' , 'False' , 'False' ),
 (  '567d1fdf-0466-4496-aefe-1c0b8d746ea0' , 'UserId' , NULL , '0' , '0' , '6' , '39d5fe35-f817-44b6-9ef1-e780a50b4c9e' , 'True' , 'False' , 'False' , 'False' ),
 (  'e5e524e4-6249-4c02-84f9-0809e4a83a29' , 'StorageMoney' , NULL , '0' , '0' , '4' , '39d5fe35-f817-44b6-9ef1-e780a50b4c9e' , 'True' , 'False' , 'False' , 'False' ),
 (  'b71c1de9-5d11-47d7-a1ed-bd9e06f9f560' , 'MaxStorageMoney' , NULL , '0' , '0' , '4' , '39d5fe35-f817-44b6-9ef1-e780a50b4c9e' , 'True' , 'False' , 'False' , 'False' ),
 (  '59ae8881-b660-4792-bec1-d7d8e499f9e3' , 'FulltermTime' , NULL , '0' , '0' , '5' , '39d5fe35-f817-44b6-9ef1-e780a50b4c9e' , 'False' , 'False' , 'False' , 'False' ),
 (  '9dd0ddcb-8cfc-423d-a594-5091f4fcf1cf' , 'BankCardState' , NULL , '0' , '0' , '0' , '39d5fe35-f817-44b6-9ef1-e780a50b4c9e' , 'True' , 'False' , 'False' , 'False' ),
 (  'f6fe3cb6-d9e0-436d-af32-272e3412839d' , 'Id' , NULL , '0' , '0' , '6' , 'e43de526-3d18-4e9d-8783-a75e066cae44' , 'True' , 'True' , 'False' , 'False' ),
 (  'd8e3fcf3-f1a3-4bd9-9634-eb4748920233' , 'CreationTime' , NULL , '0' , '0' , '5' , 'e43de526-3d18-4e9d-8783-a75e066cae44' , 'True' , 'False' , 'False' , 'False' ),
 (  '00740586-d89e-47e8-bcac-d741aa9d53dc' , 'ComparisonValue' , NULL , '0' , '0' , '4' , 'e43de526-3d18-4e9d-8783-a75e066cae44' , 'True' , 'False' , 'False' , 'False' ),
 (  '6ff479b3-fd84-41da-a0e1-fbdee9c20b0d' , 'Value' , NULL , '0' , '0' , '4' , 'e43de526-3d18-4e9d-8783-a75e066cae44' , 'True' , 'False' , 'False' , 'False' ),
 (  'ddcbfec5-a0ff-4f2b-81e7-2656ae53ecec' , 'IsFluctuate' , NULL , '0' , '0' , '3' , 'e43de526-3d18-4e9d-8783-a75e066cae44' , 'True' , 'False' , 'False' , 'False' ),
 (  '1b285424-e8a4-4f73-9ce7-9258c00617c0' , 'TenantId' , NULL , '0' , '0' , '6' , '59452e04-971a-4024-9bdf-e9e92be7938e' , 'False' , 'False' , 'False' , 'False' ),
 (  'e6e92da9-2dde-4b7f-a674-15d9e7907e77' , 'AuditLogId' , NULL , '0' , '0' , '6' , '59452e04-971a-4024-9bdf-e9e92be7938e' , 'True' , 'False' , 'False' , 'False' ),
 (  '5b243686-0104-4065-9a01-c17f3555cb56' , 'ServiceName' , NULL , '0' , '0' , '0' , '59452e04-971a-4024-9bdf-e9e92be7938e' , 'True' , 'False' , 'False' , 'False' ),
 (  '4e193f85-5b76-40bb-a33b-c1b99bdc5b2b' , 'MethodName' , NULL , '0' , '0' , '0' , '59452e04-971a-4024-9bdf-e9e92be7938e' , 'True' , 'False' , 'False' , 'False' ),
 (  'a74f6b8a-3247-42bd-a4e9-775803c3fc7d' , 'Parameters' , NULL , '0' , '0' , '0' , '59452e04-971a-4024-9bdf-e9e92be7938e' , 'True' , 'False' , 'False' , 'False' ),
 (  'b95b4b38-ff10-4dea-8587-20e77e4f27fc' , 'ExecutionTime' , NULL , '0' , '0' , '5' , '59452e04-971a-4024-9bdf-e9e92be7938e' , 'False' , 'False' , 'False' , 'False' ),
 (  'e68631f5-449c-4b0c-980f-91e3a9287ad0' , 'ExecutionDuration' , NULL , '0' , '0' , '1' , '59452e04-971a-4024-9bdf-e9e92be7938e' , 'False' , 'False' , 'False' , 'False' ),
 (  '8a53baca-6bf0-4f75-8242-3128a544010d' , 'Id' , NULL , '0' , '0' , '6' , '59452e04-971a-4024-9bdf-e9e92be7938e' , 'True' , 'True' , 'False' , 'False' ),
 (  '5f93c69b-046f-4f5d-9933-1596bc9ca17f' , 'Id' , NULL , '0' , '0' , '6' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'True' , 'True' , 'False' , 'False' ),
 (  'bcfc3835-9014-47d2-85a8-518f121eab6d' , 'ApplicationName' , NULL , '0' , '0' , '0' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'True' , 'False' , 'False' , 'False' ),
 (  'c8c582a5-7eee-4297-b0fc-2d6b21f160dc' , 'UserId' , NULL , '0' , '0' , '6' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'False' , 'False' , 'False' , 'False' ),
 (  'f442a6e6-de0c-4e61-92c9-90d365137718' , 'UserName' , NULL , '0' , '0' , '0' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'True' , 'False' , 'False' , 'False' ),
 (  '5b7cd168-9d10-46d0-83b7-f442454a16b3' , 'TenantName' , NULL , '0' , '0' , '0' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'True' , 'False' , 'False' , 'False' ),
 (  '1d37354f-0242-4d96-8139-380dc5a40654' , 'ImpersonatorUserId' , NULL , '0' , '0' , '6' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'False' , 'False' , 'False' , 'False' ),
 (  '9b27bcf0-5ea8-433e-bbb3-c8b93831a4ee' , 'ImpersonatorUserName' , NULL , '0' , '0' , '0' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'True' , 'False' , 'False' , 'False' ),
 (  '90d2e211-5f8a-4fbe-853b-50c7cb03c7aa' , 'ImpersonatorTenantId' , NULL , '0' , '0' , '6' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'False' , 'False' , 'False' , 'False' ),
 (  'cd8d9b41-4891-48e7-b14b-ab572b0ddb22' , 'ImpersonatorTenantName' , NULL , '0' , '0' , '0' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'True' , 'False' , 'False' , 'False' ),
 (  'bab7cc5c-e92d-43ff-af08-1b984fde6936' , 'ExecutionTime' , NULL , '0' , '0' , '5' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'False' , 'False' , 'False' , 'False' ),
 (  '940e8205-9cdd-44b4-906b-7022e01de404' , 'ExecutionDuration' , NULL , '0' , '0' , '1' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'False' , 'False' , 'False' , 'False' ),
 (  '857af2ed-3a19-4cc7-b15c-13688f039151' , 'ClientIpAddress' , NULL , '0' , '0' , '0' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'True' , 'False' , 'False' , 'False' ),
 (  '51c0b74b-6ec3-41d8-a084-71d399778628' , 'ClientName' , NULL , '0' , '0' , '0' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'True' , 'False' , 'False' , 'False' ),
 (  '3c834d7a-279d-4121-8834-09c05abfeaa3' , 'ClientId' , NULL , '0' , '0' , '0' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'True' , 'False' , 'False' , 'False' ),
 (  '8f0d390d-a23e-4b60-bfa6-93f306ad7be4' , 'CorrelationId' , NULL , '0' , '0' , '0' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'True' , 'False' , 'False' , 'False' ),
 (  'd4862ce1-d426-483a-8339-a8f616f1927b' , 'BrowserInfo' , NULL , '0' , '0' , '0' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'True' , 'False' , 'False' , 'False' ),
 (  'f01c3297-0a9c-4a52-9c29-e19051f95f80' , 'HttpMethod' , NULL , '0' , '0' , '0' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'True' , 'False' , 'False' , 'False' ),
 (  'c2575e4d-b3b4-4c7f-9ca9-33978e7b7281' , 'Url' , NULL , '0' , '0' , '0' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'True' , 'False' , 'False' , 'False' ),
 (  '84fd6ec1-a482-4f78-b2cb-5f2b0bf12d97' , 'Exceptions' , NULL , '0' , '0' , '0' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'True' , 'False' , 'False' , 'False' ),
 (  'ab78f257-80c4-46c0-a59c-1aff2e54370b' , 'Comments' , NULL , '0' , '0' , '0' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'True' , 'False' , 'False' , 'False' ),
 (  '2878257e-ac2f-416a-9962-028c558c0f00' , 'HttpStatusCode' , NULL , '0' , '0' , '1' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'False' , 'False' , 'False' , 'False' ),
 (  '846783bd-a76d-4331-8c0c-3441c1fa76f9' , 'TenantId' , NULL , '0' , '0' , '6' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'False' , 'False' , 'False' , 'False' ),
 (  '4e79b164-c03b-47e4-873d-352c6cc6c61b' , 'EntityChanges' , NULL , '0' , '0' , '0' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'True' , 'False' , 'False' , 'False' ),
 (  'ac56a0bd-e817-4454-aabc-00307365d6f9' , 'Actions' , NULL , '0' , '0' , '0' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'True' , 'False' , 'False' , 'False' ),
 (  '58cf9c29-ada0-4ec7-8e22-25a1ba8cc6ba' , 'ExtraProperties' , NULL , '0' , '0' , '0' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'True' , 'False' , 'False' , 'False' ),
 (  '7812af22-5b4f-4992-b1f3-f9eeb81a33c1' , 'ConcurrencyStamp' , NULL , '0' , '0' , '0' , 'a6fb09c2-ce90-4dcd-8dff-7a48f8026237' , 'True' , 'False' , 'False' , 'False' ),
 (  'ce94b2fe-81e4-4daf-b1d4-e6451c6ae1c5' , 'Id' , NULL , '0' , '0' , '6' , '2e6f5d1d-98e8-468d-8608-b0ceb03d39dd' , 'True' , 'True' , 'False' , 'False' ),
 (  'cc3b9769-8e44-444b-9353-c06ee471cc06' , 'AuditLogId' , NULL , '0' , '0' , '6' , '2e6f5d1d-98e8-468d-8608-b0ceb03d39dd' , 'True' , 'False' , 'False' , 'False' ),
 (  '1c7fb252-6d2a-4be3-bb8b-b47edace755d' , 'TenantId' , NULL , '0' , '0' , '6' , '2e6f5d1d-98e8-468d-8608-b0ceb03d39dd' , 'False' , 'False' , 'False' , 'False' ),
 (  'ca965976-dfe1-47c1-89cc-7145d0d6c100' , 'ChangeTime' , NULL , '0' , '0' , '5' , '2e6f5d1d-98e8-468d-8608-b0ceb03d39dd' , 'False' , 'False' , 'False' , 'False' ),
 (  '524a6131-994a-40f7-b629-ed036298835e' , 'ChangeType' , NULL , '0' , '0' , '0' , '2e6f5d1d-98e8-468d-8608-b0ceb03d39dd' , 'False' , 'False' , 'False' , 'False' ),
 (  '09e26646-967b-4404-a14e-19e8a0c1ab55' , 'EntityTenantId' , NULL , '0' , '0' , '6' , '2e6f5d1d-98e8-468d-8608-b0ceb03d39dd' , 'False' , 'False' , 'False' , 'False' ),
 (  '5d88b903-0c69-490d-a83a-b23c7a965b2a' , 'EntityId' , NULL , '0' , '0' , '0' , '2e6f5d1d-98e8-468d-8608-b0ceb03d39dd' , 'True' , 'False' , 'False' , 'False' ),
 (  '2c531d25-8db2-430b-a3b5-abbecc9a8b44' , 'EntityTypeFullName' , NULL , '0' , '0' , '0' , '2e6f5d1d-98e8-468d-8608-b0ceb03d39dd' , 'True' , 'False' , 'False' , 'False' ),
 (  '9fa69e5f-88fa-46e7-a0af-56b5e0c2b0df' , 'PropertyChanges' , NULL , '0' , '0' , '0' , '2e6f5d1d-98e8-468d-8608-b0ceb03d39dd' , 'True' , 'False' , 'False' , 'False' ),
 (  'b35b3085-bf79-43f7-8132-8853fd57233d' , 'Id' , NULL , '0' , '0' , '6' , 'd1dac163-cd2a-42ad-b5b7-48de07dca06b' , 'True' , 'True' , 'False' , 'False' ),
 (  'fc7ff618-5a07-44aa-8e3a-bf654a0c5d93' , 'TenantId' , NULL , '0' , '0' , '6' , 'd1dac163-cd2a-42ad-b5b7-48de07dca06b' , 'False' , 'False' , 'False' , 'False' ),
 (  '7b0c47f1-9c5b-45a4-ae5e-6e675d8d676c' , 'EntityChangeId' , NULL , '0' , '0' , '6' , 'd1dac163-cd2a-42ad-b5b7-48de07dca06b' , 'False' , 'False' , 'False' , 'False' ),
 (  '330380c7-4a1e-4ff7-848c-099c75d91fe3' , 'NewValue' , NULL , '0' , '0' , '0' , 'd1dac163-cd2a-42ad-b5b7-48de07dca06b' , 'True' , 'False' , 'False' , 'False' ),
 (  'adc68efb-8140-4360-a870-d278962661d3' , 'OriginalValue' , NULL , '0' , '0' , '0' , 'd1dac163-cd2a-42ad-b5b7-48de07dca06b' , 'True' , 'False' , 'False' , 'False' ),
 (  'cbb400ac-e60b-4637-b5dc-b57271699093' , 'PropertyName' , NULL , '0' , '0' , '0' , 'd1dac163-cd2a-42ad-b5b7-48de07dca06b' , 'True' , 'False' , 'False' , 'False' ),
 (  '9f5e05c0-2989-4944-93db-ff94143521ca' , 'PropertyTypeFullName' , NULL , '0' , '0' , '0' , 'd1dac163-cd2a-42ad-b5b7-48de07dca06b' , 'True' , 'False' , 'False' , 'False' ),
 (  '48f9d27c-b210-4946-9a59-d9af67d6b61c' , 'Id' , NULL , '0' , '0' , '6' , 'ec2ff903-6477-4487-a20a-a9c62e9ff777' , 'True' , 'True' , 'False' , 'False' ),
 (  'f3797eda-d1c7-40dc-877b-e35a5eef108b' , 'Name' , NULL , '0' , '0' , '0' , 'ec2ff903-6477-4487-a20a-a9c62e9ff777' , 'True' , 'False' , 'False' , 'False' ),
 (  'd380b1aa-1be2-4aed-91d8-6834abc2ffc9' , 'Description' , NULL , '0' , '0' , '0' , 'ec2ff903-6477-4487-a20a-a9c62e9ff777' , 'True' , 'False' , 'False' , 'False' ),
 (  'd82ba8ec-b19c-491f-9c91-029ff72358c6' , 'OrderNum' , NULL , '0' , '0' , '1' , 'ec2ff903-6477-4487-a20a-a9c62e9ff777' , 'True' , 'False' , 'False' , 'False' ),
 (  '15841fc3-e63b-4ba2-b09f-bc4204724123' , 'Length' , NULL , '0' , '0' , '1' , 'ec2ff903-6477-4487-a20a-a9c62e9ff777' , 'True' , 'False' , 'False' , 'False' ),
 (  'dbff4ef6-aea8-4d69-8b91-282b0fd56027' , 'FieldType' , NULL , '0' , '0' , '0' , 'ec2ff903-6477-4487-a20a-a9c62e9ff777' , 'True' , 'False' , 'False' , 'False' ),
 (  '2fb070f2-f9e6-463a-9de4-cb15ba56d49e' , 'TableId' , NULL , '0' , '0' , '6' , 'ec2ff903-6477-4487-a20a-a9c62e9ff777' , 'True' , 'False' , 'False' , 'False' ),
 (  '2ab9878e-157c-4011-bc44-1a9ef1e245f2' , 'IsRequired' , NULL , '0' , '0' , '3' , 'ec2ff903-6477-4487-a20a-a9c62e9ff777' , 'True' , 'False' , 'False' , 'False' ),
 (  '4baf0650-040e-4c6f-844b-0de55f8a8a0e' , 'IsKey' , NULL , '0' , '0' , '3' , 'ec2ff903-6477-4487-a20a-a9c62e9ff777' , 'True' , 'False' , 'False' , 'False' ),
 (  '7d96324d-4696-4ddd-85a7-b2882564802b' , 'IsAutoAdd' , NULL , '0' , '0' , '3' , 'ec2ff903-6477-4487-a20a-a9c62e9ff777' , 'True' , 'False' , 'False' , 'False' ),
 (  'd05dab2d-6e0c-4a50-8981-8657b3cc16c6' , 'IsPublic' , NULL , '0' , '0' , '3' , 'ec2ff903-6477-4487-a20a-a9c62e9ff777' , 'True' , 'False' , 'False' , 'False' ),
 (  'a57e0434-d27d-4b69-b509-b206132fab56' , 'Id' , NULL , '0' , '0' , '6' , 'df39c26f-162f-42d7-8d6d-d02ecd1d0436' , 'True' , 'True' , 'False' , 'False' ),
 (  '0ec04b15-c596-4def-80c9-2a3a33389479' , 'Name' , NULL , '0' , '0' , '0' , 'df39c26f-162f-42d7-8d6d-d02ecd1d0436' , 'True' , 'False' , 'False' , 'False' ),
 (  'f960878a-bd4a-447e-ba17-2c6f00974ce0' , 'Description' , NULL , '0' , '0' , '0' , 'df39c26f-162f-42d7-8d6d-d02ecd1d0436' , 'True' , 'False' , 'False' , 'False' ),
 (  'cb1af300-9c6f-484c-aa19-a1a446a31bb5' , 'Fields' , NULL , '0' , '0' , '0' , 'df39c26f-162f-42d7-8d6d-d02ecd1d0436' , 'True' , 'False' , 'False' , 'False' ),
 (  'ed1a4052-2c89-45fb-8ff5-0085c4e3b244' , 'ExtraProperties' , NULL , '0' , '0' , '0' , 'df39c26f-162f-42d7-8d6d-d02ecd1d0436' , 'True' , 'False' , 'False' , 'False' ),
 (  '0d973611-5f96-42ee-ab2c-d5c4762dc80f' , 'ConcurrencyStamp' , NULL , '0' , '0' , '0' , 'df39c26f-162f-42d7-8d6d-d02ecd1d0436' , 'True' , 'False' , 'False' , 'False' ),
 (  'ff6f4b1a-c537-4693-9c30-d7665917c9ef' , 'Id' , NULL , '0' , '0' , '6' , 'bad32a49-67a2-4ccd-bbc9-7b3c23d64965' , 'True' , 'True' , 'False' , 'False' ),
 (  '4b4af40a-1906-442f-ac24-c588f69ed2bf' , 'TemplateStr' , NULL , '0' , '0' , '0' , 'bad32a49-67a2-4ccd-bbc9-7b3c23d64965' , 'True' , 'False' , 'False' , 'False' ),
 (  '1307e8fa-712d-4d1d-acbd-735cd96c0938' , 'BuildPath' , NULL , '0' , '0' , '0' , 'bad32a49-67a2-4ccd-bbc9-7b3c23d64965' , 'True' , 'False' , 'False' , 'False' ),
 (  'df9ed349-1f79-4975-83f1-d509cd640500' , 'Name' , NULL , '0' , '0' , '0' , 'bad32a49-67a2-4ccd-bbc9-7b3c23d64965' , 'True' , 'False' , 'False' , 'False' ),
 (  'c784664e-2c01-439f-a7cc-2c6add441c5b' , 'Remarks' , NULL , '0' , '0' , '0' , 'bad32a49-67a2-4ccd-bbc9-7b3c23d64965' , 'True' , 'False' , 'False' , 'False' )
;

===============================

2024-04-08 12:25:07.200 +08:00 [DBG] =========Yi-SQL耗时10.0818毫秒=====
2024-04-08 12:25:07.202 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.CodeGenService.PostCodeBuildWebAsync (Yi.Framework.CodeGen.Application) in 178.1852ms
2024-04-08 12:25:07.202 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.CodeGenService.PostCodeBuildWebAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:07.222 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:07.222 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-08 12:25:07.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-08 12:25:07.225 +08:00 [DBG] =========Yi-SQL耗时1.2495毫秒=====
2024-04-08 12:25:07.226 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-08 12:25:07.232 +08:00 [DBG] =========Yi-SQL耗时5.5942毫秒=====
2024-04-08 12:25:07.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-08 12:25:07.232 +08:00 [DBG] =========Yi-SQL耗时0.3742毫秒=====
2024-04-08 12:25:07.234 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:25:07.234 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 11.666ms
2024-04-08 12:25:07.234 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:16.537 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:16.537 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-08 12:25:16.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-08 12:25:16.540 +08:00 [DBG] =========Yi-SQL耗时0.7269毫秒=====
2024-04-08 12:25:16.542 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 40
===============================

2024-04-08 12:25:16.543 +08:00 [DBG] =========Yi-SQL耗时1.0362毫秒=====
2024-04-08 12:25:16.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-08 12:25:16.545 +08:00 [DBG] =========Yi-SQL耗时0.5078毫秒=====
2024-04-08 12:25:16.545 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:25:16.545 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 7.9806ms
2024-04-08 12:25:16.545 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:23.372 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:23.372 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:23.372 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:23.402 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-08 12:25:23.403 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-08 12:25:23.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-08 12:25:23.406 +08:00 [DBG] =========Yi-SQL耗时1.3062毫秒=====
2024-04-08 12:25:23.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-08 12:25:23.411 +08:00 [DBG] =========Yi-SQL耗时1.5367毫秒=====
2024-04-08 12:25:23.411 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-08 12:25:23.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-08 12:25:23.412 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:25:23.412 +08:00 [DBG] =========Yi-SQL耗时0.6526毫秒=====
2024-04-08 12:25:23.414 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 11.3547ms
2024-04-08 12:25:23.414 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:23.416 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:25:23.416 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 13.6383ms
2024-04-08 12:25:23.416 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:23.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-08 12:25:23.426 +08:00 [DBG] =========Yi-SQL耗时4.5223毫秒=====
2024-04-08 12:25:23.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-08 12:25:23.444 +08:00 [DBG] =========Yi-SQL耗时17.6538毫秒=====
2024-04-08 12:25:23.457 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:25:23.472 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 60.8575ms
2024-04-08 12:25:23.472 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:24.018 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TemplateService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:24.027 +08:00 [INF] Route matched with {action = "GetList", controller = "Template", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TemplateService (Yi.Framework.CodeGen.Application).
2024-04-08 12:25:24.068 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitemplate"  
===============================

2024-04-08 12:25:24.072 +08:00 [DBG] =========Yi-SQL耗时3.8571毫秒=====
2024-04-08 12:25:24.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","templatestr","buildpath","name","remarks" FROM "yitemplate"     LIMIT 10 offset 0
===============================

2024-04-08 12:25:24.075 +08:00 [DBG] =========Yi-SQL耗时2.1345毫秒=====
2024-04-08 12:25:24.082 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:25:24.084 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TemplateService.GetListAsync (Yi.Framework.CodeGen.Application) in 56.6962ms
2024-04-08 12:25:24.084 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TemplateService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:38.142 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TemplateService.GetAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:38.144 +08:00 [INF] Route matched with {action = "Get", controller = "Template", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateDto] GetAsync(System.Guid) on controller Yi.Framework.CodeGen.Application.Services.TemplateService (Yi.Framework.CodeGen.Application).
2024-04-08 12:25:38.154 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","templatestr","buildpath","name","remarks" FROM "yitemplate"  WHERE "id" = N'7c83e923-9346-88bf-1f8c-3a11a050aef7'   
===============================

2024-04-08 12:25:38.154 +08:00 [DBG] =========Yi-SQL耗时0.7579毫秒=====
2024-04-08 12:25:38.159 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateDto'.
2024-04-08 12:25:38.159 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TemplateService.GetAsync (Yi.Framework.CodeGen.Application) in 15.3926ms
2024-04-08 12:25:38.159 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TemplateService.GetAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:45.779 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:45.779 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:45.779 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:45.779 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-08 12:25:45.779 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-08 12:25:45.779 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-08 12:25:45.780 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:25:45.780 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 0.6627ms
2024-04-08 12:25:45.780 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:45.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-08 12:25:45.782 +08:00 [DBG] =========Yi-SQL耗时0.9077毫秒=====
2024-04-08 12:25:45.783 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-08 12:25:45.783 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-08 12:25:45.784 +08:00 [DBG] =========Yi-SQL耗时1.0685毫秒=====
2024-04-08 12:25:45.784 +08:00 [DBG] =========Yi-SQL耗时1.1746毫秒=====
2024-04-08 12:25:45.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-08 12:25:45.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-08 12:25:45.788 +08:00 [DBG] =========Yi-SQL耗时0.9747毫秒=====
2024-04-08 12:25:45.789 +08:00 [DBG] =========Yi-SQL耗时2.1223毫秒=====
2024-04-08 12:25:45.795 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:25:45.796 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 16.181ms
2024-04-08 12:25:45.796 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:25:45.796 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:25:45.796 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 16.6481ms
2024-04-08 12:25:45.796 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:26:01.102 +08:00 [INF] Executing endpoint 'Yi.Framework.Bbs.Application.Services.Forum.PlateService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-04-08 12:26:01.105 +08:00 [INF] Route matched with {action = "GetList", controller = "Plate", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Bbs.Application.Contracts.Dtos.Plate.PlateGetListOutputDto]] GetListAsync(Yi.Framework.Bbs.Application.Contracts.Dtos.Plate.PlateGetListInputVo) on controller Yi.Framework.Bbs.Application.Services.Forum.PlateService (Yi.Framework.Bbs.Application).
2024-04-08 12:26:01.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","code","name","logo","introduction","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","isdisablecreatediscuss" FROM "plate"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-08 12:26:01.120 +08:00 [DBG] =========Yi-SQL耗时3.3908毫秒=====
2024-04-08 12:26:01.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","code","name","logo","introduction","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","isdisablecreatediscuss" FROM "plate"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" DESC LIMIT 10 offset 0
===============================

2024-04-08 12:26:01.122 +08:00 [DBG] =========Yi-SQL耗时1.0327毫秒=====
2024-04-08 12:26:01.127 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Bbs.Application.Contracts.Dtos.Plate.PlateGetListOutputDto, Yi.Framework.Bbs.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:26:01.129 +08:00 [INF] Executed action Yi.Framework.Bbs.Application.Services.Forum.PlateService.GetListAsync (Yi.Framework.Bbs.Application) in 23.5031ms
2024-04-08 12:26:01.129 +08:00 [INF] Executed endpoint 'Yi.Framework.Bbs.Application.Services.Forum.PlateService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-04-08 12:26:06.358 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-08 12:26:06.360 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-08 12:26:06.369 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:26:06.371 +08:00 [DBG] =========Yi-SQL耗时2.0652毫秒=====
2024-04-08 12:26:06.372 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 12:26:06.374 +08:00 [DBG] =========Yi-SQL耗时1.3992毫秒=====
2024-04-08 12:26:06.377 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:26:06.378 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 17.5441ms
2024-04-08 12:26:06.378 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-08 12:26:12.656 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:26:12.656 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-08 12:26:12.658 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-08 12:26:12.659 +08:00 [DBG] =========Yi-SQL耗时0.6323毫秒=====
2024-04-08 12:26:12.660 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-08 12:26:12.660 +08:00 [DBG] =========Yi-SQL耗时0.6718毫秒=====
2024-04-08 12:26:12.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-08 12:26:12.662 +08:00 [DBG] =========Yi-SQL耗时0.4166毫秒=====
2024-04-08 12:26:12.664 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:26:12.664 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 7.5364ms
2024-04-08 12:26:12.664 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-08 12:26:28.209 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-08 12:26:28.210 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-08 12:26:28.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 12:26:28.212 +08:00 [DBG] =========Yi-SQL耗时0.5973毫秒=====
2024-04-08 12:26:28.214 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 12:26:28.215 +08:00 [DBG] =========Yi-SQL耗时1.0224毫秒=====
2024-04-08 12:26:28.216 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 12:26:28.216 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 6.1082ms
2024-04-08 12:26:28.216 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-08 12:57:40.302 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-08 12:57:40.304 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-08 13:16:06.556 +08:00 [INF] CORS policy execution successful.
2024-04-08 13:16:06.577 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-08 13:16:06.583 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-08 13:16:07.171 +08:00 [INF] CORS policy execution successful.
2024-04-08 13:16:07.173 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-08 13:16:07.187 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-08 13:16:07.250 +08:00 [INF] CORS policy execution successful.
2024-04-08 13:16:07.251 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-08 13:16:07.251 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-08 13:16:07.261 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 13:16:07.262 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 13:16:07.279 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-08 13:16:07.280 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 17.9822ms
2024-04-08 13:16:07.280 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 13:16:07.519 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 13:16:07.519 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 13:16:07.524 +08:00 [INF] CORS policy execution successful.
2024-04-08 13:16:07.525 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-08 13:16:07.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:16:07.598 +08:00 [INF] 2024/4/8 13:16:07：cc,wId5APXcYYGPaMyvAS8Leg连接服务端success，当前已连接0个
2024-04-08 13:16:07.720 +08:00 [DBG] =========Yi-SQL耗时185.555毫秒=====
2024-04-08 13:16:07.725 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-08 13:16:07.730 +08:00 [DBG] =========Yi-SQL耗时4.324毫秒=====
2024-04-08 13:16:07.732 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-08 13:16:07.735 +08:00 [DBG] =========Yi-SQL耗时2.5225毫秒=====
2024-04-08 13:16:07.738 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:16:07.740 +08:00 [DBG] =========Yi-SQL耗时2.6437毫秒=====
2024-04-08 13:16:07.742 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:16:07.742 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 223.1795ms
2024-04-08 13:16:07.742 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 13:16:16.553 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-04-08 13:16:16.560 +08:00 [DBG] =========Yi-SQL耗时7.16毫秒=====
2024-04-08 13:16:16.864 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an unhandled Exception: 
System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
2024-04-08 13:16:16.864 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an exception.
Quartz.SchedulerException: Job threw an unhandled exception.
 ---> System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
   --- End of inner exception stack trace --- [See nested exception: System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)]
2024-04-08 13:17:02.416 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:02.416 +08:00 [INF] Executing endpoint 'Yi.Framework.Bbs.Application.Services.Forum.PlateService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-04-08 13:17:02.416 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 13:17:02.416 +08:00 [INF] Route matched with {action = "GetList", controller = "Plate", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Bbs.Application.Contracts.Dtos.Plate.PlateGetListOutputDto]] GetListAsync(Yi.Framework.Bbs.Application.Contracts.Dtos.Plate.PlateGetListInputVo) on controller Yi.Framework.Bbs.Application.Services.Forum.PlateService (Yi.Framework.Bbs.Application).
2024-04-08 13:17:02.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:17:02.436 +08:00 [DBG] =========Yi-SQL耗时7.6324毫秒=====
2024-04-08 13:17:02.436 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","code","name","logo","introduction","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","isdisablecreatediscuss" FROM "plate"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-08 13:17:02.437 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:17:02.438 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 21.6043ms
2024-04-08 13:17:02.438 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:02.443 +08:00 [DBG] =========Yi-SQL耗时6.9215毫秒=====
2024-04-08 13:17:02.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","code","name","logo","introduction","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","isdisablecreatediscuss" FROM "plate"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" DESC LIMIT 10 offset 0
===============================

2024-04-08 13:17:02.445 +08:00 [DBG] =========Yi-SQL耗时0.6653毫秒=====
2024-04-08 13:17:02.446 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Bbs.Application.Contracts.Dtos.Plate.PlateGetListOutputDto, Yi.Framework.Bbs.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:17:02.447 +08:00 [INF] Executed action Yi.Framework.Bbs.Application.Services.Forum.PlateService.GetListAsync (Yi.Framework.Bbs.Application) in 30.4182ms
2024-04-08 13:17:02.447 +08:00 [INF] Executed endpoint 'Yi.Framework.Bbs.Application.Services.Forum.PlateService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-04-08 13:17:03.211 +08:00 [INF] Executing endpoint 'Yi.Framework.Bbs.Application.Services.Forum.ArticleService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-04-08 13:17:03.225 +08:00 [INF] Route matched with {action = "GetList", controller = "Article", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Bbs.Application.Contracts.Dtos.Article.ArticleGetListOutputDto]] GetListAsync(Yi.Framework.Bbs.Application.Contracts.Dtos.Article.ArticleGetListInputVo) on controller Yi.Framework.Bbs.Application.Services.Forum.ArticleService (Yi.Framework.Bbs.Application).
2024-04-08 13:17:03.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "article"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:17:03.351 +08:00 [DBG] =========Yi-SQL耗时5.9812毫秒=====
2024-04-08 13:17:03.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","content","name","discussid","parentid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum" FROM "article"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 13:17:03.356 +08:00 [DBG] =========Yi-SQL耗时0.5634毫秒=====
2024-04-08 13:17:03.362 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Bbs.Application.Contracts.Dtos.Article.ArticleGetListOutputDto, Yi.Framework.Bbs.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:17:03.366 +08:00 [INF] Executed action Yi.Framework.Bbs.Application.Services.Forum.ArticleService.GetListAsync (Yi.Framework.Bbs.Application) in 141.1662ms
2024-04-08 13:17:03.366 +08:00 [INF] Executed endpoint 'Yi.Framework.Bbs.Application.Services.Forum.ArticleService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-04-08 13:17:09.898 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:09.898 +08:00 [INF] Route matched with {action = "GetList", controller = "Notice", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListInput) on controller Yi.Framework.Rbac.Application.Services.NoticeService (Yi.Framework.Rbac.Application).
2024-04-08 13:17:09.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "notice"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:17:09.903 +08:00 [DBG] =========Yi-SQL耗时1.5855毫秒=====
2024-04-08 13:17:09.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","title","type","content","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "notice"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 13:17:09.905 +08:00 [DBG] =========Yi-SQL耗时0.732毫秒=====
2024-04-08 13:17:09.906 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:17:09.906 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application) in 7.9951ms
2024-04-08 13:17:09.906 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:10.676 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:10.677 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-04-08 13:17:10.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "post"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:17:10.687 +08:00 [DBG] =========Yi-SQL耗时2.3166毫秒=====
2024-04-08 13:17:10.688 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 13:17:10.689 +08:00 [DBG] =========Yi-SQL耗时0.5215毫秒=====
2024-04-08 13:17:10.690 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:17:10.690 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 13.676ms
2024-04-08 13:17:10.690 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:11.100 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:11.100 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:11.100 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:17:11.100 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 13:17:11.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:17:11.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 13:17:11.101 +08:00 [DBG] =========Yi-SQL耗时0.7729毫秒=====
2024-04-08 13:17:11.104 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:17:11.104 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 4.3688ms
2024-04-08 13:17:11.104 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:11.161 +08:00 [DBG] =========Yi-SQL耗时60.1485毫秒=====
2024-04-08 13:17:11.174 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:17:11.182 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 82.1686ms
2024-04-08 13:17:11.182 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:16.083 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:16.083 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:17:16.084 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:16.084 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:17:16.084 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 13:17:16.085 +08:00 [DBG] =========Yi-SQL耗时1.0071毫秒=====
2024-04-08 13:17:16.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'51121df1-70bc-842c-6592-3a119a97616a'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:17:16.089 +08:00 [DBG] =========Yi-SQL耗时0.9943毫秒=====
2024-04-08 13:17:16.092 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 13:17:16.092 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 8.1365ms
2024-04-08 13:17:16.092 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:16.105 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:17:16.108 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 25.3013ms
2024-04-08 13:17:16.108 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:18.357 +08:00 [INF] CORS policy execution successful.
2024-04-08 13:17:18.358 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:18.358 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:17:18.369 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'51121df1-70bc-842c-6592-3a119a97616a'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:17:18.370 +08:00 [DBG] =========Yi-SQL耗时1.0695毫秒=====
2024-04-08 13:17:18.375 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-03-29 12:14:27.178' AS DATETIME),"creatorid"=null,"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-08 13:17:18.374' AS DATETIME),"ordernum"=91,"state"=0,"menuname"=N'BBS',"menutype"=0,"permissioncode"=null,"parentid"=N'00000000-0000-0000-0000-000000000000',"menuicon"=N'monitor',"router"=N'/bbs',"islink"=0,"iscache"=0,"isshow"=0,"remark"=null,"component"=null,"query"=null  WHERE "id"=N'51121df1-70bc-842c-6592-3a119a97616a'
===============================

2024-04-08 13:17:18.381 +08:00 [DBG] =========Yi-SQL耗时5.2784毫秒=====
2024-04-08 13:17:18.382 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 13:17:18.382 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 24.0789ms
2024-04-08 13:17:18.382 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:18.407 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:18.407 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:17:18.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 13:17:18.409 +08:00 [DBG] =========Yi-SQL耗时0.681毫秒=====
2024-04-08 13:17:18.429 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:17:18.437 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 29.4191ms
2024-04-08 13:17:18.437 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:20.184 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-08 13:17:20.184 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-08 13:17:20.338 +08:00 [INF] CORS policy execution successful.
2024-04-08 13:17:20.339 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-08 13:17:20.339 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-08 13:17:20.352 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:20.352 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 13:17:20.353 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-08 13:17:20.353 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.0425ms
2024-04-08 13:17:20.353 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:20.414 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:20.415 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 13:17:20.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:17:20.418 +08:00 [DBG] =========Yi-SQL耗时1.135毫秒=====
2024-04-08 13:17:20.420 +08:00 [INF] CORS policy execution successful.
2024-04-08 13:17:20.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-08 13:17:20.421 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-08 13:17:20.421 +08:00 [DBG] =========Yi-SQL耗时1.0271毫秒=====
2024-04-08 13:17:20.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-08 13:17:20.423 +08:00 [DBG] =========Yi-SQL耗时0.455毫秒=====
2024-04-08 13:17:20.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:17:20.425 +08:00 [DBG] =========Yi-SQL耗时0.5403毫秒=====
2024-04-08 13:17:20.425 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:17:20.425 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 10.5576ms
2024-04-08 13:17:20.425 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:20.469 +08:00 [INF] 2024/4/8 13:17:20：cc,a3QoZMafu7QUj7G6wpkVRw连接服务端success，当前已连接0个
2024-04-08 13:17:20.561 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:20.561 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:20.561 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:20.561 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 13:17:20.561 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 13:17:20.561 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:17:20.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:17:20.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 13:17:20.563 +08:00 [DBG] =========Yi-SQL耗时0.9257毫秒=====
2024-04-08 13:17:20.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:17:20.567 +08:00 [DBG] =========Yi-SQL耗时2.2705毫秒=====
2024-04-08 13:17:20.570 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:17:20.586 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 23.1027ms
2024-04-08 13:17:20.587 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:20.605 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:17:20.618 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 56.3131ms
2024-04-08 13:17:20.618 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:17:20.676 +08:00 [DBG] =========Yi-SQL耗时112.0031毫秒=====
2024-04-08 13:17:20.677 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:17:20.677 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 115.831ms
2024-04-08 13:17:20.677 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 13:28:06.673 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:28:06.673 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:28:06.674 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:28:06.681 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:28:06.681 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 13:28:06.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:28:06.757 +08:00 [DBG] =========Yi-SQL耗时75.2416毫秒=====
2024-04-08 13:28:06.757 +08:00 [DBG] =========Yi-SQL耗时74.4315毫秒=====
2024-04-08 13:28:06.758 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 13:28:06.758 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 77.0756ms
2024-04-08 13:28:06.758 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:28:06.772 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:28:06.776 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 102.2467ms
2024-04-08 13:28:06.776 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:28:15.977 +08:00 [INF] CORS policy execution successful.
2024-04-08 13:28:15.978 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:28:15.978 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:28:15.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:28:15.984 +08:00 [DBG] =========Yi-SQL耗时1.8179毫秒=====
2024-04-08 13:28:15.988 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-04-08 12:22:18.071' AS DATETIME),"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-08 13:28:15.987' AS DATETIME),"ordernum"=100,"state"=1,"menuname"=N'问题列表',"menutype"=1,"permissioncode"=null,"parentid"=N'7e4f4c22-9927-da88-9330-3a11cdb2f701',"menuicon"=N'list',"router"=N'question',"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=N'/question/questions/index',"query"=null  WHERE "id"=N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'
===============================

2024-04-08 13:28:15.991 +08:00 [DBG] =========Yi-SQL耗时2.7544毫秒=====
2024-04-08 13:28:15.991 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 13:28:15.992 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 13.658ms
2024-04-08 13:28:15.992 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:28:16.022 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:28:16.022 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:28:16.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 13:28:16.025 +08:00 [DBG] =========Yi-SQL耗时1.0555毫秒=====
2024-04-08 13:28:16.046 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:28:16.072 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 49.9983ms
2024-04-08 13:28:16.072 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:29:27.146 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-08 13:29:27.152 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature Void GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-08 13:29:27.158 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 5.7666ms
2024-04-08 13:29:27.158 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-08 13:29:44.519 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-08 13:29:44.519 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature Void GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-08 13:29:44.520 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 0.455ms
2024-04-08 13:29:44.520 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-08 13:29:55.099 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-08 13:29:55.099 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature Void GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-08 13:29:55.099 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 0.2653ms
2024-04-08 13:29:55.099 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-08 13:30:20.353 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetHelloWorld (Yi.Abp.Application)'
2024-04-08 13:30:20.354 +08:00 [INF] Route matched with {action = "GetHelloWorld", controller = "Test", area = ""}. Executing controller action with signature System.String GetHelloWorld(System.String) on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-08 13:30:20.368 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-04-08 13:30:20.374 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetHelloWorld (Yi.Abp.Application) in 19.7536ms
2024-04-08 13:30:20.374 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetHelloWorld (Yi.Abp.Application)'
2024-04-08 13:30:21.735 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetHelloWorld (Yi.Abp.Application)'
2024-04-08 13:30:21.735 +08:00 [INF] Route matched with {action = "GetHelloWorld", controller = "Test", area = ""}. Executing controller action with signature System.String GetHelloWorld(System.String) on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-08 13:30:21.736 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-04-08 13:30:21.742 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetHelloWorld (Yi.Abp.Application) in 6.7645ms
2024-04-08 13:30:21.742 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetHelloWorld (Yi.Abp.Application)'
2024-04-08 13:30:43.741 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:30:43.741 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:30:43.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 13:30:43.748 +08:00 [DBG] =========Yi-SQL耗时4.8443毫秒=====
2024-04-08 13:30:43.777 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:30:43.779 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:30:43.783 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:30:43.784 +08:00 [DBG] =========Yi-SQL耗时0.8301毫秒=====
2024-04-08 13:30:43.790 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 13:30:43.792 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 12.7473ms
2024-04-08 13:30:43.792 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:30:43.805 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:30:43.813 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 71.5739ms
2024-04-08 13:30:43.813 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:09.805 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-08 13:31:09.805 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-08 13:31:09.812 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:31:09.818 +08:00 [DBG] =========Yi-SQL耗时6.5766毫秒=====
2024-04-08 13:31:09.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 13:31:09.820 +08:00 [DBG] =========Yi-SQL耗时1.0699毫秒=====
2024-04-08 13:31:09.821 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:31:09.821 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 16.1632ms
2024-04-08 13:31:09.821 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-08 13:31:16.178 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:16.178 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-08 13:31:16.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:31:16.186 +08:00 [DBG] =========Yi-SQL耗时1.6406毫秒=====
2024-04-08 13:31:16.213 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 13:31:16.214 +08:00 [DBG] =========Yi-SQL耗时1.613毫秒=====
2024-04-08 13:31:16.216 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:31:16.217 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 38.1712ms
2024-04-08 13:31:16.217 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:20.905 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:20.905 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:31:20.906 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:20.907 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:31:20.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 13:31:20.908 +08:00 [DBG] =========Yi-SQL耗时0.8399毫秒=====
2024-04-08 13:31:20.911 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:31:20.912 +08:00 [DBG] =========Yi-SQL耗时0.7477毫秒=====
2024-04-08 13:31:20.916 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 13:31:20.916 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 9.5117ms
2024-04-08 13:31:20.916 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:20.934 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:31:20.938 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 31.9519ms
2024-04-08 13:31:20.938 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:27.408 +08:00 [INF] CORS policy execution successful.
2024-04-08 13:31:27.410 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:27.410 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:31:27.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:31:27.413 +08:00 [DBG] =========Yi-SQL耗时1.0545毫秒=====
2024-04-08 13:31:27.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-04-08 12:22:18.071' AS DATETIME),"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-08 13:31:27.417' AS DATETIME),"ordernum"=100,"state"=1,"menuname"=N'问题列表',"menutype"=1,"permissioncode"=null,"parentid"=N'7e4f4c22-9927-da88-9330-3a11cdb2f701',"menuicon"=N'list',"router"=N'list',"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=N'/question/questions/index',"query"=null  WHERE "id"=N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'
===============================

2024-04-08 13:31:27.419 +08:00 [DBG] =========Yi-SQL耗时1.5693毫秒=====
2024-04-08 13:31:27.420 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 13:31:27.420 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 10.0702ms
2024-04-08 13:31:27.420 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:27.448 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:27.448 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:31:27.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 13:31:27.450 +08:00 [DBG] =========Yi-SQL耗时0.618毫秒=====
2024-04-08 13:31:27.463 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:31:27.470 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 21.2706ms
2024-04-08 13:31:27.470 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:31.416 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:31.417 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:31:31.418 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:31.418 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:31:31.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 13:31:31.419 +08:00 [DBG] =========Yi-SQL耗时0.7906毫秒=====
2024-04-08 13:31:31.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:31:31.423 +08:00 [DBG] =========Yi-SQL耗时0.9856毫秒=====
2024-04-08 13:31:31.426 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 13:31:31.427 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 8.4812ms
2024-04-08 13:31:31.427 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:31.440 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:31:31.444 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 27.2549ms
2024-04-08 13:31:31.444 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:34.480 +08:00 [INF] CORS policy execution successful.
2024-04-08 13:31:34.481 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:34.481 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:31:34.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:31:34.490 +08:00 [DBG] =========Yi-SQL耗时0.7451毫秒=====
2024-04-08 13:31:34.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-04-08 12:22:18.071' AS DATETIME),"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-08 13:31:34.495' AS DATETIME),"ordernum"=100,"state"=1,"menuname"=N'问题列表',"menutype"=1,"permissioncode"=null,"parentid"=N'7e4f4c22-9927-da88-9330-3a11cdb2f701',"menuicon"=N'list',"router"=N'list',"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=N'/question/questions/index',"query"=null  WHERE "id"=N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'
===============================

2024-04-08 13:31:34.496 +08:00 [DBG] =========Yi-SQL耗时1.1288毫秒=====
2024-04-08 13:31:34.497 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 13:31:34.497 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 15.7204ms
2024-04-08 13:31:34.497 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:34.518 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:34.519 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:31:34.520 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 13:31:34.521 +08:00 [DBG] =========Yi-SQL耗时0.8757毫秒=====
2024-04-08 13:31:34.534 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:31:34.544 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 25.6788ms
2024-04-08 13:31:34.545 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:42.538 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-08 13:31:42.538 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-08 13:31:42.700 +08:00 [INF] CORS policy execution successful.
2024-04-08 13:31:42.701 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-08 13:31:42.701 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-08 13:31:42.717 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:42.717 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 13:31:42.719 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-08 13:31:42.719 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.1014ms
2024-04-08 13:31:42.719 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:42.784 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:42.784 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 13:31:42.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:31:42.790 +08:00 [DBG] =========Yi-SQL耗时4.0138毫秒=====
2024-04-08 13:31:42.791 +08:00 [INF] CORS policy execution successful.
2024-04-08 13:31:42.791 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-08 13:31:42.792 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-08 13:31:42.795 +08:00 [DBG] =========Yi-SQL耗时3.4411毫秒=====
2024-04-08 13:31:42.796 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-08 13:31:42.796 +08:00 [DBG] =========Yi-SQL耗时0.7652毫秒=====
2024-04-08 13:31:42.797 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:31:42.797 +08:00 [DBG] =========Yi-SQL耗时0.4695毫秒=====
2024-04-08 13:31:42.798 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:31:42.798 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 14.0481ms
2024-04-08 13:31:42.798 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:42.830 +08:00 [INF] 2024/4/8 13:31:42：cc,VrlPCI3fUfG6xafAqjiSEQ连接服务端success，当前已连接0个
2024-04-08 13:31:42.978 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:42.978 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:42.978 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:42.978 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 13:31:42.978 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:31:42.978 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 13:31:42.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 13:31:42.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:31:42.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:31:42.986 +08:00 [DBG] =========Yi-SQL耗时2.2993毫秒=====
2024-04-08 13:31:42.987 +08:00 [DBG] =========Yi-SQL耗时2.1518毫秒=====
2024-04-08 13:31:42.996 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:31:42.997 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 18.0847ms
2024-04-08 13:31:42.997 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:43.017 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:31:43.023 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 44.722ms
2024-04-08 13:31:43.023 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:43.065 +08:00 [DBG] =========Yi-SQL耗时78.5945毫秒=====
2024-04-08 13:31:43.066 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:31:43.066 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 87.2915ms
2024-04-08 13:31:43.066 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:46.514 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:46.514 +08:00 [INF] Route matched with {action = "GetList", controller = "Online", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Domain.Shared.Model.OnlineUserModel]] GetListAsync(Yi.Framework.Rbac.Domain.Shared.Model.OnlineUserModel) on controller Yi.Framework.Rbac.Application.Services.Monitor.OnlineService (Yi.Framework.Rbac.Application).
2024-04-08 13:31:46.516 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Domain.Shared.Model.OnlineUserModel, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:31:46.516 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.GetListAsync (Yi.Framework.Rbac.Application) in 2.0377ms
2024-04-08 13:31:46.516 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:48.538 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:48.538 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-08 13:31:48.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:31:48.541 +08:00 [DBG] =========Yi-SQL耗时0.9035毫秒=====
2024-04-08 13:31:48.542 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 13:31:48.543 +08:00 [DBG] =========Yi-SQL耗时1.1329毫秒=====
2024-04-08 13:31:48.545 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:31:48.545 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 7.5305ms
2024-04-08 13:31:48.545 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:49.820 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:49.820 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:49.820 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:49.820 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 13:31:49.821 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-08 13:31:49.821 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-08 13:31:49.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:31:49.822 +08:00 [DBG] =========Yi-SQL耗时0.8499毫秒=====
2024-04-08 13:31:49.825 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:31:49.825 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 4.2982ms
2024-04-08 13:31:49.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-08 13:31:49.825 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:49.829 +08:00 [DBG] =========Yi-SQL耗时4.0853毫秒=====
2024-04-08 13:31:49.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-08 13:31:49.830 +08:00 [DBG] =========Yi-SQL耗时0.9284毫秒=====
2024-04-08 13:31:49.832 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:31:49.832 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 11.8845ms
2024-04-08 13:31:49.833 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:31:49.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-08 13:31:49.840 +08:00 [DBG] =========Yi-SQL耗时4.0835毫秒=====
2024-04-08 13:31:49.841 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-08 13:31:49.846 +08:00 [DBG] =========Yi-SQL耗时4.4446毫秒=====
2024-04-08 13:31:49.847 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:31:49.847 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 26.7072ms
2024-04-08 13:31:49.847 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:32:59.712 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:32:59.712 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:32:59.713 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:32:59.713 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:32:59.714 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 13:32:59.717 +08:00 [DBG] =========Yi-SQL耗时1.3855毫秒=====
2024-04-08 13:32:59.718 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:32:59.721 +08:00 [DBG] =========Yi-SQL耗时2.5002毫秒=====
2024-04-08 13:32:59.728 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 13:32:59.729 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 15.7914ms
2024-04-08 13:32:59.729 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:32:59.743 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:32:59.746 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 33.8648ms
2024-04-08 13:32:59.746 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:33:11.919 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:33:11.920 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:33:11.921 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:33:11.921 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:33:11.922 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 13:33:11.922 +08:00 [DBG] =========Yi-SQL耗时0.8205毫秒=====
2024-04-08 13:33:11.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:33:11.925 +08:00 [DBG] =========Yi-SQL耗时1.2739毫秒=====
2024-04-08 13:33:11.929 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 13:33:11.930 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 8.4382ms
2024-04-08 13:33:11.930 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:33:11.940 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:33:11.944 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 24.2503ms
2024-04-08 13:33:11.944 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:33:15.452 +08:00 [INF] CORS policy execution successful.
2024-04-08 13:33:15.454 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:33:15.454 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:33:15.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:33:15.457 +08:00 [DBG] =========Yi-SQL耗时0.9431毫秒=====
2024-04-08 13:33:15.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-04-08 12:22:18.071' AS DATETIME),"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-08 13:33:15.460' AS DATETIME),"ordernum"=100,"state"=1,"menuname"=N'问题列表',"menutype"=1,"permissioncode"=null,"parentid"=N'7e4f4c22-9927-da88-9330-3a11cdb2f701',"menuicon"=N'list',"router"=N'list',"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=N'/question/questiones/index',"query"=null  WHERE "id"=N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'
===============================

2024-04-08 13:33:15.462 +08:00 [DBG] =========Yi-SQL耗时0.8938毫秒=====
2024-04-08 13:33:15.462 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 13:33:15.462 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 8.3357ms
2024-04-08 13:33:15.462 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:33:15.485 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:33:15.485 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 13:33:15.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 13:33:15.487 +08:00 [DBG] =========Yi-SQL耗时0.6412毫秒=====
2024-04-08 13:33:15.509 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:33:15.517 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 31.8388ms
2024-04-08 13:33:15.517 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:51:26.479 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-08 13:51:26.483 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-08 13:51:26.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:51:26.666 +08:00 [DBG] =========Yi-SQL耗时91.0024毫秒=====
2024-04-08 13:51:26.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 13:51:26.692 +08:00 [DBG] =========Yi-SQL耗时1.7367毫秒=====
2024-04-08 13:51:26.736 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:51:26.741 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 256.2032ms
2024-04-08 13:51:26.741 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-08 13:51:32.961 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:51:32.962 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-08 13:51:32.974 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-08 13:51:32.979 +08:00 [DBG] =========Yi-SQL耗时4.5052毫秒=====
2024-04-08 13:51:32.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-08 13:51:32.995 +08:00 [DBG] =========Yi-SQL耗时2.1972毫秒=====
2024-04-08 13:51:33.007 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:51:33.009 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 46.5933ms
2024-04-08 13:51:33.009 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:51:37.008 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:51:37.008 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-04-08 13:51:37.012 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "post"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:51:37.014 +08:00 [DBG] =========Yi-SQL耗时1.7366毫秒=====
2024-04-08 13:51:37.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 13:51:37.016 +08:00 [DBG] =========Yi-SQL耗时0.4728毫秒=====
2024-04-08 13:51:37.023 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:51:37.024 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 15.557ms
2024-04-08 13:51:37.025 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:51:53.840 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:51:53.888 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 13:51:53.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:51:53.959 +08:00 [DBG] =========Yi-SQL耗时1.4197毫秒=====
2024-04-08 13:51:53.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 13:51:53.965 +08:00 [DBG] =========Yi-SQL耗时1.362毫秒=====
2024-04-08 13:51:54.015 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:51:54.025 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 137.0034ms
2024-04-08 13:51:54.025 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:52:03.408 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 13:52:03.408 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:52:03.408 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 13:52:03.408 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-08 13:52:03.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:52:03.413 +08:00 [DBG] =========Yi-SQL耗时2.4479毫秒=====
2024-04-08 13:52:03.414 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:52:03.415 +08:00 [DBG] =========Yi-SQL耗时1.1673毫秒=====
2024-04-08 13:52:03.416 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:52:03.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 13:52:03.417 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 8.8034ms
2024-04-08 13:52:03.417 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 13:52:03.417 +08:00 [DBG] =========Yi-SQL耗时0.7301毫秒=====
2024-04-08 13:52:03.420 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:52:03.420 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 12.0864ms
2024-04-08 13:52:03.420 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:52:10.634 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:52:10.635 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-08 13:52:10.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:52:10.637 +08:00 [DBG] =========Yi-SQL耗时0.8575毫秒=====
2024-04-08 13:52:10.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 13:52:10.640 +08:00 [DBG] =========Yi-SQL耗时1.2541毫秒=====
2024-04-08 13:52:10.643 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:52:10.643 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 8.7319ms
2024-04-08 13:52:10.643 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:52:13.194 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:52:13.194 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-08 13:52:13.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:52:13.196 +08:00 [DBG] =========Yi-SQL耗时0.7493毫秒=====
2024-04-08 13:52:13.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 13:52:13.200 +08:00 [DBG] =========Yi-SQL耗时0.6534毫秒=====
2024-04-08 13:52:13.203 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:52:13.203 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 9.1268ms
2024-04-08 13:52:13.203 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:52:15.643 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:52:15.643 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-08 13:52:15.644 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:52:15.645 +08:00 [DBG] =========Yi-SQL耗时0.8237毫秒=====
2024-04-08 13:52:15.647 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 13:52:15.649 +08:00 [DBG] =========Yi-SQL耗时1.2118毫秒=====
2024-04-08 13:52:15.652 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:52:15.652 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 9.049ms
2024-04-08 13:52:15.652 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:52:16.214 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:52:16.214 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-08 13:52:16.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:52:16.217 +08:00 [DBG] =========Yi-SQL耗时0.7687毫秒=====
2024-04-08 13:52:16.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 13:52:16.219 +08:00 [DBG] =========Yi-SQL耗时0.9133毫秒=====
2024-04-08 13:52:16.248 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:52:16.248 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 33.6055ms
2024-04-08 13:52:16.248 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:52:21.181 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:52:21.181 +08:00 [INF] Route matched with {action = "GetList", controller = "Notice", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListInput) on controller Yi.Framework.Rbac.Application.Services.NoticeService (Yi.Framework.Rbac.Application).
2024-04-08 13:52:21.183 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "notice"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:52:21.185 +08:00 [DBG] =========Yi-SQL耗时1.5332毫秒=====
2024-04-08 13:52:21.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","title","type","content","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "notice"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 13:52:21.188 +08:00 [DBG] =========Yi-SQL耗时0.7778毫秒=====
2024-04-08 13:52:21.188 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:52:21.188 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application) in 7.0451ms
2024-04-08 13:52:21.188 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 13:52:24.405 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-08 13:52:24.406 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-08 13:52:24.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 13:52:24.410 +08:00 [DBG] =========Yi-SQL耗时0.7043毫秒=====
2024-04-08 13:52:24.413 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 13:52:24.414 +08:00 [DBG] =========Yi-SQL耗时0.8521毫秒=====
2024-04-08 13:52:24.414 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 13:52:24.415 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 9.3432ms
2024-04-08 13:52:24.415 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-08 14:00:00.025 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-04-08 14:00:00.113 +08:00 [DBG] =========Yi-SQL耗时88.5405毫秒=====
2024-04-08 14:00:00.456 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an unhandled Exception: 
System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
2024-04-08 14:00:00.456 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an exception.
Quartz.SchedulerException: Job threw an unhandled exception.
 ---> System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
   --- End of inner exception stack trace --- [See nested exception: System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)]
2024-04-08 14:34:50.440 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-08 14:34:50.464 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-08 14:34:55.886 +08:00 [INF] Loaded ABP modules:
2024-04-08 14:34:55.886 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-08 14:34:55.886 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-08 14:34:55.886 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-08 14:34:55.886 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-08 14:34:55.886 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-08 14:34:55.886 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-08 14:34:55.886 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-08 14:34:55.886 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-08 14:34:55.886 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-08 14:34:55.886 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-08 14:34:55.886 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-08 14:34:55.886 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-08 14:34:55.886 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-08 14:34:55.886 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-08 14:34:55.886 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-08 14:34:55.886 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-08 14:34:55.886 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-08 14:34:55.886 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-08 14:34:55.886 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-08 14:34:55.886 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-08 14:34:55.886 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-08 14:34:55.886 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-04-08 14:34:55.886 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-08 14:34:55.886 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-08 14:34:55.886 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-08 14:34:55.886 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-08 14:34:55.886 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-08 14:34:55.886 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-08 14:34:55.886 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-08 14:34:55.886 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-08 14:34:55.886 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-08 14:34:55.886 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-08 14:34:55.886 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-08 14:34:55.886 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-08 14:34:55.886 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-08 14:34:55.886 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-08 14:34:55.886 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-08 14:34:55.886 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-08 14:34:55.886 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-08 14:34:55.886 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-08 14:34:55.886 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-08 14:34:55.886 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-08 14:34:55.886 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-08 14:34:55.886 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-08 14:34:55.886 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-08 14:34:55.886 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-08 14:34:55.886 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-08 14:34:55.886 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-08 14:34:55.886 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-08 14:34:55.886 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-08 14:34:55.886 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-08 14:34:55.886 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-04-08 14:34:55.886 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-08 14:34:55.886 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-08 14:34:55.886 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-08 14:34:55.886 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-04-08 14:34:55.886 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-08 14:34:55.887 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-08 14:34:55.887 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-08 14:34:55.887 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-08 14:34:55.887 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-08 14:34:55.887 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-08 14:34:55.887 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-08 14:34:55.887 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-08 14:34:55.887 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-04-08 14:34:55.887 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-08 14:34:55.887 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-08 14:34:55.887 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-08 14:34:55.887 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-08 14:34:55.887 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-08 14:34:55.887 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-08 14:34:55.887 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-08 14:34:55.887 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-08 14:34:55.887 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-04-08 14:34:55.887 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-08 14:34:55.887 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-08 14:34:55.887 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-08 14:34:55.887 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-08 14:34:55.887 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-08 14:34:55.887 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-08 14:34:55.887 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-08 14:34:55.887 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-08 14:34:55.887 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-08 14:34:55.887 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-08 14:34:55.887 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-08 14:34:55.887 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-08 14:34:55.887 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-08 14:34:55.887 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-08 14:34:55.887 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-08 14:34:55.887 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-08 14:34:55.887 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-08 14:34:55.887 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-08 14:34:55.887 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-08 14:34:55.893 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-08 14:34:55.898 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-08 14:34:56.547 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:56.556 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-08 14:34:56.593 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.609 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-08 14:34:56.612 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:56.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.631 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.632 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-08 14:34:56.634 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-08 14:34:56.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-08 14:34:56.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-08 14:34:56.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-08 14:34:56.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-08 14:34:56.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-08 14:34:56.639 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-08 14:34:56.639 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-08 14:34:56.640 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.640 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-08 14:34:56.640 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-08 14:34:56.642 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.650 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-08 14:34:56.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.659 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:56.660 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.661 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.666 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.666 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-08 14:34:56.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-08 14:34:56.669 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-08 14:34:56.669 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-08 14:34:56.669 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-08 14:34:56.669 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-08 14:34:56.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-08 14:34:56.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-08 14:34:56.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.678 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-08 14:34:56.680 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:56.685 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.686 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.692 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.692 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-08 14:34:56.695 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-08 14:34:56.695 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-08 14:34:56.696 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-08 14:34:56.696 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-08 14:34:56.696 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-08 14:34:56.696 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-08 14:34:56.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-08 14:34:56.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-08 14:34:56.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-08 14:34:56.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-08 14:34:56.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-08 14:34:56.698 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.698 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-08 14:34:56.698 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.698 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-08 14:34:56.698 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.698 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-08 14:34:56.698 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.698 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-08 14:34:56.707 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:56.713 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.713 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.720 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.720 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-08 14:34:56.722 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.722 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-08 14:34:56.722 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.722 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-08 14:34:56.722 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.722 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-08 14:34:56.722 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.722 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-08 14:34:56.722 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.722 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-08 14:34:56.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-08 14:34:56.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-08 14:34:56.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-08 14:34:56.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-08 14:34:56.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-08 14:34:56.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-08 14:34:56.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.729 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-08 14:34:56.731 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:56.737 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.737 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.742 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.742 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-08 14:34:56.744 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.744 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-08 14:34:56.745 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.745 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-08 14:34:56.745 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.745 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-08 14:34:56.746 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-08 14:34:56.746 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-08 14:34:56.746 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-08 14:34:56.746 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-08 14:34:56.746 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.752 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-08 14:34:56.754 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:56.759 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.759 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.765 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.765 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-08 14:34:56.768 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-08 14:34:56.769 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-08 14:34:56.770 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-08 14:34:56.770 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.776 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-08 14:34:56.779 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.784 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:56.786 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.786 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.791 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.791 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-08 14:34:56.793 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.793 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-08 14:34:56.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.794 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-08 14:34:56.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.794 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-08 14:34:56.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.794 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-08 14:34:56.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.794 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-08 14:34:56.795 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.795 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-08 14:34:56.795 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.796 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 14:34:56.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.809 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-08 14:34:56.812 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.817 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:56.818 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.825 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-08 14:34:56.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-08 14:34:56.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-08 14:34:56.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-08 14:34:56.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-08 14:34:56.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-08 14:34:56.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-08 14:34:56.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-08 14:34:56.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-08 14:34:56.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-08 14:34:56.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-08 14:34:56.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-08 14:34:56.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-08 14:34:56.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-08 14:34:56.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-08 14:34:56.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-08 14:34:56.832 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-08 14:34:56.832 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-08 14:34:56.832 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-08 14:34:56.832 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.838 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.839 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-08 14:34:56.841 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.848 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:56.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.855 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.855 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-08 14:34:56.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-08 14:34:56.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-08 14:34:56.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-08 14:34:56.858 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.858 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.864 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-08 14:34:56.866 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:56.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-08 14:34:56.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-08 14:34:56.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-08 14:34:56.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-08 14:34:56.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-08 14:34:56.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-08 14:34:56.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-08 14:34:56.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-08 14:34:56.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-08 14:34:56.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-08 14:34:56.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-08 14:34:56.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-08 14:34:56.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-08 14:34:56.882 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.887 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.887 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-08 14:34:56.889 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.893 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:56.894 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-08 14:34:56.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-08 14:34:56.902 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-08 14:34:56.902 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-08 14:34:56.902 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-08 14:34:56.902 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-08 14:34:56.909 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.914 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:56.915 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.915 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.921 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.921 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-08 14:34:56.923 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-08 14:34:56.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-08 14:34:56.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-08 14:34:56.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-08 14:34:56.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-08 14:34:56.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-08 14:34:56.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-08 14:34:56.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-08 14:34:56.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-08 14:34:56.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-08 14:34:56.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-08 14:34:56.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-08 14:34:56.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-08 14:34:56.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.931 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.931 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-08 14:34:56.933 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:56.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.943 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-08 14:34:56.945 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.945 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-08 14:34:56.945 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.945 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-08 14:34:56.945 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.945 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.951 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-08 14:34:56.953 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:56.959 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.965 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.965 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-08 14:34:56.967 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.967 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-08 14:34:56.968 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.968 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-08 14:34:56.968 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.968 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-08 14:34:56.968 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.968 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-08 14:34:56.968 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.968 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-08 14:34:56.968 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.968 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-08 14:34:56.968 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.968 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-08 14:34:56.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-08 14:34:56.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-08 14:34:56.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-08 14:34:56.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-08 14:34:56.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-08 14:34:56.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-08 14:34:56.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-08 14:34:56.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-08 14:34:56.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-08 14:34:56.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-08 14:34:56.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-08 14:34:56.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-08 14:34:56.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-08 14:34:56.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-08 14:34:56.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-08 14:34:56.971 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-08 14:34:56.971 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-08 14:34:56.971 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 14:34:56.972 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.979 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.979 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-08 14:34:56.981 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:56.986 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-08 14:34:56.993 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-08 14:34:56.994 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-08 14:34:56.994 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-08 14:34:56.994 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-08 14:34:56.994 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:56.999 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:56.999 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-08 14:34:57.001 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.006 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.011 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-08 14:34:57.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-08 14:34:57.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-08 14:34:57.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-08 14:34:57.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-08 14:34:57.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.020 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-08 14:34:57.022 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.027 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.033 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.033 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-08 14:34:57.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-08 14:34:57.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.041 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-08 14:34:57.063 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.067 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.068 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.068 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-08 14:34:57.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.080 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.080 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-08 14:34:57.082 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.087 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.093 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.093 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-08 14:34:57.095 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-04-08 14:34:57.095 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-04-08 14:34:57.095 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-04-08 14:34:57.095 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-04-08 14:34:57.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-04-08 14:34:57.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-04-08 14:34:57.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-04-08 14:34:57.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-04-08 14:34:57.097 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-04-08 14:34:57.097 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 14:34:57.098 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.098 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.105 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.105 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-08 14:34:57.107 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.111 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.111 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.117 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-08 14:34:57.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.125 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.125 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-08 14:34:57.127 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.130 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.136 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-08 14:34:57.138 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-04-08 14:34:57.138 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-04-08 14:34:57.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-04-08 14:34:57.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-04-08 14:34:57.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-04-08 14:34:57.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-04-08 14:34:57.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-08 14:34:57.146 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.150 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.157 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-08 14:34:57.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-04-08 14:34:57.160 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-04-08 14:34:57.160 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-04-08 14:34:57.160 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 14:34:57.161 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.161 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-08 14:34:57.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-08 14:34:57.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-04-08 14:34:57.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-04-08 14:34:57.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 14:34:57.182 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.182 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.187 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-08 14:34:57.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.193 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.194 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-08 14:34:57.202 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.202 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-04-08 14:34:57.202 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.202 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 14:34:57.203 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.203 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 14:34:57.205 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.205 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 14:34:57.206 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.206 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.212 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-08 14:34:57.214 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.218 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.218 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.224 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.224 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-08 14:34:57.226 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.226 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.232 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-08 14:34:57.234 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.241 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.246 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.246 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-08 14:34:57.248 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.249 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-04-08 14:34:57.249 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.249 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-04-08 14:34:57.249 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.249 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 14:34:57.251 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 14:34:57.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-08 14:34:57.260 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.271 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.271 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-08 14:34:57.273 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-04-08 14:34:57.274 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-04-08 14:34:57.274 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-04-08 14:34:57.274 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 14:34:57.275 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.275 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 14:34:57.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 14:34:57.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.282 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-08 14:34:57.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.288 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.289 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.289 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.294 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.294 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-08 14:34:57.296 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.296 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-08 14:34:57.304 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.307 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.308 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.313 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-08 14:34:57.314 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-04-08 14:34:57.315 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.321 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.321 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-08 14:34:57.323 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.327 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.328 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.335 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.335 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-08 14:34:57.337 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-08 14:34:57.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.348 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.350 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.350 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.356 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.356 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-08 14:34:57.358 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.358 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-04-08 14:34:57.358 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.358 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.363 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-08 14:34:57.366 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.369 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.375 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-08 14:34:57.377 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-04-08 14:34:57.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-04-08 14:34:57.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-04-08 14:34:57.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-04-08 14:34:57.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-04-08 14:34:57.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-04-08 14:34:57.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-04-08 14:34:57.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-04-08 14:34:57.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-08 14:34:57.391 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.396 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.402 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.402 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-08 14:34:57.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-04-08 14:34:57.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-04-08 14:34:57.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-04-08 14:34:57.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-04-08 14:34:57.405 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.405 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.411 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-08 14:34:57.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-08 14:34:57.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 14:34:57.426 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 14:34:57.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.432 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-08 14:34:57.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.442 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-08 14:34:57.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 14:34:57.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 14:34:57.452 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.452 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.458 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-08 14:34:57.461 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.466 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.466 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.472 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-08 14:34:57.475 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.475 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 14:34:57.476 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.476 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 14:34:57.477 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.477 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-08 14:34:57.484 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-08 14:34:57.496 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.497 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 14:34:57.498 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.498 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.503 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.503 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-08 14:34:57.505 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.509 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.511 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "question"(
"id" uuid NOT NULL  ,
"project" varchar(255) NOT NULL  ,
"status" varchar(255) NOT NULL  ,
"category" varchar(255) NOT NULL  ,
"impact" varchar(255) NOT NULL  ,
"priority" varchar(255) NOT NULL  ,
"title" varchar(255) NOT NULL  ,
"description" varchar(255) NOT NULL  ,
"solve_user" varchar(255) NOT NULL  ,
"creationtime" timestamp NOT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"concurrencystamp" varchar(255) NOT NULL   , Primary key("id"))
===============================

2024-04-08 14:34:57.536 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.536 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."id" is '主键'
===============================

2024-04-08 14:34:57.537 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."project" is '项目'
===============================

2024-04-08 14:34:57.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."status" is '状态'
===============================

2024-04-08 14:34:57.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."category" is '类别'
===============================

2024-04-08 14:34:57.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."impact" is '影响'
===============================

2024-04-08 14:34:57.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."priority" is '优先级'
===============================

2024-04-08 14:34:57.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."title" is '标题'
===============================

2024-04-08 14:34:57.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."description" is '详情'
===============================

2024-04-08 14:34:57.540 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."solve_user" is '对应人'
===============================

2024-04-08 14:34:57.540 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."creationtime" is '创建时间'
===============================

2024-04-08 14:34:57.541 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.550 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-08 14:34:57.553 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.559 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.564 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.565 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-08 14:34:57.566 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.567 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-08 14:34:57.567 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.567 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-08 14:34:57.567 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.567 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-08 14:34:57.567 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.567 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-08 14:34:57.567 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.567 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-08 14:34:57.567 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.567 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.573 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-08 14:34:57.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.580 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.586 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.586 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-08 14:34:57.588 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.589 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-08 14:34:57.589 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.589 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-08 14:34:57.589 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.589 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.594 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.594 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-08 14:34:57.596 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 14:34:57.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.606 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-08 14:34:57.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-08 14:34:57.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-08 14:34:57.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-08 14:34:57.609 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-08 14:34:57.609 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 14:34:57.615 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.615 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-08 14:34:57.617 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 14:34:57.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 14:34:57.712 +08:00 [DBG] =========Yi-SQL耗时9.7984毫秒=====
2024-04-08 14:34:57.726 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 14:34:57.727 +08:00 [DBG] =========Yi-SQL耗时1.2922毫秒=====
2024-04-08 14:34:57.730 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 14:34:57.732 +08:00 [DBG] =========Yi-SQL耗时1.6127毫秒=====
2024-04-08 14:34:57.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 14:34:57.740 +08:00 [DBG] =========Yi-SQL耗时4.6569毫秒=====
2024-04-08 14:34:57.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 14:34:57.744 +08:00 [DBG] =========Yi-SQL耗时1.322毫秒=====
2024-04-08 14:34:57.747 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 14:34:57.748 +08:00 [DBG] =========Yi-SQL耗时1.0866毫秒=====
2024-04-08 14:34:57.753 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 14:34:57.754 +08:00 [DBG] =========Yi-SQL耗时1.1862毫秒=====
2024-04-08 14:34:57.757 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "banner"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 14:34:57.758 +08:00 [DBG] =========Yi-SQL耗时1.4854毫秒=====
2024-04-08 14:34:57.760 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( "dicttype" = N'bbs_type_lable' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 14:34:57.760 +08:00 [DBG] =========Yi-SQL耗时0.4444毫秒=====
2024-04-08 14:34:57.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'BBS' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 14:34:57.763 +08:00 [DBG] =========Yi-SQL耗时0.4333毫秒=====
2024-04-08 14:34:57.766 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "bbsuserextrainfo"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-08 14:34:57.767 +08:00 [DBG] =========Yi-SQL耗时1.5446毫秒=====
2024-04-08 14:34:57.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "config"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 14:34:57.772 +08:00 [DBG] =========Yi-SQL耗时2.0075毫秒=====
2024-04-08 14:34:57.775 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "level"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-08 14:34:57.777 +08:00 [DBG] =========Yi-SQL耗时1.8777毫秒=====
2024-04-08 14:34:57.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-08 14:34:57.781 +08:00 [DBG] =========Yi-SQL耗时1.0101毫秒=====
2024-04-08 14:34:57.783 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "question"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-08 14:34:57.784 +08:00 [DBG] =========Yi-SQL耗时0.8837毫秒=====
2024-04-08 14:34:57.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "question"  
           ("id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp")
     VALUES
           (N'5f13bf00-62a1-9a96-5548-3a11ce979d82',N'OA',N'已解决',N'Bug',N'小',N'低',N'123',N'456',N'admin',CAST('2024-04-08 14:34:57.785' AS DATETIME),null,null,null,N'2f6cd189ce244b81aeb346d0b5a87adf') ;
===============================

2024-04-08 14:34:57.813 +08:00 [DBG] =========Yi-SQL耗时3.8938毫秒=====
2024-04-08 14:34:57.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "question"  
           ("id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp")
     VALUES
           (N'899a62f0-18f0-ce50-41ec-3a11ce979d96',N'SAP',N'已解决',N'Bug',N'小',N'低',N'123',N'456',N'admin',CAST('2024-04-08 14:34:57.813' AS DATETIME),null,null,null,N'ea2b9b7fb6a84a83aa7e4b3dff385b0c') ;
===============================

2024-04-08 14:34:57.816 +08:00 [DBG] =========Yi-SQL耗时0.5183毫秒=====
2024-04-08 14:34:57.829 +08:00 [DBG] 耗时-1934ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-08 14:34:57.888 +08:00 [DBG] 耗时-56ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-08 14:34:57.891 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-08 14:34:57.905 +08:00 [DBG] 耗时-13ms,已加载模块-Volo.Abp.AspNetCore
2024-04-08 14:34:57.910 +08:00 [DBG] 耗时-4ms,已加载模块-Volo.Abp.Quartz
2024-04-08 14:34:57.933 +08:00 [DBG] 耗时-22ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-08 14:34:57.935 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-08 14:34:58.188 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-08 14:34:58.267 +08:00 [DBG] 耗时-331ms,已加载模块-Yi.Abp.Web
2024-04-08 14:34:58.274 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-04-08 14:34:58.286 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","currentlevel","minexperience","name","nick","logo" FROM "level"  
===============================

2024-04-08 14:34:58.287 +08:00 [DBG] =========Yi-SQL耗时1.2628毫秒=====
2024-04-08 14:34:58.362 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-04-08 14:34:58.363 +08:00 [DBG] 耗时-95ms,已加载模块-Yi.Framework.Bbs.Domain
2024-04-08 14:34:58.363 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2461ms】==========
2024-04-08 14:34:58.450 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-08 14:34:58.450 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-08 14:34:58.450 +08:00 [INF] Hosting environment: Development
2024-04-08 14:34:58.450 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-08 14:35:08.357 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-08 14:35:08.379 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-08 14:35:08.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-08 14:35:08.482 +08:00 [DBG] =========Yi-SQL耗时0.9965毫秒=====
2024-04-08 14:35:08.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-08 14:35:08.490 +08:00 [DBG] =========Yi-SQL耗时0.6208毫秒=====
2024-04-08 14:35:08.523 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 14:35:08.546 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 164.8891ms
2024-04-08 14:35:08.547 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-08 14:36:20.133 +08:00 [INF] CORS policy execution successful.
2024-04-08 14:36:20.168 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-08 14:36:20.171 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-08 14:36:20.205 +08:00 [INF] CORS policy execution successful.
2024-04-08 14:36:20.206 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-08 14:36:20.273 +08:00 [INF] 2024/4/8 14:36:20：cc,_BBqEc-jCLgOwK3yDXs7Lw连接服务端success，当前已连接0个
2024-04-08 14:37:08.468 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application)'
2024-04-08 14:37:08.470 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-08 14:37:08.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"  WHERE "id" = N'5f13bf00-62a1-9a96-5548-3a11ce979d82'   
===============================

2024-04-08 14:37:08.531 +08:00 [DBG] =========Yi-SQL耗时1.8314毫秒=====
2024-04-08 14:37:08.538 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.QuestionDto'.
2024-04-08 14:37:08.539 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application) in 68.2298ms
2024-04-08 14:37:08.539 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application)'
2024-04-08 14:37:29.489 +08:00 [INF] CORS policy execution successful.
2024-04-08 14:37:29.491 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.DeleteAsync (Yi.Abp.Application)'
2024-04-08 14:37:29.494 +08:00 [INF] Route matched with {action = "Delete", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DeleteAsync(System.Collections.Generic.IEnumerable`1[System.Guid]) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-08 14:37:29.523 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM "question" WHERE "id" IN ('3fa85f64-5717-4562-b3fc-2c963f66afa6') 
===============================

2024-04-08 14:37:29.524 +08:00 [DBG] =========Yi-SQL耗时0.9907毫秒=====
2024-04-08 14:37:29.529 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.DeleteAsync (Yi.Abp.Application) in 35.1413ms
2024-04-08 14:37:29.529 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.DeleteAsync (Yi.Abp.Application)'
2024-04-08 14:37:43.657 +08:00 [INF] CORS policy execution successful.
2024-04-08 14:37:43.658 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.DeleteAsync (Yi.Abp.Application)'
2024-04-08 14:37:43.658 +08:00 [INF] Route matched with {action = "Delete", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DeleteAsync(System.Collections.Generic.IEnumerable`1[System.Guid]) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-08 14:37:43.660 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM "question" WHERE "id" IN ('5f13bf00-62a1-9a96-5548-3a11ce979d82') 
===============================

2024-04-08 14:37:43.664 +08:00 [DBG] =========Yi-SQL耗时3.5255毫秒=====
2024-04-08 14:37:43.671 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.DeleteAsync (Yi.Abp.Application) in 12.7623ms
2024-04-08 14:37:43.671 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.DeleteAsync (Yi.Abp.Application)'
2024-04-08 14:37:57.585 +08:00 [INF] CORS policy execution successful.
2024-04-08 14:37:57.586 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.DeleteAsync (Yi.Abp.Application)'
2024-04-08 14:37:57.586 +08:00 [INF] Route matched with {action = "Delete", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DeleteAsync(System.Collections.Generic.IEnumerable`1[System.Guid]) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-08 14:37:57.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM "question" WHERE "id" IN ('5f13bf00-62a1-9a96-5548-3a11ce979d82') 
===============================

2024-04-08 14:37:57.588 +08:00 [DBG] =========Yi-SQL耗时0.6937毫秒=====
2024-04-08 14:37:57.592 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.DeleteAsync (Yi.Abp.Application) in 5.2375ms
2024-04-08 14:37:57.592 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.DeleteAsync (Yi.Abp.Application)'
2024-04-08 14:38:15.202 +08:00 [INF] CORS policy execution successful.
2024-04-08 14:38:15.202 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.CreateAsync (Yi.Abp.Application)'
2024-04-08 14:38:15.205 +08:00 [INF] Route matched with {action = "Create", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto] CreateAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionCreateUpdateDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-08 14:38:15.246 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "question"  
           ("id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp")
     VALUES
           (N'285a0325-d736-5ee4-f9c1-3a11ce9aa0cd',N'string',N'string',N'string',N'string',N'string',N'string',N'string',N'string',CAST('2024-04-08 14:38:15.242' AS DATETIME),null,null,null,N'94c7b84a91e94bb194ef67710233253a') ;
===============================

2024-04-08 14:38:15.247 +08:00 [DBG] =========Yi-SQL耗时1.0465毫秒=====
2024-04-08 14:38:15.251 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.QuestionDto'.
2024-04-08 14:38:15.251 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.CreateAsync (Yi.Abp.Application) in 46.4111ms
2024-04-08 14:38:15.251 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.CreateAsync (Yi.Abp.Application)'
2024-04-08 14:38:41.734 +08:00 [INF] CORS policy execution successful.
2024-04-08 14:38:41.735 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.DeleteAsync (Yi.Abp.Application)'
2024-04-08 14:38:41.735 +08:00 [INF] Route matched with {action = "Delete", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DeleteAsync(System.Collections.Generic.IEnumerable`1[System.Guid]) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-08 14:38:41.739 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM "question" WHERE "id" IN ('3fa85f64-5717-4562-b3fc-2c963f66afa6') 
===============================

2024-04-08 14:38:41.742 +08:00 [DBG] =========Yi-SQL耗时3.078毫秒=====
2024-04-08 14:38:41.749 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.DeleteAsync (Yi.Abp.Application) in 14.0387ms
2024-04-08 14:38:41.750 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.DeleteAsync (Yi.Abp.Application)'
2024-04-08 14:39:12.669 +08:00 [INF] CORS policy execution successful.
2024-04-08 14:39:12.670 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.DeleteAsync (Yi.Abp.Application)'
2024-04-08 14:39:12.670 +08:00 [INF] Route matched with {action = "Delete", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DeleteAsync(System.Collections.Generic.IEnumerable`1[System.Guid]) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-08 14:39:12.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM "question" WHERE "id" IN ('3fa85f64-5717-4562-b3fc-2c963f66afa6') 
===============================

2024-04-08 14:39:12.673 +08:00 [DBG] =========Yi-SQL耗时1.0577毫秒=====
2024-04-08 14:39:12.678 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.DeleteAsync (Yi.Abp.Application) in 7.211ms
2024-04-08 14:39:12.678 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.DeleteAsync (Yi.Abp.Application)'
2024-04-08 14:39:20.694 +08:00 [INF] CORS policy execution successful.
2024-04-08 14:39:20.695 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.DeleteAsync (Yi.Abp.Application)'
2024-04-08 14:39:20.695 +08:00 [INF] Route matched with {action = "Delete", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DeleteAsync(System.Collections.Generic.IEnumerable`1[System.Guid]) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-08 14:39:20.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM "question" WHERE "id" IN ('285a0325-d736-5ee4-f9c1-3a11ce9aa0cd') 
===============================

2024-04-08 14:39:20.697 +08:00 [DBG] =========Yi-SQL耗时0.9094毫秒=====
2024-04-08 14:39:20.700 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.DeleteAsync (Yi.Abp.Application) in 4.5167ms
2024-04-08 14:39:20.700 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.DeleteAsync (Yi.Abp.Application)'
2024-04-08 14:43:51.660 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-08 14:43:51.663 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature Void GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-08 14:43:51.667 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 3.6027ms
2024-04-08 14:43:51.667 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-08 14:47:13.468 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-08 14:47:13.472 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-08 14:47:14.956 +08:00 [INF] CORS policy execution successful.
2024-04-08 14:47:14.960 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-08 14:47:14.960 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-08 14:47:14.993 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 14:47:14.996 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 14:47:15.079 +08:00 [INF] CORS policy execution successful.
2024-04-08 14:47:15.081 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-08 14:47:15.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 14:47:15.166 +08:00 [INF] 2024/4/8 14:47:15：cc,rip9sC09Q9OTM63jbyLG5g连接服务端success，当前已连接0个
2024-04-08 14:47:15.245 +08:00 [DBG] =========Yi-SQL耗时92.9084毫秒=====
2024-04-08 14:47:15.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-08 14:47:15.335 +08:00 [DBG] =========Yi-SQL耗时15.7973毫秒=====
2024-04-08 14:47:15.405 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-08 14:47:15.406 +08:00 [DBG] =========Yi-SQL耗时1.7087毫秒=====
2024-04-08 14:47:15.496 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-08 14:47:15.514 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 518.2868ms
2024-04-08 14:47:15.514 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 14:47:15.556 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 14:47:15.558 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 14:47:15.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 14:47:15.563 +08:00 [DBG] =========Yi-SQL耗时1.0188毫秒=====
2024-04-08 14:47:15.565 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-08 14:47:15.565 +08:00 [DBG] =========Yi-SQL耗时0.2994毫秒=====
2024-04-08 14:47:15.566 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-08 14:47:15.566 +08:00 [DBG] =========Yi-SQL耗时0.2878毫秒=====
2024-04-08 14:47:15.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 14:47:15.569 +08:00 [DBG] =========Yi-SQL耗时1.4606毫秒=====
2024-04-08 14:47:15.601 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 14:47:15.606 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 47.8637ms
2024-04-08 14:47:15.606 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 14:47:15.772 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 14:47:15.773 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-08 14:47:15.776 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 14:47:15.778 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-08 14:47:15.792 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 14:47:15.795 +08:00 [DBG] =========Yi-SQL耗时3.6044毫秒=====
2024-04-08 14:47:15.807 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 14:47:15.813 +08:00 [DBG] =========Yi-SQL耗时5.2494毫秒=====
2024-04-08 14:47:15.814 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 14:47:15.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 14:47:15.816 +08:00 [DBG] =========Yi-SQL耗时1.5266毫秒=====
2024-04-08 14:47:15.818 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 41.762ms
2024-04-08 14:47:15.818 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 14:47:15.820 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 14:47:15.823 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 44.48ms
2024-04-08 14:47:15.823 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-08 14:48:36.362 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 14:48:36.362 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 14:48:36.363 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 14:48:36.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 14:48:36.368 +08:00 [DBG] =========Yi-SQL耗时2.4886毫秒=====
2024-04-08 14:48:36.409 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 14:48:36.409 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 14:48:36.410 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 46.7365ms
2024-04-08 14:48:36.410 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 14:48:36.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 14:48:36.430 +08:00 [DBG] =========Yi-SQL耗时2.2162毫秒=====
2024-04-08 14:48:36.493 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 14:48:36.528 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 118.6939ms
2024-04-08 14:48:36.528 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 14:49:38.742 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-08 14:49:38.744 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-08 14:49:39.881 +08:00 [INF] CORS policy execution successful.
2024-04-08 14:49:39.886 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-08 14:49:39.887 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-08 14:49:39.892 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 14:49:39.893 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 14:49:39.915 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-08 14:49:39.915 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 22.4032ms
2024-04-08 14:49:39.915 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 14:49:40.021 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 14:49:40.021 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 14:49:40.024 +08:00 [INF] CORS policy execution successful.
2024-04-08 14:49:40.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 14:49:40.026 +08:00 [DBG] =========Yi-SQL耗时1.3476毫秒=====
2024-04-08 14:49:40.031 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-08 14:49:40.032 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-08 14:49:40.033 +08:00 [DBG] =========Yi-SQL耗时0.6944毫秒=====
2024-04-08 14:49:40.034 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-08 14:49:40.034 +08:00 [DBG] =========Yi-SQL耗时0.738毫秒=====
2024-04-08 14:49:40.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 14:49:40.036 +08:00 [DBG] =========Yi-SQL耗时0.6774毫秒=====
2024-04-08 14:49:40.037 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 14:49:40.038 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 16.6419ms
2024-04-08 14:49:40.038 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 14:49:40.122 +08:00 [INF] 2024/4/8 14:49:40：cc,_qxu9lyOLdGXLA27e-NAAw连接服务端success，当前已连接0个
2024-04-08 14:49:40.417 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 14:49:40.417 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 14:49:40.417 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 14:49:40.418 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 14:49:40.418 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 14:49:40.418 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 14:49:40.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 14:49:40.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 14:49:40.420 +08:00 [DBG] =========Yi-SQL耗时0.9677毫秒=====
2024-04-08 14:49:40.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 14:49:40.425 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 14:49:40.425 +08:00 [DBG] =========Yi-SQL耗时1.7823毫秒=====
2024-04-08 14:49:40.426 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 8.1092ms
2024-04-08 14:49:40.426 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 14:49:40.486 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 14:49:40.495 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 76.6983ms
2024-04-08 14:49:40.495 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 14:49:40.503 +08:00 [DBG] =========Yi-SQL耗时83.2781毫秒=====
2024-04-08 14:49:40.505 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 14:49:40.505 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 87.6216ms
2024-04-08 14:49:40.505 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 14:49:48.510 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 14:49:48.510 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 14:49:48.510 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 14:49:48.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 14:49:48.513 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 14:49:48.514 +08:00 [DBG] =========Yi-SQL耗时1.0389毫秒=====
2024-04-08 14:49:48.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 14:49:48.526 +08:00 [DBG] =========Yi-SQL耗时1.3755毫秒=====
2024-04-08 14:49:48.532 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 14:49:48.536 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 14:49:48.538 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 27.7291ms
2024-04-08 14:49:48.538 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 14:49:48.544 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 31.1126ms
2024-04-08 14:49:48.545 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 14:50:03.014 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 14:50:03.015 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 14:50:03.015 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 14:50:03.015 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 14:50:03.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 14:50:03.017 +08:00 [DBG] =========Yi-SQL耗时1.063毫秒=====
2024-04-08 14:50:03.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 14:50:03.019 +08:00 [DBG] =========Yi-SQL耗时1.1968毫秒=====
2024-04-08 14:50:03.028 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 14:50:03.028 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 12.9515ms
2024-04-08 14:50:03.028 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 14:50:03.039 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 14:50:03.043 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 28.1951ms
2024-04-08 14:50:03.043 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 14:50:26.875 +08:00 [INF] CORS policy execution successful.
2024-04-08 14:50:26.877 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 14:50:26.879 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 14:50:26.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 14:50:26.904 +08:00 [DBG] =========Yi-SQL耗时1.0421毫秒=====
2024-04-08 14:50:26.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-04-08 12:22:18.071' AS DATETIME),"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-08 14:50:26.925' AS DATETIME),"ordernum"=100,"state"=1,"menuname"=N'问题列表',"menutype"=1,"permissioncode"=null,"parentid"=N'7e4f4c22-9927-da88-9330-3a11cdb2f701',"menuicon"=N'list',"router"=N'question',"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=N'/question/list/index',"query"=null  WHERE "id"=N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'
===============================

2024-04-08 14:50:26.941 +08:00 [DBG] =========Yi-SQL耗时3.9899毫秒=====
2024-04-08 14:50:26.942 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 14:50:26.943 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 63.3573ms
2024-04-08 14:50:26.943 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 14:50:26.980 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 14:50:26.980 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 14:50:26.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 14:50:26.986 +08:00 [DBG] =========Yi-SQL耗时1.8835毫秒=====
2024-04-08 14:50:27.026 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 14:50:27.033 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 52.0384ms
2024-04-08 14:50:27.033 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 14:55:07.538 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetExportExcelAsync (Yi.Abp.Application)'
2024-04-08 14:55:07.541 +08:00 [INF] Route matched with {action = "GetExportExcel", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetExportExcelAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-08 14:55:07.593 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-08 14:55:07.657 +08:00 [DBG] =========Yi-SQL耗时63.6124毫秒=====
2024-04-08 14:55:07.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10000 offset 0
===============================

2024-04-08 14:55:07.660 +08:00 [DBG] =========Yi-SQL耗时2.2488毫秒=====
2024-04-08 14:55:07.739 +08:00 [INF] Executing PhysicalFileResult, sending file '/wwwroot/temp/QuestionAggregateRoot_2024-04-08_14-55-07_05e6f5eb-1824-4f12-852f-8250c30351a6.xlsx' with download name '' ...
2024-04-08 14:55:07.759 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetExportExcelAsync (Yi.Abp.Application) in 218.8023ms
2024-04-08 14:55:07.760 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetExportExcelAsync (Yi.Abp.Application)'
2024-04-08 14:58:59.448 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-08 14:58:59.448 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-08 14:58:59.453 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-08 14:58:59.454 +08:00 [DBG] =========Yi-SQL耗时1.413毫秒=====
2024-04-08 14:58:59.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-08 14:58:59.461 +08:00 [DBG] =========Yi-SQL耗时0.928毫秒=====
2024-04-08 14:58:59.464 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 14:58:59.465 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 16.7014ms
2024-04-08 14:58:59.465 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-08 15:00:00.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-04-08 15:00:00.038 +08:00 [DBG] =========Yi-SQL耗时8.3832毫秒=====
2024-04-08 15:00:00.369 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an unhandled Exception: 
System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
2024-04-08 15:00:00.371 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an exception.
Quartz.SchedulerException: Job threw an unhandled exception.
 ---> System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
   --- End of inner exception stack trace --- [See nested exception: System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)]
2024-04-08 15:16:08.011 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-08 15:16:08.030 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-08 15:16:13.389 +08:00 [INF] Loaded ABP modules:
2024-04-08 15:16:13.390 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-08 15:16:13.390 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-08 15:16:13.390 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-08 15:16:13.390 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-08 15:16:13.390 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-08 15:16:13.390 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-08 15:16:13.390 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-08 15:16:13.390 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-08 15:16:13.390 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-08 15:16:13.390 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-08 15:16:13.390 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-08 15:16:13.390 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-08 15:16:13.390 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-08 15:16:13.390 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-08 15:16:13.390 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-08 15:16:13.390 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-08 15:16:13.390 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-08 15:16:13.390 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-08 15:16:13.390 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-08 15:16:13.390 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-08 15:16:13.390 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-08 15:16:13.390 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-04-08 15:16:13.390 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-08 15:16:13.390 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-08 15:16:13.390 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-08 15:16:13.390 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-08 15:16:13.390 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-08 15:16:13.390 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-08 15:16:13.390 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-08 15:16:13.390 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-08 15:16:13.390 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-08 15:16:13.390 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-08 15:16:13.390 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-08 15:16:13.390 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-08 15:16:13.390 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-08 15:16:13.390 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-08 15:16:13.390 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-08 15:16:13.390 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-08 15:16:13.390 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-08 15:16:13.390 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-08 15:16:13.390 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-08 15:16:13.390 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-08 15:16:13.390 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-08 15:16:13.390 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-08 15:16:13.390 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-08 15:16:13.390 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-08 15:16:13.390 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-08 15:16:13.390 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-08 15:16:13.390 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-08 15:16:13.390 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-08 15:16:13.390 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-08 15:16:13.390 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-04-08 15:16:13.390 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-08 15:16:13.390 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-08 15:16:13.390 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-08 15:16:13.390 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-04-08 15:16:13.390 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-08 15:16:13.390 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-08 15:16:13.390 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-08 15:16:13.390 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-08 15:16:13.390 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-08 15:16:13.390 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-08 15:16:13.390 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-08 15:16:13.390 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-08 15:16:13.390 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-04-08 15:16:13.390 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-08 15:16:13.390 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-08 15:16:13.390 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-08 15:16:13.390 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-08 15:16:13.390 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-08 15:16:13.390 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-08 15:16:13.390 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-08 15:16:13.390 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-08 15:16:13.390 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-04-08 15:16:13.390 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-08 15:16:13.390 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-08 15:16:13.390 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-08 15:16:13.390 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-08 15:16:13.390 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-08 15:16:13.390 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-08 15:16:13.390 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-08 15:16:13.390 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-08 15:16:13.390 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-08 15:16:13.390 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-08 15:16:13.390 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-08 15:16:13.390 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-08 15:16:13.390 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-08 15:16:13.390 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-08 15:16:13.390 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-08 15:16:13.390 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-08 15:16:13.390 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-08 15:16:13.390 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-08 15:16:13.390 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-08 15:16:13.398 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-08 15:16:13.404 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-08 15:16:14.066 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.074 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.101 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.107 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-08 15:16:14.112 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.129 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.129 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-08 15:16:14.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.153 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.153 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-08 15:16:14.155 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-08 15:16:14.158 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.158 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-08 15:16:14.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-08 15:16:14.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-08 15:16:14.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-08 15:16:14.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-08 15:16:14.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-08 15:16:14.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-08 15:16:14.160 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-08 15:16:14.160 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-08 15:16:14.160 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-08 15:16:14.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.177 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.178 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-08 15:16:14.187 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-08 15:16:14.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-08 15:16:14.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-08 15:16:14.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-08 15:16:14.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-08 15:16:14.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-08 15:16:14.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-08 15:16:14.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.194 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-08 15:16:14.196 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.202 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.207 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.207 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-08 15:16:14.209 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-08 15:16:14.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-08 15:16:14.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-08 15:16:14.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-08 15:16:14.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-08 15:16:14.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-08 15:16:14.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-08 15:16:14.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-08 15:16:14.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-08 15:16:14.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-08 15:16:14.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-08 15:16:14.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-08 15:16:14.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-08 15:16:14.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-08 15:16:14.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.218 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-08 15:16:14.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.226 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.227 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.234 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.234 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-08 15:16:14.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-08 15:16:14.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-08 15:16:14.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-08 15:16:14.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-08 15:16:14.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-08 15:16:14.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.238 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-08 15:16:14.238 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.238 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-08 15:16:14.238 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.238 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-08 15:16:14.238 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.238 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-08 15:16:14.238 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.238 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-08 15:16:14.238 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.238 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-08 15:16:14.238 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.238 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.244 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-08 15:16:14.246 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-08 15:16:14.260 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-08 15:16:14.261 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-08 15:16:14.261 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-08 15:16:14.261 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-08 15:16:14.261 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-08 15:16:14.262 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-08 15:16:14.262 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-08 15:16:14.262 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.268 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-08 15:16:14.270 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.275 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.282 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-08 15:16:14.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-08 15:16:14.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-08 15:16:14.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-08 15:16:14.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.290 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-08 15:16:14.293 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.300 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.301 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.307 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.307 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-08 15:16:14.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-08 15:16:14.311 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.311 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-08 15:16:14.311 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.311 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-08 15:16:14.311 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.311 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-08 15:16:14.311 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.311 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-08 15:16:14.311 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.311 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-08 15:16:14.311 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.312 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 15:16:14.322 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.323 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-08 15:16:14.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.336 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.337 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.338 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-08 15:16:14.347 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-08 15:16:14.347 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-08 15:16:14.347 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-08 15:16:14.348 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.348 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-08 15:16:14.348 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.348 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-08 15:16:14.348 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.348 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-08 15:16:14.348 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.348 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-08 15:16:14.348 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.348 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-08 15:16:14.348 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.348 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-08 15:16:14.348 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.348 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-08 15:16:14.349 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.349 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-08 15:16:14.349 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.349 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-08 15:16:14.349 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.349 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-08 15:16:14.349 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.349 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-08 15:16:14.349 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.349 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-08 15:16:14.349 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.349 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-08 15:16:14.349 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.349 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-08 15:16:14.349 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.349 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-08 15:16:14.350 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.350 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.358 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.358 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-08 15:16:14.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.366 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.368 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.374 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.375 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-08 15:16:14.377 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-08 15:16:14.377 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-08 15:16:14.377 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-08 15:16:14.377 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.382 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.383 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-08 15:16:14.385 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.391 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.391 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.396 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.396 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-08 15:16:14.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-08 15:16:14.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-08 15:16:14.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-08 15:16:14.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-08 15:16:14.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-08 15:16:14.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-08 15:16:14.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-08 15:16:14.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-08 15:16:14.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-08 15:16:14.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-08 15:16:14.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-08 15:16:14.400 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.400 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-08 15:16:14.400 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.400 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.406 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.406 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-08 15:16:14.408 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.413 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.413 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-08 15:16:14.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-08 15:16:14.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-08 15:16:14.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-08 15:16:14.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-08 15:16:14.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-08 15:16:14.429 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.436 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.437 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.442 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.443 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-08 15:16:14.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-08 15:16:14.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-08 15:16:14.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-08 15:16:14.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-08 15:16:14.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-08 15:16:14.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-08 15:16:14.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-08 15:16:14.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-08 15:16:14.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-08 15:16:14.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-08 15:16:14.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-08 15:16:14.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-08 15:16:14.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-08 15:16:14.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.453 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.453 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-08 15:16:14.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.458 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-08 15:16:14.467 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.467 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-08 15:16:14.467 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.468 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-08 15:16:14.468 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.468 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.473 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.473 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-08 15:16:14.475 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.480 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-08 15:16:14.490 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.490 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-08 15:16:14.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-08 15:16:14.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-08 15:16:14.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-08 15:16:14.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-08 15:16:14.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-08 15:16:14.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-08 15:16:14.492 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-08 15:16:14.492 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-08 15:16:14.492 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-08 15:16:14.492 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-08 15:16:14.492 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-08 15:16:14.492 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-08 15:16:14.492 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-08 15:16:14.492 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-08 15:16:14.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-08 15:16:14.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-08 15:16:14.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-08 15:16:14.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-08 15:16:14.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-08 15:16:14.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-08 15:16:14.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-08 15:16:14.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-08 15:16:14.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-08 15:16:14.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 15:16:14.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.501 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-08 15:16:14.504 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.507 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.508 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.508 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.514 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-08 15:16:14.516 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.517 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-08 15:16:14.517 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.517 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-08 15:16:14.518 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.518 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-08 15:16:14.518 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.518 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-08 15:16:14.518 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.518 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.523 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.523 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-08 15:16:14.525 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.536 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.536 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-08 15:16:14.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-08 15:16:14.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-08 15:16:14.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-08 15:16:14.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-08 15:16:14.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.544 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-08 15:16:14.546 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.551 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.553 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.553 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.559 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-08 15:16:14.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-08 15:16:14.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-08 15:16:14.570 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.581 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.581 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-08 15:16:14.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.589 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.589 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-08 15:16:14.591 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.595 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.596 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-08 15:16:14.604 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.604 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-04-08 15:16:14.604 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.604 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-04-08 15:16:14.604 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-04-08 15:16:14.605 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-04-08 15:16:14.605 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-04-08 15:16:14.605 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-04-08 15:16:14.605 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-04-08 15:16:14.605 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-04-08 15:16:14.605 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-04-08 15:16:14.605 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 15:16:14.607 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.607 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.612 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-08 15:16:14.614 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.618 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.900 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.906 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.906 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-08 15:16:14.908 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.909 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.914 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.914 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-08 15:16:14.915 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.919 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.920 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.920 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-08 15:16:14.928 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-04-08 15:16:14.928 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-04-08 15:16:14.928 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-04-08 15:16:14.928 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-04-08 15:16:14.929 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.929 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-04-08 15:16:14.929 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.929 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-04-08 15:16:14.929 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.929 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-08 15:16:14.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.942 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.942 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.948 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-08 15:16:14.950 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-04-08 15:16:14.951 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-04-08 15:16:14.951 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-04-08 15:16:14.951 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 15:16:14.952 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.952 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.961 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-08 15:16:14.963 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.966 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.968 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.968 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.974 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.974 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-08 15:16:14.976 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.976 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-04-08 15:16:14.977 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-04-08 15:16:14.977 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 15:16:14.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.978 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-08 15:16:14.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:14.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:14.997 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:14.997 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-08 15:16:15.000 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.000 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-04-08 15:16:15.001 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 15:16:15.002 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.002 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 15:16:15.003 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.003 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 15:16:15.004 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.010 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.010 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-08 15:16:15.012 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:15.017 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.023 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-08 15:16:15.025 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.025 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.030 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-08 15:16:15.032 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:15.039 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.044 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.044 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-08 15:16:15.046 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.046 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-04-08 15:16:15.046 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.046 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-04-08 15:16:15.047 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.047 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 15:16:15.047 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.048 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 15:16:15.048 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.048 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-08 15:16:15.057 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:15.064 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.070 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.070 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-08 15:16:15.072 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-04-08 15:16:15.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-04-08 15:16:15.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-04-08 15:16:15.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 15:16:15.074 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.074 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 15:16:15.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 15:16:15.076 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.076 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.082 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.082 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-08 15:16:15.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:15.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.093 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.093 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-08 15:16:15.095 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.101 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-08 15:16:15.103 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.106 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:15.107 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.108 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.113 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-08 15:16:15.115 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.115 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-04-08 15:16:15.115 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.115 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-08 15:16:15.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.126 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:15.127 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.128 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-08 15:16:15.136 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.141 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-08 15:16:15.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:15.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.157 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-08 15:16:15.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-04-08 15:16:15.160 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.165 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.165 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-08 15:16:15.167 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:15.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.178 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.178 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-08 15:16:15.180 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-04-08 15:16:15.180 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-04-08 15:16:15.180 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-04-08 15:16:15.180 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-04-08 15:16:15.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-04-08 15:16:15.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-04-08 15:16:15.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-04-08 15:16:15.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-04-08 15:16:15.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.187 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-08 15:16:15.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.192 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:15.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.193 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-08 15:16:15.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-04-08 15:16:15.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-04-08 15:16:15.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-04-08 15:16:15.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-04-08 15:16:15.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.207 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.207 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-08 15:16:15.209 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.213 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:15.214 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.220 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-08 15:16:15.223 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 15:16:15.224 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.224 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 15:16:15.225 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.230 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-08 15:16:15.232 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.238 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:15.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.246 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.246 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-08 15:16:15.248 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.249 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 15:16:15.250 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.250 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 15:16:15.251 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-08 15:16:15.261 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:15.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.273 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.273 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-08 15:16:15.275 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.275 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 15:16:15.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 15:16:15.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.282 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-08 15:16:15.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.289 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:15.290 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.290 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-08 15:16:15.297 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.297 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-08 15:16:15.298 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.299 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.305 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.305 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-08 15:16:15.307 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.311 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:15.313 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.319 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-08 15:16:15.321 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.323 +08:00 [DBG] 
==========Yi-SQL执行:==========
alter table "question" ALTER COLUMN "description"  type text   
===============================

2024-04-08 15:16:15.327 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.327 +08:00 [DBG] 
==========Yi-SQL执行:==========
alter table "question" alter "description"  SET NOT NULL 
===============================

2024-04-08 15:16:15.327 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.327 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."id" is '主键'
===============================

2024-04-08 15:16:15.327 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.328 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."project" is '项目'
===============================

2024-04-08 15:16:15.328 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.328 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."status" is '状态'
===============================

2024-04-08 15:16:15.328 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.328 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."category" is '类别'
===============================

2024-04-08 15:16:15.328 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.328 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."impact" is '影响'
===============================

2024-04-08 15:16:15.328 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.328 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."priority" is '优先级'
===============================

2024-04-08 15:16:15.328 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.328 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."title" is '标题'
===============================

2024-04-08 15:16:15.328 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."description" is '详情'
===============================

2024-04-08 15:16:15.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."solve_user" is '对应人'
===============================

2024-04-08 15:16:15.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."creationtime" is '创建时间'
===============================

2024-04-08 15:16:15.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.340 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-08 15:16:15.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.349 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:15.352 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.358 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.358 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-08 15:16:15.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-08 15:16:15.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-08 15:16:15.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-08 15:16:15.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-08 15:16:15.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-08 15:16:15.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.362 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.368 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-08 15:16:15.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.374 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:15.376 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-08 15:16:15.384 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-08 15:16:15.385 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-08 15:16:15.385 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.391 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.391 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-08 15:16:15.393 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-08 15:16:15.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.405 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.406 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-08 15:16:15.408 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-08 15:16:15.408 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-08 15:16:15.408 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-08 15:16:15.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-08 15:16:15.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-08 15:16:15.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-08 15:16:15.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-08 15:16:15.523 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 15:16:15.533 +08:00 [DBG] =========Yi-SQL耗时11.277毫秒=====
2024-04-08 15:16:15.547 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 15:16:15.548 +08:00 [DBG] =========Yi-SQL耗时1.3421毫秒=====
2024-04-08 15:16:15.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 15:16:15.553 +08:00 [DBG] =========Yi-SQL耗时1.5609毫秒=====
2024-04-08 15:16:15.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 15:16:15.560 +08:00 [DBG] =========Yi-SQL耗时2.199毫秒=====
2024-04-08 15:16:15.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 15:16:15.564 +08:00 [DBG] =========Yi-SQL耗时1.2095毫秒=====
2024-04-08 15:16:15.567 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 15:16:15.568 +08:00 [DBG] =========Yi-SQL耗时1.1625毫秒=====
2024-04-08 15:16:15.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 15:16:15.578 +08:00 [DBG] =========Yi-SQL耗时3.1484毫秒=====
2024-04-08 15:16:15.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "banner"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 15:16:15.582 +08:00 [DBG] =========Yi-SQL耗时1.2575毫秒=====
2024-04-08 15:16:15.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( "dicttype" = N'bbs_type_lable' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 15:16:15.584 +08:00 [DBG] =========Yi-SQL耗时0.6272毫秒=====
2024-04-08 15:16:15.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'BBS' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 15:16:15.587 +08:00 [DBG] =========Yi-SQL耗时0.5632毫秒=====
2024-04-08 15:16:15.589 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "bbsuserextrainfo"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-08 15:16:15.591 +08:00 [DBG] =========Yi-SQL耗时1.2363毫秒=====
2024-04-08 15:16:15.593 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "config"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-08 15:16:15.594 +08:00 [DBG] =========Yi-SQL耗时0.8511毫秒=====
2024-04-08 15:16:15.597 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "level"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-08 15:16:15.598 +08:00 [DBG] =========Yi-SQL耗时1.0229毫秒=====
2024-04-08 15:16:15.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-08 15:16:15.603 +08:00 [DBG] =========Yi-SQL耗时1.8127毫秒=====
2024-04-08 15:16:15.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "question"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-08 15:16:15.607 +08:00 [DBG] =========Yi-SQL耗时0.8158毫秒=====
2024-04-08 15:16:15.615 +08:00 [DBG] 耗时-2216ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-08 15:16:15.618 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-08 15:16:15.682 +08:00 [DBG] 耗时-63ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-08 15:16:15.685 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-08 15:16:15.700 +08:00 [DBG] 耗时-14ms,已加载模块-Volo.Abp.AspNetCore
2024-04-08 15:16:15.706 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-04-08 15:16:15.727 +08:00 [DBG] 耗时-21ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-08 15:16:15.730 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-08 15:16:15.978 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-08 15:16:16.058 +08:00 [DBG] 耗时-327ms,已加载模块-Yi.Abp.Web
2024-04-08 15:16:16.065 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-04-08 15:16:16.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","currentlevel","minexperience","name","nick","logo" FROM "level"  
===============================

2024-04-08 15:16:16.079 +08:00 [DBG] =========Yi-SQL耗时1.2204毫秒=====
2024-04-08 15:16:16.158 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-04-08 15:16:16.158 +08:00 [DBG] 耗时-99ms,已加载模块-Yi.Framework.Bbs.Domain
2024-04-08 15:16:16.158 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2752ms】==========
2024-04-08 15:16:16.241 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-08 15:16:16.241 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-08 15:16:16.241 +08:00 [INF] Hosting environment: Development
2024-04-08 15:16:16.241 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-08 15:16:41.638 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-08 15:16:41.661 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-08 15:16:41.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-08 15:16:41.770 +08:00 [DBG] =========Yi-SQL耗时1.1494毫秒=====
2024-04-08 15:16:41.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-08 15:16:41.779 +08:00 [DBG] =========Yi-SQL耗时1.1604毫秒=====
2024-04-08 15:16:41.815 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:16:41.841 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 176.9437ms
2024-04-08 15:16:41.842 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-08 15:17:39.181 +08:00 [INF] CORS policy execution successful.
2024-04-08 15:17:39.216 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-08 15:17:39.220 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-08 15:17:39.242 +08:00 [INF] CORS policy execution successful.
2024-04-08 15:17:39.244 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-08 15:17:39.323 +08:00 [INF] 2024/4/8 15:17:39：cc,4TmbhsNlHJwn0TpeLaUqOg连接服务端success，当前已连接0个
2024-04-08 15:23:38.262 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:23:38.274 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:23:38.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:23:38.383 +08:00 [DBG] =========Yi-SQL耗时61.6697毫秒=====
2024-04-08 15:23:38.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:23:38.390 +08:00 [DBG] =========Yi-SQL耗时1.8181毫秒=====
2024-04-08 15:23:38.408 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:23:38.412 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 138.526ms
2024-04-08 15:23:38.412 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:23:43.146 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:23:43.150 +08:00 [INF] Route matched with {action = "Get", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:23:43.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"  WHERE "id" = N'01f02fdf-37f3-128a-97c9-3a119a976121'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:23:43.241 +08:00 [DBG] =========Yi-SQL耗时2.8542毫秒=====
2024-04-08 15:23:43.252 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto'.
2024-04-08 15:23:43.254 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application) in 103.8769ms
2024-04-08 15:23:43.254 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:23:47.531 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:23:47.531 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:23:47.535 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:23:47.536 +08:00 [DBG] =========Yi-SQL耗时1.2373毫秒=====
2024-04-08 15:23:47.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 10
===============================

2024-04-08 15:23:47.541 +08:00 [DBG] =========Yi-SQL耗时1.0441毫秒=====
2024-04-08 15:23:47.542 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:23:47.542 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 11.1534ms
2024-04-08 15:23:47.542 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:23:49.290 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:23:49.291 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:23:49.293 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:23:49.293 +08:00 [DBG] =========Yi-SQL耗时0.722毫秒=====
2024-04-08 15:23:49.296 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:23:49.296 +08:00 [DBG] =========Yi-SQL耗时0.8485毫秒=====
2024-04-08 15:23:49.299 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:23:49.299 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 8.7968ms
2024-04-08 15:23:49.300 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:23:53.425 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:23:53.425 +08:00 [INF] Route matched with {action = "Get", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:23:53.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"  WHERE "id" = N'773f803e-4058-61d3-f7cf-3a119a976122'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:23:53.429 +08:00 [DBG] =========Yi-SQL耗时1.2489毫秒=====
2024-04-08 15:23:53.439 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto'.
2024-04-08 15:23:53.439 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application) in 13.661ms
2024-04-08 15:23:53.439 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:23:58.807 +08:00 [INF] CORS policy execution successful.
2024-04-08 15:24:12.543 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:24:12.543 +08:00 [INF] Route matched with {action = "Get", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:24:12.546 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"  WHERE "id" = N'3b618072-a36a-dcc8-c0f3-3a119a976122'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:24:12.547 +08:00 [DBG] =========Yi-SQL耗时0.7993毫秒=====
2024-04-08 15:24:12.550 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto'.
2024-04-08 15:24:12.551 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application) in 7.7456ms
2024-04-08 15:24:12.551 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:24:18.488 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:24:18.488 +08:00 [INF] Route matched with {action = "Get", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:24:18.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"  WHERE "id" = N'01f02fdf-37f3-128a-97c9-3a119a976121'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:24:18.492 +08:00 [DBG] =========Yi-SQL耗时0.8544毫秒=====
2024-04-08 15:24:18.496 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto'.
2024-04-08 15:24:18.496 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application) in 7.8774ms
2024-04-08 15:24:18.496 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:25:10.052 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:25:10.053 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 15:25:10.055 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-08 15:25:10.056 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 15:25:10.063 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:25:10.068 +08:00 [DBG] =========Yi-SQL耗时4.8566毫秒=====
2024-04-08 15:25:10.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:25:10.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:25:10.104 +08:00 [DBG] =========Yi-SQL耗时26.7712毫秒=====
2024-04-08 15:25:10.120 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:25:10.126 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 70.7238ms
2024-04-08 15:25:10.126 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:25:10.171 +08:00 [DBG] =========Yi-SQL耗时96.8393毫秒=====
2024-04-08 15:25:10.181 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:25:10.188 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 131.9701ms
2024-04-08 15:25:10.188 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 15:25:11.912 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:25:11.915 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-04-08 15:25:11.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "post"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:25:11.927 +08:00 [DBG] =========Yi-SQL耗时2.3047毫秒=====
2024-04-08 15:25:11.929 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:25:11.931 +08:00 [DBG] =========Yi-SQL耗时1.63毫秒=====
2024-04-08 15:25:11.939 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:25:11.943 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 27.5663ms
2024-04-08 15:25:11.943 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:25:15.024 +08:00 [INF] CORS policy execution successful.
2024-04-08 15:25:25.259 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:25:25.260 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:25:25.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 0 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:25:25.264 +08:00 [DBG] =========Yi-SQL耗时1.1803毫秒=====
2024-04-08 15:25:25.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 0 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:25:25.269 +08:00 [DBG] =========Yi-SQL耗时2.1408毫秒=====
2024-04-08 15:25:25.270 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:25:25.270 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 10.1111ms
2024-04-08 15:25:25.270 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:25:28.883 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:25:28.883 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:25:28.885 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:25:28.885 +08:00 [DBG] =========Yi-SQL耗时0.7119毫秒=====
2024-04-08 15:25:28.888 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:25:28.889 +08:00 [DBG] =========Yi-SQL耗时1.239毫秒=====
2024-04-08 15:25:28.892 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:25:28.892 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 8.7474ms
2024-04-08 15:25:28.892 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:25:29.635 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:25:29.636 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:25:29.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:25:29.639 +08:00 [DBG] =========Yi-SQL耗时0.8856毫秒=====
2024-04-08 15:25:29.644 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:25:29.645 +08:00 [DBG] =========Yi-SQL耗时1.2789毫秒=====
2024-04-08 15:25:29.647 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:25:29.647 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 11.2393ms
2024-04-08 15:25:29.647 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:05.494 +08:00 [INF] CORS policy execution successful.
2024-04-08 15:26:05.495 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:05.499 +08:00 [INF] Route matched with {action = "Update", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:26:05.548 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"  WHERE "id" = N'01f02fdf-37f3-128a-97c9-3a119a976121'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:26:05.549 +08:00 [DBG] =========Yi-SQL耗时0.9404毫秒=====
2024-04-08 15:26:05.592 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "dictionarytype"  SET
           "isdeleted"=0,"ordernum"=100,"state"=1,"dictname"=N'用户性别',"dicttype"=N'sys_question_status',"remark"=N'问题状态列表',"creationtime"=CAST('2024-03-29 12:14:27.105' AS DATETIME),"creatorid"=null,"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-08 15:26:05.576' AS DATETIME),"concurrencystamp"=N'7dc3e00bb3bd4149b3eca839cd51759b'  WHERE "id"=N'01f02fdf-37f3-128a-97c9-3a119a976121'
===============================

2024-04-08 15:26:05.597 +08:00 [DBG] =========Yi-SQL耗时4.6117毫秒=====
2024-04-08 15:26:05.598 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto'.
2024-04-08 15:26:05.598 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.UpdateAsync (Yi.Framework.Rbac.Application) in 99.5432ms
2024-04-08 15:26:05.598 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:05.617 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:05.618 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:26:05.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:26:05.621 +08:00 [DBG] =========Yi-SQL耗时1.1218毫秒=====
2024-04-08 15:26:05.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:26:05.624 +08:00 [DBG] =========Yi-SQL耗时0.5737毫秒=====
2024-04-08 15:26:05.628 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:26:05.628 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 10.4329ms
2024-04-08 15:26:05.628 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:09.149 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:09.149 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:26:09.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:26:09.153 +08:00 [DBG] =========Yi-SQL耗时1.0455毫秒=====
2024-04-08 15:26:09.156 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 10
===============================

2024-04-08 15:26:09.157 +08:00 [DBG] =========Yi-SQL耗时0.7526毫秒=====
2024-04-08 15:26:09.159 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:26:09.159 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 9.7279ms
2024-04-08 15:26:09.159 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:11.341 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:11.341 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:26:11.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:26:11.345 +08:00 [DBG] =========Yi-SQL耗时0.885毫秒=====
2024-04-08 15:26:11.348 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:26:11.348 +08:00 [DBG] =========Yi-SQL耗时0.6306毫秒=====
2024-04-08 15:26:11.352 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:26:11.352 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 10.3928ms
2024-04-08 15:26:11.352 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:20.436 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:20.436 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:26:20.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:26:20.439 +08:00 [DBG] =========Yi-SQL耗时0.7004毫秒=====
2024-04-08 15:26:20.442 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 10
===============================

2024-04-08 15:26:20.444 +08:00 [DBG] =========Yi-SQL耗时2.1456毫秒=====
2024-04-08 15:26:20.445 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:26:20.446 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 9.2882ms
2024-04-08 15:26:20.446 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:23.027 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:23.027 +08:00 [INF] Route matched with {action = "Get", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:26:23.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"  WHERE "id" = N'01f02fdf-37f3-128a-97c9-3a119a976121'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:26:23.031 +08:00 [DBG] =========Yi-SQL耗时0.9202毫秒=====
2024-04-08 15:26:23.035 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto'.
2024-04-08 15:26:23.035 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application) in 8.094ms
2024-04-08 15:26:23.035 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:30.513 +08:00 [INF] CORS policy execution successful.
2024-04-08 15:26:30.515 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:30.515 +08:00 [INF] Route matched with {action = "Update", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:26:30.520 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"  WHERE "id" = N'01f02fdf-37f3-128a-97c9-3a119a976121'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:26:30.521 +08:00 [DBG] =========Yi-SQL耗时0.9743毫秒=====
2024-04-08 15:26:30.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "dictionarytype"  SET
           "isdeleted"=0,"ordernum"=100,"state"=1,"dictname"=N'问题状态',"dicttype"=N'sys_question_status',"remark"=N'问题状态列表',"creationtime"=CAST('2024-03-29 12:14:27.105' AS DATETIME),"creatorid"=null,"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-08 15:26:30.525' AS DATETIME),"concurrencystamp"=N'7dc3e00bb3bd4149b3eca839cd51759b'  WHERE "id"=N'01f02fdf-37f3-128a-97c9-3a119a976121'
===============================

2024-04-08 15:26:30.527 +08:00 [DBG] =========Yi-SQL耗时0.6956毫秒=====
2024-04-08 15:26:30.527 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto'.
2024-04-08 15:26:30.527 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.UpdateAsync (Yi.Framework.Rbac.Application) in 12.2821ms
2024-04-08 15:26:30.527 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:30.544 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:30.544 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:26:30.545 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:26:30.546 +08:00 [DBG] =========Yi-SQL耗时0.588毫秒=====
2024-04-08 15:26:30.548 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 10
===============================

2024-04-08 15:26:30.549 +08:00 [DBG] =========Yi-SQL耗时0.7166毫秒=====
2024-04-08 15:26:30.549 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:26:30.549 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 5.7312ms
2024-04-08 15:26:30.550 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:32.228 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:32.229 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:26:32.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:26:32.232 +08:00 [DBG] =========Yi-SQL耗时0.831毫秒=====
2024-04-08 15:26:32.235 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:26:32.236 +08:00 [DBG] =========Yi-SQL耗时1.1432毫秒=====
2024-04-08 15:26:32.240 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:26:32.240 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 11.7416ms
2024-04-08 15:26:32.240 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:40.930 +08:00 [INF] CORS policy execution successful.
2024-04-08 15:26:40.932 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:40.932 +08:00 [INF] Route matched with {action = "Update", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:26:40.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"  WHERE "id" = N'01f02fdf-37f3-128a-97c9-3a119a976121'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:26:40.936 +08:00 [DBG] =========Yi-SQL耗时0.672毫秒=====
2024-04-08 15:26:40.940 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "dictionarytype"  SET
           "isdeleted"=0,"ordernum"=100,"state"=1,"dictname"=N'用户性别',"dicttype"=N'sys_user_sex',"remark"=N'用户性别列表',"creationtime"=CAST('2024-03-29 12:14:27.105' AS DATETIME),"creatorid"=null,"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-08 15:26:40.940' AS DATETIME),"concurrencystamp"=N'7dc3e00bb3bd4149b3eca839cd51759b'  WHERE "id"=N'01f02fdf-37f3-128a-97c9-3a119a976121'
===============================

2024-04-08 15:26:40.942 +08:00 [DBG] =========Yi-SQL耗时1.3195毫秒=====
2024-04-08 15:26:40.942 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto'.
2024-04-08 15:26:40.943 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.UpdateAsync (Yi.Framework.Rbac.Application) in 10.7745ms
2024-04-08 15:26:40.943 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:40.964 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:40.965 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:26:40.966 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:26:40.967 +08:00 [DBG] =========Yi-SQL耗时0.8715毫秒=====
2024-04-08 15:26:40.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:26:40.970 +08:00 [DBG] =========Yi-SQL耗时0.8398毫秒=====
2024-04-08 15:26:40.972 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:26:40.973 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 8.0606ms
2024-04-08 15:26:40.973 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:44.172 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:44.172 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:26:44.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:26:44.182 +08:00 [DBG] =========Yi-SQL耗时1.0181毫秒=====
2024-04-08 15:26:44.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 10
===============================

2024-04-08 15:26:44.186 +08:00 [DBG] =========Yi-SQL耗时0.8066毫秒=====
2024-04-08 15:26:44.187 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:26:44.188 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 15.4507ms
2024-04-08 15:26:44.188 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:48.038 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:48.038 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:26:48.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:26:48.040 +08:00 [DBG] =========Yi-SQL耗时0.8259毫秒=====
2024-04-08 15:26:48.043 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:26:48.043 +08:00 [DBG] =========Yi-SQL耗时0.4538毫秒=====
2024-04-08 15:26:48.046 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:26:48.046 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 8.3686ms
2024-04-08 15:26:48.046 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:26:53.962 +08:00 [INF] CORS policy execution successful.
2024-04-08 15:27:03.700 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:27:03.700 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:27:03.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:27:03.705 +08:00 [DBG] =========Yi-SQL耗时1.499毫秒=====
2024-04-08 15:27:03.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:27:03.708 +08:00 [DBG] =========Yi-SQL耗时0.6636毫秒=====
2024-04-08 15:27:03.712 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:27:03.713 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 12.9202ms
2024-04-08 15:27:03.713 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:27:21.726 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:27:21.726 +08:00 [INF] Route matched with {action = "Get", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:27:21.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"  WHERE "id" = N'cddc7310-1736-e93f-ed43-3a119a976121'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:27:21.729 +08:00 [DBG] =========Yi-SQL耗时0.7951毫秒=====
2024-04-08 15:27:21.733 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto'.
2024-04-08 15:27:21.733 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application) in 6.804ms
2024-04-08 15:27:21.733 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:27:29.683 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:27:29.684 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:27:29.686 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:27:29.687 +08:00 [DBG] =========Yi-SQL耗时0.839毫秒=====
2024-04-08 15:27:29.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 10
===============================

2024-04-08 15:27:29.690 +08:00 [DBG] =========Yi-SQL耗时0.9291毫秒=====
2024-04-08 15:27:29.698 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:27:29.698 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 14.5398ms
2024-04-08 15:27:29.698 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:27:31.837 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:27:31.837 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:27:31.840 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:27:31.841 +08:00 [DBG] =========Yi-SQL耗时0.8508毫秒=====
2024-04-08 15:27:31.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:27:31.844 +08:00 [DBG] =========Yi-SQL耗时0.8641毫秒=====
2024-04-08 15:27:31.848 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:27:31.849 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 11.3176ms
2024-04-08 15:27:31.849 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:27:33.074 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:27:33.075 +08:00 [INF] Route matched with {action = "Get", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:27:33.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"  WHERE "id" = N'81e1d450-d124-3a4f-d19d-3a119a976122'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:27:33.078 +08:00 [DBG] =========Yi-SQL耗时0.7744毫秒=====
2024-04-08 15:27:33.082 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto'.
2024-04-08 15:27:33.082 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application) in 7.1794ms
2024-04-08 15:27:33.082 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:27:41.315 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:27:41.315 +08:00 [INF] Route matched with {action = "Get", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:27:41.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"  WHERE "id" = N'cddc7310-1736-e93f-ed43-3a119a976121'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:27:41.320 +08:00 [DBG] =========Yi-SQL耗时0.8342毫秒=====
2024-04-08 15:27:41.324 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto'.
2024-04-08 15:27:41.324 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application) in 8.5499ms
2024-04-08 15:27:41.324 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:27:44.385 +08:00 [INF] CORS policy execution successful.
2024-04-08 15:29:24.969 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:29:24.971 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 15:29:24.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:29:25.151 +08:00 [DBG] =========Yi-SQL耗时169.1279毫秒=====
2024-04-08 15:29:25.153 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:29:25.154 +08:00 [DBG] =========Yi-SQL耗时0.4845毫秒=====
2024-04-08 15:29:25.155 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:29:25.156 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 185.37ms
2024-04-08 15:29:25.156 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:29:41.717 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:29:41.717 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:29:41.718 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:29:41.719 +08:00 [DBG] =========Yi-SQL耗时1.1281毫秒=====
2024-04-08 15:29:41.721 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:29:41.721 +08:00 [DBG] =========Yi-SQL耗时0.7541毫秒=====
2024-04-08 15:29:41.723 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:29:41.724 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 6.9958ms
2024-04-08 15:29:41.724 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:29:57.636 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:29:57.636 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-08 15:29:57.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:29:57.640 +08:00 [DBG] =========Yi-SQL耗时1.3787毫秒=====
2024-04-08 15:29:57.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:29:57.643 +08:00 [DBG] =========Yi-SQL耗时0.7251毫秒=====
2024-04-08 15:29:57.644 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:29:57.645 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 8.9254ms
2024-04-08 15:29:57.645 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:29:59.659 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:29:59.661 +08:00 [INF] Route matched with {action = "Get", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-08 15:29:59.667 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"  WHERE "id" = N'b5dcb5de-fe0e-8141-3d0e-3a119a976180'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:29:59.675 +08:00 [DBG] =========Yi-SQL耗时7.2036毫秒=====
2024-04-08 15:29:59.680 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetOutputDto'.
2024-04-08 15:29:59.682 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetAsync (Yi.Framework.Rbac.Application) in 20.7354ms
2024-04-08 15:29:59.682 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:30:10.474 +08:00 [INF] CORS policy execution successful.
2024-04-08 15:32:49.596 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:32:49.596 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:32:49.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:32:49.599 +08:00 [DBG] =========Yi-SQL耗时1.0551毫秒=====
2024-04-08 15:32:49.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:32:49.607 +08:00 [DBG] =========Yi-SQL耗时1.2068毫秒=====
2024-04-08 15:32:49.611 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:32:49.612 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 15.444ms
2024-04-08 15:32:49.612 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:32:58.227 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:32:58.227 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 15:32:58.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:32:58.229 +08:00 [DBG] =========Yi-SQL耗时0.6387毫秒=====
2024-04-08 15:32:58.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:32:58.231 +08:00 [DBG] =========Yi-SQL耗时0.9985毫秒=====
2024-04-08 15:32:58.232 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:32:58.233 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 6.0206ms
2024-04-08 15:32:58.233 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:34:30.737 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:34:30.740 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-08 15:34:30.757 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:34:30.814 +08:00 [DBG] =========Yi-SQL耗时57.1088毫秒=====
2024-04-08 15:34:30.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:34:30.822 +08:00 [DBG] =========Yi-SQL耗时0.8436毫秒=====
2024-04-08 15:34:30.831 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:34:30.843 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 102.8445ms
2024-04-08 15:34:30.843 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:34:40.234 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:34:40.242 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:34:40.243 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 15:34:40.245 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 15:34:40.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'2b299e84-bf9f-0375-cf2b-3a119a97612f'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:34:40.255 +08:00 [DBG] =========Yi-SQL耗时2.3719毫秒=====
2024-04-08 15:34:40.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 15:34:40.270 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 15:34:40.274 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 29.1245ms
2024-04-08 15:34:40.274 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:34:40.309 +08:00 [DBG] =========Yi-SQL耗时51.8853毫秒=====
2024-04-08 15:34:40.334 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:34:40.401 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 157.3846ms
2024-04-08 15:34:40.401 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:34:53.594 +08:00 [INF] CORS policy execution successful.
2024-04-08 15:34:53.595 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:34:53.597 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 15:34:53.619 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'2b299e84-bf9f-0375-cf2b-3a119a97612f'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:34:53.620 +08:00 [DBG] =========Yi-SQL耗时1.2621毫秒=====
2024-04-08 15:34:53.629 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-03-29 12:14:27.119' AS DATETIME),"creatorid"=null,"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-08 15:34:53.628' AS DATETIME),"ordernum"=95,"state"=1,"menuname"=N'字典管理',"menutype"=1,"permissioncode"=N'system:dict:list',"parentid"=N'e6bf52fd-b827-33d0-b83c-3a119a97612e',"menuicon"=N'dict',"router"=N'dict',"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=N'system/dict/index',"query"=null  WHERE "id"=N'2b299e84-bf9f-0375-cf2b-3a119a97612f'
===============================

2024-04-08 15:34:53.634 +08:00 [DBG] =========Yi-SQL耗时4.8799毫秒=====
2024-04-08 15:34:53.635 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-08 15:34:53.635 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 37.6413ms
2024-04-08 15:34:53.635 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:34:53.660 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:34:53.660 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 15:34:53.661 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 15:34:53.662 +08:00 [DBG] =========Yi-SQL耗时0.6935毫秒=====
2024-04-08 15:34:53.680 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:34:53.738 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 77.8499ms
2024-04-08 15:34:53.738 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:28.265 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-08 15:36:28.268 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-08 15:36:28.473 +08:00 [INF] CORS policy execution successful.
2024-04-08 15:36:28.475 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-08 15:36:28.476 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-08 15:36:28.501 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:28.503 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 15:36:28.571 +08:00 [INF] CORS policy execution successful.
2024-04-08 15:36:28.577 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-08 15:36:28.621 +08:00 [INF] 2024/4/8 15:36:28：cc,8htTC0C61wDXWSUQjfkvXw连接服务端success，当前已连接0个
2024-04-08 15:36:28.632 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:36:28.636 +08:00 [DBG] =========Yi-SQL耗时3.746毫秒=====
2024-04-08 15:36:28.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-08 15:36:28.664 +08:00 [DBG] =========Yi-SQL耗时1.33毫秒=====
2024-04-08 15:36:28.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-08 15:36:28.673 +08:00 [DBG] =========Yi-SQL耗时0.539毫秒=====
2024-04-08 15:36:28.709 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-08 15:36:28.715 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 211.8761ms
2024-04-08 15:36:28.715 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:28.726 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:28.728 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 15:36:28.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:36:28.733 +08:00 [DBG] =========Yi-SQL耗时1.6746毫秒=====
2024-04-08 15:36:28.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-08 15:36:28.736 +08:00 [DBG] =========Yi-SQL耗时0.7572毫秒=====
2024-04-08 15:36:28.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-08 15:36:28.737 +08:00 [DBG] =========Yi-SQL耗时0.7837毫秒=====
2024-04-08 15:36:28.738 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:36:28.739 +08:00 [DBG] =========Yi-SQL耗时0.5301毫秒=====
2024-04-08 15:36:28.763 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:36:28.765 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 36.8756ms
2024-04-08 15:36:28.765 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:28.869 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:28.870 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 15:36:28.870 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:28.870 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-08 15:36:28.871 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:28.871 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 15:36:28.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:36:28.872 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-08 15:36:28.873 +08:00 [DBG] =========Yi-SQL耗时1.0344毫秒=====
2024-04-08 15:36:28.874 +08:00 [DBG] =========Yi-SQL耗时2.1374毫秒=====
2024-04-08 15:36:28.878 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:36:28.879 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 8.8728ms
2024-04-08 15:36:28.879 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:28.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:36:28.890 +08:00 [DBG] =========Yi-SQL耗时0.9143毫秒=====
2024-04-08 15:36:28.893 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:36:28.893 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 22.1128ms
2024-04-08 15:36:28.893 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:28.894 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:36:28.899 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 28.7577ms
2024-04-08 15:36:28.899 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:30.942 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:30.942 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:36:30.944 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:36:30.947 +08:00 [DBG] =========Yi-SQL耗时3.347毫秒=====
2024-04-08 15:36:30.949 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:36:30.951 +08:00 [DBG] =========Yi-SQL耗时1.0685毫秒=====
2024-04-08 15:36:30.952 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:36:30.952 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 10.5247ms
2024-04-08 15:36:30.952 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:33.428 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:33.429 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:36:33.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:36:33.432 +08:00 [DBG] =========Yi-SQL耗时1.1257毫秒=====
2024-04-08 15:36:33.436 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 10
===============================

2024-04-08 15:36:33.437 +08:00 [DBG] =========Yi-SQL耗时1.341毫秒=====
2024-04-08 15:36:33.438 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:36:33.438 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 9.4331ms
2024-04-08 15:36:33.438 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:37.189 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:37.189 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:36:37.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:36:37.192 +08:00 [DBG] =========Yi-SQL耗时0.6555毫秒=====
2024-04-08 15:36:37.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:36:37.195 +08:00 [DBG] =========Yi-SQL耗时1.3577毫秒=====
2024-04-08 15:36:37.196 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:36:37.196 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 7.08ms
2024-04-08 15:36:37.196 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:56.091 +08:00 [INF] CORS policy execution successful.
2024-04-08 15:36:56.092 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:56.095 +08:00 [INF] Route matched with {action = "Create", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto] CreateAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeCreateInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:36:56.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "dictionarytype"  
           ("id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp")
     VALUES
           (N'e234825f-dcb8-2cbe-b883-3a11ced05a2d',0,0,1,N'qwe',N'qwe',N'qwe',CAST('2024-04-08 15:36:56.123' AS DATETIME),N'e94b7363-80d1-10a3-eb2c-3a119a976151',null,null,N'a2c92859cf2a447bbd89c9eb0f0ec2c0') ;
===============================

2024-04-08 15:36:56.137 +08:00 [DBG] =========Yi-SQL耗时3.4054毫秒=====
2024-04-08 15:36:56.139 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto'.
2024-04-08 15:36:56.139 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.CreateAsync (Yi.Framework.Rbac.Application) in 44.7285ms
2024-04-08 15:36:56.139 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:56.156 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:56.156 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:36:56.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:36:56.158 +08:00 [DBG] =========Yi-SQL耗时0.8817毫秒=====
2024-04-08 15:36:56.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:36:56.161 +08:00 [DBG] =========Yi-SQL耗时1.0231毫秒=====
2024-04-08 15:36:56.163 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:36:56.163 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 6.5951ms
2024-04-08 15:36:56.163 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:57.893 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:36:57.893 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:36:57.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:36:57.896 +08:00 [DBG] =========Yi-SQL耗时0.7083毫秒=====
2024-04-08 15:36:57.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 10
===============================

2024-04-08 15:36:57.900 +08:00 [DBG] =========Yi-SQL耗时1.8285毫秒=====
2024-04-08 15:36:57.901 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:36:57.901 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 7.9134ms
2024-04-08 15:36:57.901 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:02.350 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:02.350 +08:00 [INF] Route matched with {action = "Get", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:37:02.351 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"  WHERE "id" = N'e234825f-dcb8-2cbe-b883-3a11ced05a2d'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:37:02.352 +08:00 [DBG] =========Yi-SQL耗时0.7608毫秒=====
2024-04-08 15:37:02.357 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto'.
2024-04-08 15:37:02.357 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application) in 6.6664ms
2024-04-08 15:37:02.357 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:09.603 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:09.604 +08:00 [INF] Route matched with {action = "Get", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:37:09.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"  WHERE "id" = N'01f02fdf-37f3-128a-97c9-3a119a976121'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:37:09.606 +08:00 [DBG] =========Yi-SQL耗时0.8319毫秒=====
2024-04-08 15:37:09.610 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto'.
2024-04-08 15:37:09.610 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application) in 6.612ms
2024-04-08 15:37:09.610 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:15.936 +08:00 [INF] CORS policy execution successful.
2024-04-08 15:37:15.937 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.DeleteAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:15.945 +08:00 [INF] Route matched with {action = "Delete", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DeleteAsync(System.Collections.Generic.IEnumerable`1[System.Guid]) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:37:15.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"  WHERE "id" = N'e234825f-dcb8-2cbe-b883-3a11ced05a2d'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:37:15.957 +08:00 [DBG] =========Yi-SQL耗时1.2329毫秒=====
2024-04-08 15:37:15.997 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE  "dictionarytype"  SET "isdeleted"=T."isdeleted","ordernum"=T."ordernum","state"=T."state","dictname"=T."dictname","dicttype"=T."dicttype","remark"=T."remark","creationtime"=T."creationtime","creatorid"=T."creatorid","lastmodifierid"=T."lastmodifierid","lastmodificationtime"=T."lastmodificationtime","concurrencystamp"=T."concurrencystamp" FROM              (VALUES
              
 (CAST('e234825f-dcb8-2cbe-b883-3a11ced05a2d' AS uuid),CAST(1 AS bool),CAST('0' AS int4),CAST(1 AS bool),CAST('qwe' AS varchar),CAST('qwe' AS varchar),CAST('qwe' AS varchar),CAST(CAST('2024-04-08 15:36:56.123' AS DATETIME) AS timestamp),CAST('e94b7363-80d1-10a3-eb2c-3a119a976151' AS uuid),CAST('e94b7363-80d1-10a3-eb2c-3a119a976151' AS uuid),CAST(CAST('2024-04-08 15:37:15.965' AS DATETIME) AS timestamp),CAST('a2c92859cf2a447bbd89c9eb0f0ec2c0' AS varchar))


            ) AS T ("id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp") WHERE "dictionarytype"."id"=T."id"
                   ;
===============================

2024-04-08 15:37:15.998 +08:00 [DBG] =========Yi-SQL耗时1.2372毫秒=====
2024-04-08 15:37:15.999 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.DeleteAsync (Yi.Framework.Rbac.Application) in 54.3109ms
2024-04-08 15:37:15.999 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.DeleteAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:16.007 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:16.007 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:37:16.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:37:16.009 +08:00 [DBG] =========Yi-SQL耗时0.6502毫秒=====
2024-04-08 15:37:16.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 10
===============================

2024-04-08 15:37:16.013 +08:00 [DBG] =========Yi-SQL耗时1.8044毫秒=====
2024-04-08 15:37:16.015 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:37:16.016 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 8.2153ms
2024-04-08 15:37:16.016 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:17.334 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:17.334 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:37:17.336 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:37:17.337 +08:00 [DBG] =========Yi-SQL耗时0.6959毫秒=====
2024-04-08 15:37:17.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:37:17.341 +08:00 [DBG] =========Yi-SQL耗时0.6271毫秒=====
2024-04-08 15:37:17.342 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:37:17.342 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 7.6497ms
2024-04-08 15:37:17.342 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:21.677 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:21.677 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:37:21.679 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:37:21.680 +08:00 [DBG] =========Yi-SQL耗时0.8853毫秒=====
2024-04-08 15:37:21.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:37:21.685 +08:00 [DBG] =========Yi-SQL耗时0.6565毫秒=====
2024-04-08 15:37:21.687 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:37:21.687 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 9.3909ms
2024-04-08 15:37:21.687 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:23.414 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:23.414 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:37:23.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:37:23.416 +08:00 [DBG] =========Yi-SQL耗时0.6966毫秒=====
2024-04-08 15:37:23.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 10
===============================

2024-04-08 15:37:23.421 +08:00 [DBG] =========Yi-SQL耗时1.3927毫秒=====
2024-04-08 15:37:23.422 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:37:23.423 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 8.9151ms
2024-04-08 15:37:23.423 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:24.414 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:24.414 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:37:24.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:37:24.417 +08:00 [DBG] =========Yi-SQL耗时0.758毫秒=====
2024-04-08 15:37:24.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:37:24.420 +08:00 [DBG] =========Yi-SQL耗时0.6314毫秒=====
2024-04-08 15:37:24.422 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:37:24.422 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 8.0102ms
2024-04-08 15:37:24.422 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:26.380 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:26.380 +08:00 [INF] Route matched with {action = "Get", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:37:26.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"  WHERE "id" = N'cddc7310-1736-e93f-ed43-3a119a976121'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:37:26.382 +08:00 [DBG] =========Yi-SQL耗时0.7938毫秒=====
2024-04-08 15:37:26.386 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto'.
2024-04-08 15:37:26.386 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application) in 6.1277ms
2024-04-08 15:37:26.386 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:52.870 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:52.870 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-04-08 15:37:52.873 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "post"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:37:52.876 +08:00 [DBG] =========Yi-SQL耗时2.5768毫秒=====
2024-04-08 15:37:52.883 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:37:52.886 +08:00 [DBG] =========Yi-SQL耗时2.111毫秒=====
2024-04-08 15:37:52.887 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:37:52.887 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 17.2084ms
2024-04-08 15:37:52.887 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:53.754 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:53.755 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:37:53.756 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:37:53.757 +08:00 [DBG] =========Yi-SQL耗时0.6171毫秒=====
2024-04-08 15:37:53.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:37:53.764 +08:00 [DBG] =========Yi-SQL耗时1.318毫秒=====
2024-04-08 15:37:53.766 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:37:53.766 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 11.2035ms
2024-04-08 15:37:53.766 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:55.078 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:55.078 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:37:55.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:37:55.082 +08:00 [DBG] =========Yi-SQL耗时1.1113毫秒=====
2024-04-08 15:37:55.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 10
===============================

2024-04-08 15:37:55.089 +08:00 [DBG] =========Yi-SQL耗时1.415毫秒=====
2024-04-08 15:37:55.090 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:37:55.091 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 12.2427ms
2024-04-08 15:37:55.091 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:56.833 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-08 15:37:56.835 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-08 15:37:56.992 +08:00 [INF] CORS policy execution successful.
2024-04-08 15:37:56.993 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-08 15:37:56.993 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-08 15:37:57.005 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:57.005 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 15:37:57.021 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-08 15:37:57.021 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 15.908ms
2024-04-08 15:37:57.021 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:57.073 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:57.073 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-08 15:37:57.075 +08:00 [INF] CORS policy execution successful.
2024-04-08 15:37:57.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:37:57.076 +08:00 [DBG] =========Yi-SQL耗时0.7249毫秒=====
2024-04-08 15:37:57.077 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-08 15:37:57.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-08 15:37:57.079 +08:00 [DBG] =========Yi-SQL耗时0.7371毫秒=====
2024-04-08 15:37:57.080 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-08 15:37:57.080 +08:00 [DBG] =========Yi-SQL耗时0.2946毫秒=====
2024-04-08 15:37:57.082 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:37:57.083 +08:00 [DBG] =========Yi-SQL耗时1.2448毫秒=====
2024-04-08 15:37:57.084 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:37:57.084 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 10.5946ms
2024-04-08 15:37:57.084 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:57.111 +08:00 [INF] 2024/4/8 15:37:57：cc,TMgPD3TsWzxWihFOfPExGg连接服务端success，当前已连接0个
2024-04-08 15:37:57.223 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:57.223 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:57.223 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 15:37:57.223 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:37:57.224 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:37:57.224 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:37:57.226 +08:00 [DBG] =========Yi-SQL耗时2.3643毫秒=====
2024-04-08 15:37:57.226 +08:00 [DBG] =========Yi-SQL耗时2.2261毫秒=====
2024-04-08 15:37:57.227 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 15:37:57.228 +08:00 [DBG] =========Yi-SQL耗时0.5825毫秒=====
2024-04-08 15:37:57.229 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:37:57.230 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 6.8334ms
2024-04-08 15:37:57.231 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:57.232 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:37:57.232 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 9.1669ms
2024-04-08 15:37:57.232 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:59.503 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 15:37:59.503 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 15:37:59.504 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 15:37:59.505 +08:00 [DBG] =========Yi-SQL耗时0.6516毫秒=====
2024-04-08 15:37:59.508 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 10
===============================

2024-04-08 15:37:59.509 +08:00 [DBG] =========Yi-SQL耗时0.4999毫秒=====
2024-04-08 15:37:59.509 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 15:37:59.509 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 6.3628ms
2024-04-08 15:37:59.509 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 16:00:00.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-04-08 16:00:00.217 +08:00 [DBG] =========Yi-SQL耗时84.9309毫秒=====
2024-04-08 16:00:00.644 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an unhandled Exception: 
System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
2024-04-08 16:00:00.646 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an exception.
Quartz.SchedulerException: Job threw an unhandled exception.
 ---> System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
   --- End of inner exception stack trace --- [See nested exception: System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)]
2024-04-08 17:00:00.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-04-08 17:00:00.107 +08:00 [DBG] =========Yi-SQL耗时67.8092毫秒=====
2024-04-08 17:00:02.607 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an unhandled Exception: 
System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
2024-04-08 17:00:02.607 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an exception.
Quartz.SchedulerException: Job threw an unhandled exception.
 ---> System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
   --- End of inner exception stack trace --- [See nested exception: System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)]
2024-04-08 17:02:39.975 +08:00 [INF] CORS policy execution successful.
2024-04-08 17:02:43.530 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 17:02:43.539 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-04-08 17:02:43.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "post"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 17:02:43.600 +08:00 [DBG] =========Yi-SQL耗时10.1249毫秒=====
2024-04-08 17:02:43.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 17:02:43.603 +08:00 [DBG] =========Yi-SQL耗时0.5733毫秒=====
2024-04-08 17:02:43.645 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 17:02:43.647 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 108.0072ms
2024-04-08 17:02:43.648 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 17:02:44.413 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 17:02:44.414 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 17:02:44.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 17:02:44.430 +08:00 [DBG] =========Yi-SQL耗时4.8476毫秒=====
2024-04-08 17:02:44.442 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 17:02:44.444 +08:00 [DBG] =========Yi-SQL耗时1.5973毫秒=====
2024-04-08 17:02:44.449 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 17:02:44.450 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 36.8458ms
2024-04-08 17:02:44.450 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 17:02:48.094 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 17:02:48.094 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 17:02:48.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 17:02:48.097 +08:00 [DBG] =========Yi-SQL耗时1.0235毫秒=====
2024-04-08 17:02:48.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 10
===============================

2024-04-08 17:02:48.100 +08:00 [DBG] =========Yi-SQL耗时1.3649毫秒=====
2024-04-08 17:02:48.102 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 17:02:48.102 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 8.1263ms
2024-04-08 17:02:48.102 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 17:02:54.731 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 17:02:54.731 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 17:02:54.732 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 17:02:54.733 +08:00 [DBG] =========Yi-SQL耗时0.6104毫秒=====
2024-04-08 17:02:54.737 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 17:02:54.738 +08:00 [DBG] =========Yi-SQL耗时0.7169毫秒=====
2024-04-08 17:02:54.741 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 17:02:54.741 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 10.3114ms
2024-04-08 17:02:54.741 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 17:03:12.428 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 17:03:12.428 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 17:03:12.429 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 17:03:12.431 +08:00 [DBG] =========Yi-SQL耗时1.276毫秒=====
2024-04-08 17:03:12.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 17:03:12.434 +08:00 [DBG] =========Yi-SQL耗时0.8241毫秒=====
2024-04-08 17:03:12.435 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 17:03:12.435 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 7.0993ms
2024-04-08 17:03:12.435 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 17:04:16.613 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 17:04:16.613 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 17:04:16.614 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 17:04:16.615 +08:00 [DBG] =========Yi-SQL耗时0.9107毫秒=====
2024-04-08 17:04:16.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 10
===============================

2024-04-08 17:04:16.622 +08:00 [DBG] =========Yi-SQL耗时2.0871毫秒=====
2024-04-08 17:04:16.624 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 17:04:16.624 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 11.0887ms
2024-04-08 17:04:16.624 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 17:04:18.307 +08:00 [INF] CORS policy execution successful.
2024-04-08 17:07:30.946 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 17:07:30.946 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 17:07:30.948 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-08 17:07:30.948 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-08 17:07:30.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-08 17:07:30.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 17:07:31.027 +08:00 [DBG] =========Yi-SQL耗时69.3024毫秒=====
2024-04-08 17:07:31.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 17:07:31.028 +08:00 [DBG] =========Yi-SQL耗时0.4553毫秒=====
2024-04-08 17:07:31.034 +08:00 [DBG] =========Yi-SQL耗时64.3002毫秒=====
2024-04-08 17:07:31.034 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 17:07:31.035 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 17:07:31.035 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 86.3398ms
2024-04-08 17:07:31.035 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 17:07:31.035 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 86.8106ms
2024-04-08 17:07:31.035 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-08 17:07:32.791 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 17:07:32.791 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-08 17:07:32.792 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-08 17:07:32.793 +08:00 [DBG] =========Yi-SQL耗时1.3794毫秒=====
2024-04-08 17:07:32.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-08 17:07:32.804 +08:00 [DBG] =========Yi-SQL耗时1.22毫秒=====
2024-04-08 17:07:32.806 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-08 17:07:32.806 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 15.2386ms
2024-04-08 17:07:32.806 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-08 17:07:34.738 +08:00 [INF] CORS policy execution successful.
2024-04-08 17:07:46.181 +08:00 [INF] CORS policy execution successful.
