2024-05-10 11:19:44.081 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-05-10 11:19:44.095 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-05-10 11:19:48.554 +08:00 [INF] Loaded ABP modules:
2024-05-10 11:19:48.555 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-05-10 11:19:48.555 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-05-10 11:19:48.555 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-05-10 11:19:48.555 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-05-10 11:19:48.555 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-05-10 11:19:48.555 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-05-10 11:19:48.555 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-05-10 11:19:48.555 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-05-10 11:19:48.555 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-05-10 11:19:48.555 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-05-10 11:19:48.555 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-05-10 11:19:48.555 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-05-10 11:19:48.555 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-05-10 11:19:48.555 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-05-10 11:19:48.555 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-05-10 11:19:48.555 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-05-10 11:19:48.555 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-05-10 11:19:48.555 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-05-10 11:19:48.555 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-05-10 11:19:48.555 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-05-10 11:19:48.555 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-05-10 11:19:48.555 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-05-10 11:19:48.555 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-05-10 11:19:48.555 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-05-10 11:19:48.555 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-05-10 11:19:48.555 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-05-10 11:19:48.555 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-05-10 11:19:48.555 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-05-10 11:19:48.555 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-05-10 11:19:48.555 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-05-10 11:19:48.555 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-05-10 11:19:48.555 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-05-10 11:19:48.555 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-05-10 11:19:48.555 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-05-10 11:19:48.555 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-05-10 11:19:48.555 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-05-10 11:19:48.555 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-05-10 11:19:48.555 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-05-10 11:19:48.555 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-05-10 11:19:48.555 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-05-10 11:19:48.555 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-05-10 11:19:48.555 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-05-10 11:19:48.555 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-05-10 11:19:48.555 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-05-10 11:19:48.555 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-05-10 11:19:48.555 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-05-10 11:19:48.555 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-05-10 11:19:48.555 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-05-10 11:19:48.555 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-05-10 11:19:48.555 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-05-10 11:19:48.555 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-05-10 11:19:48.555 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-05-10 11:19:48.555 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-05-10 11:19:48.555 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-05-10 11:19:48.555 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-05-10 11:19:48.555 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-05-10 11:19:48.555 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-05-10 11:19:48.555 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-05-10 11:19:48.555 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-05-10 11:19:48.555 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-05-10 11:19:48.555 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-05-10 11:19:48.555 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-05-10 11:19:48.555 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-05-10 11:19:48.555 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-05-10 11:19:48.555 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-05-10 11:19:48.555 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-05-10 11:19:48.555 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-05-10 11:19:48.555 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-05-10 11:19:48.555 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-05-10 11:19:48.555 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-05-10 11:19:48.555 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-05-10 11:19:48.555 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-05-10 11:19:48.555 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-05-10 11:19:48.555 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-05-10 11:19:48.555 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-05-10 11:19:48.555 +08:00 [INF]   - Volo.Abp.Emailing.AbpEmailingModule
2024-05-10 11:19:48.555 +08:00 [INF]     - Volo.Abp.BackgroundJobs.AbpBackgroundJobsAbstractionsModule
2024-05-10 11:19:48.555 +08:00 [INF]     - Volo.Abp.TextTemplating.AbpTextTemplatingModule
2024-05-10 11:19:48.555 +08:00 [INF]       - Volo.Abp.TextTemplating.Scriban.AbpTextTemplatingScribanModule
2024-05-10 11:19:48.555 +08:00 [INF]         - Volo.Abp.TextTemplating.AbpTextTemplatingCoreModule
2024-05-10 11:19:48.555 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-05-10 11:19:48.555 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-05-10 11:19:48.555 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-05-10 11:19:48.555 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-05-10 11:19:48.555 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-05-10 11:19:48.555 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-05-10 11:19:48.555 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-05-10 11:19:48.555 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-05-10 11:19:48.555 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-05-10 11:19:48.555 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-05-10 11:19:48.555 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-05-10 11:19:48.555 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-05-10 11:19:48.555 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-05-10 11:19:48.561 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-05-10 11:19:48.567 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-05-10 11:19:49.311 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:49.321 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.352 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.357 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-05-10 11:19:49.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-05-10 11:19:49.384 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:49.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.405 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-05-10 11:19:49.407 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-05-10 11:19:49.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-05-10 11:19:49.420 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-05-10 11:19:49.420 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-05-10 11:19:49.420 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-05-10 11:19:49.420 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-05-10 11:19:49.420 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-05-10 11:19:49.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-05-10 11:19:49.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-05-10 11:19:49.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-05-10 11:19:49.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.429 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.429 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-05-10 11:19:49.432 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:49.442 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.442 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-05-10 11:19:49.453 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.453 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-05-10 11:19:49.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-05-10 11:19:49.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-05-10 11:19:49.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-05-10 11:19:49.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-05-10 11:19:49.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-05-10 11:19:49.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-05-10 11:19:49.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.462 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.462 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-05-10 11:19:49.464 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.468 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:49.470 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.477 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.477 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-05-10 11:19:49.479 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.480 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-05-10 11:19:49.480 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.480 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-05-10 11:19:49.480 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.480 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-05-10 11:19:49.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-05-10 11:19:49.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-05-10 11:19:49.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-05-10 11:19:49.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-05-10 11:19:49.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-05-10 11:19:49.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-05-10 11:19:49.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-05-10 11:19:49.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-05-10 11:19:49.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-05-10 11:19:49.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-05-10 11:19:49.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-05-10 11:19:49.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.490 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-05-10 11:19:49.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.499 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:49.501 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.501 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.508 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.509 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-05-10 11:19:49.511 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.512 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-05-10 11:19:49.512 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.512 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-05-10 11:19:49.512 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.512 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-05-10 11:19:49.512 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.512 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-05-10 11:19:49.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-05-10 11:19:49.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-05-10 11:19:49.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-05-10 11:19:49.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-05-10 11:19:49.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-05-10 11:19:49.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-05-10 11:19:49.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.514 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-05-10 11:19:49.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.514 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.520 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-05-10 11:19:49.523 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:49.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-05-10 11:19:49.540 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-05-10 11:19:49.541 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-05-10 11:19:49.541 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-05-10 11:19:49.541 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-05-10 11:19:49.541 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-05-10 11:19:49.541 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-05-10 11:19:49.542 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.542 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-05-10 11:19:49.542 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.542 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.549 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.549 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-05-10 11:19:49.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:49.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-05-10 11:19:49.572 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.572 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-05-10 11:19:49.572 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.572 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-05-10 11:19:49.572 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.572 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-05-10 11:19:49.573 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.578 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.579 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-05-10 11:19:49.581 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.589 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:49.591 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.598 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-05-10 11:19:49.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-05-10 11:19:49.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-05-10 11:19:49.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-05-10 11:19:49.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-05-10 11:19:49.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-05-10 11:19:49.603 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-05-10 11:19:49.603 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.604 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 11:19:49.619 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.619 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.627 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.628 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-05-10 11:19:49.631 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:49.639 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.640 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.647 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.647 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-05-10 11:19:49.650 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-05-10 11:19:49.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-05-10 11:19:49.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-05-10 11:19:49.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-05-10 11:19:49.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-05-10 11:19:49.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-05-10 11:19:49.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-05-10 11:19:49.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-05-10 11:19:49.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-05-10 11:19:49.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-05-10 11:19:49.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-05-10 11:19:49.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-05-10 11:19:49.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-05-10 11:19:49.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-05-10 11:19:49.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-05-10 11:19:49.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-05-10 11:19:49.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-05-10 11:19:49.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-05-10 11:19:49.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.664 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.665 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-05-10 11:19:49.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.679 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:49.681 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.689 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-05-10 11:19:49.694 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.694 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-05-10 11:19:49.695 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-05-10 11:19:49.695 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-05-10 11:19:49.695 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-05-10 11:19:49.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.710 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:49.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.721 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.722 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-05-10 11:19:49.726 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.726 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-05-10 11:19:49.727 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-05-10 11:19:49.727 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-05-10 11:19:49.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-05-10 11:19:49.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-05-10 11:19:49.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-05-10 11:19:49.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-05-10 11:19:49.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-05-10 11:19:49.729 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-05-10 11:19:49.729 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-05-10 11:19:49.729 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-05-10 11:19:49.729 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-05-10 11:19:49.729 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.738 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.739 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-05-10 11:19:49.742 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:49.749 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.749 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.758 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-05-10 11:19:49.761 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-05-10 11:19:49.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-05-10 11:19:49.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-05-10 11:19:49.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-05-10 11:19:49.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.771 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.772 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-05-10 11:19:49.775 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:49.784 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.784 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.794 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-05-10 11:19:49.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-05-10 11:19:49.801 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-05-10 11:19:49.801 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-05-10 11:19:49.802 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-05-10 11:19:49.802 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-05-10 11:19:49.802 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-05-10 11:19:49.802 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-05-10 11:19:49.802 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-05-10 11:19:49.802 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-05-10 11:19:49.802 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-05-10 11:19:49.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-05-10 11:19:49.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-05-10 11:19:49.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-05-10 11:19:49.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.813 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-05-10 11:19:49.816 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:49.826 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.826 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.836 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-05-10 11:19:49.840 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.840 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-05-10 11:19:49.841 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.841 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-05-10 11:19:49.841 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.841 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.848 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.848 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-05-10 11:19:49.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:49.864 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.872 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.872 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-05-10 11:19:49.875 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-05-10 11:19:49.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-05-10 11:19:49.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-05-10 11:19:49.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-05-10 11:19:49.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-05-10 11:19:49.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-05-10 11:19:49.878 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-05-10 11:19:49.878 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-05-10 11:19:49.878 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-05-10 11:19:49.878 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-05-10 11:19:49.878 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-05-10 11:19:49.878 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-05-10 11:19:49.878 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-05-10 11:19:49.878 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-05-10 11:19:49.879 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-05-10 11:19:49.879 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-05-10 11:19:49.879 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-05-10 11:19:49.879 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-05-10 11:19:49.879 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-05-10 11:19:49.879 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-05-10 11:19:49.879 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-05-10 11:19:49.879 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-05-10 11:19:49.879 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-05-10 11:19:49.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-05-10 11:19:49.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 11:19:49.882 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.895 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-05-10 11:19:49.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:49.906 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.915 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.915 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-05-10 11:19:49.917 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.918 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-05-10 11:19:49.918 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.918 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-05-10 11:19:49.918 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.918 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-05-10 11:19:49.919 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.919 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-05-10 11:19:49.919 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.919 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-05-10 11:19:49.929 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.933 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:49.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.942 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-05-10 11:19:49.945 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-05-10 11:19:49.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-05-10 11:19:49.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-05-10 11:19:49.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-05-10 11:19:49.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.953 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.953 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-05-10 11:19:49.956 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:49.965 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.966 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.972 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-05-10 11:19:49.975 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.975 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-05-10 11:19:49.976 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.976 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:49.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-05-10 11:19:49.987 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:49.995 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:49.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:50.002 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.002 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-05-10 11:19:50.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 11:19:50.006 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 11:19:50.008 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:50.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-05-10 11:19:50.018 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:50.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:50.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-05-10 11:19:50.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.038 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 11:19:50.039 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 11:19:50.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:50.046 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.047 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-05-10 11:19:50.049 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.054 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:50.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:50.061 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-05-10 11:19:50.064 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 11:19:50.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 11:19:50.066 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.067 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:50.072 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-05-10 11:19:50.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:50.081 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:50.087 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-05-10 11:19:50.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 11:19:50.092 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.092 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:50.098 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.098 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-05-10 11:19:50.101 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.107 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:50.109 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.109 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:50.115 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.115 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-05-10 11:19:50.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-05-10 11:19:50.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-05-10 11:19:50.119 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-05-10 11:19:50.119 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:50.127 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.127 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-05-10 11:19:50.130 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:50.137 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:50.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-05-10 11:19:50.147 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-05-10 11:19:50.148 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:50.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-05-10 11:19:50.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.164 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:50.165 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.165 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:50.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-05-10 11:19:50.175 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-05-10 11:19:50.175 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-05-10 11:19:50.176 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-05-10 11:19:50.176 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-05-10 11:19:50.176 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-05-10 11:19:50.176 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:50.183 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.183 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-05-10 11:19:50.186 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:50.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.193 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:50.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-05-10 11:19:50.202 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.203 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-05-10 11:19:50.203 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.203 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-05-10 11:19:50.203 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.203 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:50.209 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-05-10 11:19:50.212 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 11:19:50.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:50.225 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-05-10 11:19:50.227 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-05-10 11:19:50.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-05-10 11:19:50.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-05-10 11:19:50.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-05-10 11:19:50.229 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 11:19:50.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-05-10 11:19:50.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 11:19:50.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 11:19:50.348 +08:00 [DBG] =========Yi-SQL耗时10.8523毫秒=====
2024-05-10 11:19:50.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 11:19:50.365 +08:00 [DBG] =========Yi-SQL耗时1.1916毫秒=====
2024-05-10 11:19:50.369 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 11:19:50.370 +08:00 [DBG] =========Yi-SQL耗时1.7697毫秒=====
2024-05-10 11:19:50.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 11:19:50.379 +08:00 [DBG] =========Yi-SQL耗时2.2839毫秒=====
2024-05-10 11:19:50.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 11:19:50.383 +08:00 [DBG] =========Yi-SQL耗时1.2807毫秒=====
2024-05-10 11:19:50.386 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 11:19:50.387 +08:00 [DBG] =========Yi-SQL耗时1.0106毫秒=====
2024-05-10 11:19:50.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 11:19:50.394 +08:00 [DBG] =========Yi-SQL耗时1.3416毫秒=====
2024-05-10 11:19:50.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-05-10 11:19:50.398 +08:00 [DBG] =========Yi-SQL耗时0.8968毫秒=====
2024-05-10 11:19:50.408 +08:00 [DBG] 耗时-1845ms,已加载模块-Yi.Framework.SqlSugarCore
2024-05-10 11:19:50.410 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-05-10 11:19:50.477 +08:00 [DBG] 耗时-66ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-05-10 11:19:50.481 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-05-10 11:19:50.497 +08:00 [DBG] 耗时-15ms,已加载模块-Volo.Abp.AspNetCore
2024-05-10 11:19:50.502 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-05-10 11:19:50.526 +08:00 [DBG] 耗时-23ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-05-10 11:19:50.529 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-05-10 11:19:50.855 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-05-10 11:19:50.947 +08:00 [DBG] 耗时-417ms,已加载模块-Yi.Abp.Web
2024-05-10 11:19:50.948 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2378ms】==========
2024-05-10 11:19:51.076 +08:00 [INF] Now listening on: http://[::]:19001
2024-05-10 11:19:51.077 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-05-10 11:19:51.077 +08:00 [INF] Hosting environment: Development
2024-05-10 11:19:51.077 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-05-10 11:21:22.176 +08:00 [INF] CORS policy execution successful.
2024-05-10 11:21:22.365 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-05-10 11:21:22.371 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-05-10 11:21:22.509 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-05-10 11:21:22.509 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-05-10 11:21:22.509 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 11:21:22.578 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 11:21:23.305 +08:00 [INF] CORS policy execution successful.
2024-05-10 11:21:23.307 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-05-10 11:21:23.307 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-05-10 11:21:23.308 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 11:21:23.348 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-05-10 11:21:23.348 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 11:21:23.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 11:21:23.484 +08:00 [DBG] =========Yi-SQL耗时39.0438毫秒=====
2024-05-10 11:21:23.514 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 11:21:23.545 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-05-10 11:21:23.596 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 245.2837ms
2024-05-10 11:21:23.597 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-05-10 11:21:23.599 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 250.1449ms
2024-05-10 11:21:23.599 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-05-10 11:21:46.765 +08:00 [INF] CORS policy execution successful.
2024-05-10 11:21:46.766 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-05-10 11:21:46.775 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 11:21:46.845 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"   WHERE (( "username" = N'cc' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 11:21:46.853 +08:00 [DBG] =========Yi-SQL耗时7.9933毫秒=====
2024-05-10 11:21:46.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 11:21:46.887 +08:00 [DBG] =========Yi-SQL耗时5.0425毫秒=====
2024-05-10 11:21:46.909 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 11:21:46.913 +08:00 [DBG] =========Yi-SQL耗时3.5087毫秒=====
2024-05-10 11:21:46.922 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 11:21:46.923 +08:00 [DBG] =========Yi-SQL耗时0.677毫秒=====
2024-05-10 11:21:47.041 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-05-10 11:21:47.047 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 271.6815ms
2024-05-10 11:21:47.047 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-05-10 11:21:47.057 +08:00 [INF] CORS policy execution successful.
2024-05-10 11:21:47.068 +08:00 [INF] 用户【e94b7363-80d1-10a3-eb2c-3a119a976151:cc】登入系统
2024-05-10 11:21:47.082 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 11:21:47.083 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 11:21:47.087 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 11:21:47.088 +08:00 [INF] CORS policy execution successful.
2024-05-10 11:21:47.089 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 11:21:47.089 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 11:21:47.098 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 11:21:47.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "loginlog"  
           ("id","creationtime","loginuser","loginlocation","loginip","browser","os","logmsg","creatorid")
     VALUES
           (N'1615bf38-6207-cb24-c579-3a1272b2414d',CAST('2024-05-10 11:21:47.095' AS DATETIME),N'cc',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'cc登录系统',N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-05-10 11:21:47.121 +08:00 [DBG] =========Yi-SQL耗时8.8209毫秒=====
2024-05-10 11:21:47.129 +08:00 [INF] 2024/5/10 11:21:47：cc,gsoevkSaCV3rqbFC6KOQvA连接服务端success，当前已连接1个
2024-05-10 11:21:47.291 +08:00 [DBG] =========Yi-SQL耗时192.9741毫秒=====
2024-05-10 11:21:47.292 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 11:21:47.293 +08:00 [DBG] =========Yi-SQL耗时0.5471毫秒=====
2024-05-10 11:21:47.294 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 11:21:47.295 +08:00 [DBG] =========Yi-SQL耗时1.4305毫秒=====
2024-05-10 11:21:47.332 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 11:21:47.341 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 251.5334ms
2024-05-10 11:21:47.341 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 11:21:47.350 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 11:21:47.352 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 11:21:47.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 11:21:47.355 +08:00 [DBG] =========Yi-SQL耗时0.7345毫秒=====
2024-05-10 11:21:47.357 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 11:21:47.358 +08:00 [DBG] =========Yi-SQL耗时1.1152毫秒=====
2024-05-10 11:21:47.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 11:21:47.359 +08:00 [DBG] =========Yi-SQL耗时0.3552毫秒=====
2024-05-10 11:21:47.362 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 11:21:47.363 +08:00 [DBG] =========Yi-SQL耗时1.3131毫秒=====
2024-05-10 11:21:47.395 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 11:21:47.398 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 45.3616ms
2024-05-10 11:21:47.398 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 11:21:47.555 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 11:21:47.559 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 11:21:47.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 11:21:47.571 +08:00 [DBG] =========Yi-SQL耗时2.6301毫秒=====
2024-05-10 11:21:47.584 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 11:21:47.587 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 28.1205ms
2024-05-10 11:21:47.587 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 11:21:52.880 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 11:21:52.880 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-05-10 11:21:52.883 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-05-10 11:21:52.885 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-05-10 11:21:52.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 11:21:52.892 +08:00 [DBG] =========Yi-SQL耗时2.3057毫秒=====
2024-05-10 11:21:52.918 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 11:21:52.921 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 37.7018ms
2024-05-10 11:21:52.921 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-05-10 11:21:52.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-05-10 11:21:52.940 +08:00 [DBG] =========Yi-SQL耗时3.3795毫秒=====
2024-05-10 11:21:52.942 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-05-10 11:21:52.945 +08:00 [DBG] =========Yi-SQL耗时3.012毫秒=====
2024-05-10 11:21:52.963 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 11:21:52.967 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 82.0544ms
2024-05-10 11:21:52.967 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 11:33:00.058 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 11:33:00.133 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-05-10 11:33:00.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 11:33:00.434 +08:00 [DBG] =========Yi-SQL耗时102.4599毫秒=====
2024-05-10 11:33:00.468 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-05-10 11:33:00.471 +08:00 [DBG] =========Yi-SQL耗时3.2714毫秒=====
2024-05-10 11:33:00.519 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 11:33:00.537 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 402.8526ms
2024-05-10 11:33:00.537 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 11:33:10.783 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 11:33:10.785 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-05-10 11:33:10.789 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 11:33:10.790 +08:00 [DBG] =========Yi-SQL耗时1.102毫秒=====
2024-05-10 11:33:10.792 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 10
===============================

2024-05-10 11:33:10.793 +08:00 [DBG] =========Yi-SQL耗时0.8238毫秒=====
2024-05-10 11:33:10.798 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 11:33:10.799 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 13.9713ms
2024-05-10 11:33:10.799 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 12:16:06.466 +08:00 [INF] 用户cc离开了，当前已连接1个
2024-05-10 12:16:06.503 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 12:16:06.503 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 12:24:37.244 +08:00 [INF] CORS policy execution successful.
2024-05-10 12:24:37.449 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 12:24:37.455 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 12:24:37.465 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 12:24:37.503 +08:00 [INF] CORS policy execution successful.
2024-05-10 12:24:37.506 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 12:24:37.509 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 12:24:37.639 +08:00 [INF] 2024/5/10 12:24:37：cc,pqc1e6hJA2xlSU1SQoKCtw连接服务端success，当前已连接0个
2024-05-10 12:24:37.719 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 12:24:37.740 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 234.375ms
2024-05-10 12:24:37.741 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 12:24:37.754 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 12:24:37.754 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 12:24:37.789 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 12:24:37.934 +08:00 [DBG] =========Yi-SQL耗时146.2897毫秒=====
2024-05-10 12:24:37.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 12:24:37.954 +08:00 [DBG] =========Yi-SQL耗时5.9457毫秒=====
2024-05-10 12:24:37.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 12:24:37.963 +08:00 [DBG] =========Yi-SQL耗时4.5346毫秒=====
2024-05-10 12:24:37.968 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 12:24:37.972 +08:00 [DBG] =========Yi-SQL耗时4.1269毫秒=====
2024-05-10 12:24:37.976 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 12:24:37.979 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 224.957ms
2024-05-10 12:24:37.979 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 12:24:38.234 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 12:24:38.235 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 12:24:38.241 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 12:24:38.241 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-05-10 12:24:38.242 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-05-10 12:24:38.243 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-05-10 12:24:38.246 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 12:24:38.250 +08:00 [DBG] =========Yi-SQL耗时3.8746毫秒=====
2024-05-10 12:24:38.288 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 12:24:38.297 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 12:24:38.297 +08:00 [DBG] =========Yi-SQL耗时8.8371毫秒=====
2024-05-10 12:24:38.300 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 12:24:38.300 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 64.2842ms
2024-05-10 12:24:38.300 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 12:24:38.304 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 12:24:38.306 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 62.8363ms
2024-05-10 12:24:38.306 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-05-10 12:24:38.306 +08:00 [DBG] =========Yi-SQL耗时6.9569毫秒=====
2024-05-10 12:24:38.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-05-10 12:24:38.312 +08:00 [DBG] =========Yi-SQL耗时2.6948毫秒=====
2024-05-10 12:24:38.329 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 12:24:38.330 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 88.0545ms
2024-05-10 12:24:38.330 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 12:27:54.542 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-05-10 12:27:54.562 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-05-10 12:27:59.701 +08:00 [INF] Loaded ABP modules:
2024-05-10 12:27:59.701 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-05-10 12:27:59.701 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-05-10 12:27:59.701 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-05-10 12:27:59.701 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-05-10 12:27:59.701 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-05-10 12:27:59.701 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-05-10 12:27:59.701 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-05-10 12:27:59.701 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-05-10 12:27:59.701 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-05-10 12:27:59.701 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-05-10 12:27:59.701 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-05-10 12:27:59.701 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-05-10 12:27:59.701 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-05-10 12:27:59.701 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-05-10 12:27:59.701 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-05-10 12:27:59.701 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-05-10 12:27:59.701 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-05-10 12:27:59.701 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-05-10 12:27:59.701 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-05-10 12:27:59.701 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-05-10 12:27:59.701 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-05-10 12:27:59.701 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-05-10 12:27:59.701 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-05-10 12:27:59.701 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-05-10 12:27:59.701 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-05-10 12:27:59.701 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-05-10 12:27:59.701 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-05-10 12:27:59.701 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-05-10 12:27:59.701 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-05-10 12:27:59.701 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-05-10 12:27:59.701 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-05-10 12:27:59.701 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-05-10 12:27:59.701 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-05-10 12:27:59.701 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-05-10 12:27:59.701 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-05-10 12:27:59.701 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-05-10 12:27:59.701 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-05-10 12:27:59.701 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-05-10 12:27:59.701 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-05-10 12:27:59.701 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-05-10 12:27:59.701 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-05-10 12:27:59.701 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-05-10 12:27:59.701 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-05-10 12:27:59.701 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-05-10 12:27:59.701 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-05-10 12:27:59.701 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-05-10 12:27:59.701 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-05-10 12:27:59.701 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-05-10 12:27:59.701 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-05-10 12:27:59.701 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-05-10 12:27:59.701 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-05-10 12:27:59.701 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-05-10 12:27:59.701 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-05-10 12:27:59.701 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-05-10 12:27:59.701 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-05-10 12:27:59.701 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-05-10 12:27:59.701 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-05-10 12:27:59.701 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-05-10 12:27:59.701 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-05-10 12:27:59.701 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-05-10 12:27:59.701 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-05-10 12:27:59.701 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-05-10 12:27:59.701 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-05-10 12:27:59.701 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-05-10 12:27:59.701 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-05-10 12:27:59.702 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-05-10 12:27:59.702 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-05-10 12:27:59.702 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-05-10 12:27:59.702 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-05-10 12:27:59.702 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-05-10 12:27:59.702 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-05-10 12:27:59.702 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-05-10 12:27:59.702 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-05-10 12:27:59.702 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-05-10 12:27:59.702 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-05-10 12:27:59.702 +08:00 [INF]   - Volo.Abp.Emailing.AbpEmailingModule
2024-05-10 12:27:59.702 +08:00 [INF]     - Volo.Abp.BackgroundJobs.AbpBackgroundJobsAbstractionsModule
2024-05-10 12:27:59.702 +08:00 [INF]     - Volo.Abp.TextTemplating.AbpTextTemplatingModule
2024-05-10 12:27:59.702 +08:00 [INF]       - Volo.Abp.TextTemplating.Scriban.AbpTextTemplatingScribanModule
2024-05-10 12:27:59.702 +08:00 [INF]         - Volo.Abp.TextTemplating.AbpTextTemplatingCoreModule
2024-05-10 12:27:59.702 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-05-10 12:27:59.702 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-05-10 12:27:59.702 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-05-10 12:27:59.702 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-05-10 12:27:59.702 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-05-10 12:27:59.702 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-05-10 12:27:59.702 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-05-10 12:27:59.702 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-05-10 12:27:59.702 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-05-10 12:27:59.702 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-05-10 12:27:59.702 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-05-10 12:27:59.702 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-05-10 12:27:59.702 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-05-10 12:27:59.707 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-05-10 12:27:59.711 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-05-10 12:28:00.403 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.429 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-05-10 12:28:00.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.464 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-05-10 12:28:00.467 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.477 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.478 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.479 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.486 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-05-10 12:28:00.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-05-10 12:28:00.492 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-05-10 12:28:00.492 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-05-10 12:28:00.492 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-05-10 12:28:00.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-05-10 12:28:00.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-05-10 12:28:00.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-05-10 12:28:00.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-05-10 12:28:00.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-05-10 12:28:00.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-05-10 12:28:00.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.500 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.500 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-05-10 12:28:00.503 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.508 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.509 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.515 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-05-10 12:28:00.518 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.518 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-05-10 12:28:00.518 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.518 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-05-10 12:28:00.519 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.519 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-05-10 12:28:00.519 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.519 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-05-10 12:28:00.519 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.519 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-05-10 12:28:00.519 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.519 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-05-10 12:28:00.519 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.519 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-05-10 12:28:00.519 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.519 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.525 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.525 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-05-10 12:28:00.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.537 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-05-10 12:28:00.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-05-10 12:28:00.540 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-05-10 12:28:00.540 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-05-10 12:28:00.540 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-05-10 12:28:00.540 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-05-10 12:28:00.540 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-05-10 12:28:00.541 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-05-10 12:28:00.541 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-05-10 12:28:00.541 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-05-10 12:28:00.541 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-05-10 12:28:00.541 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-05-10 12:28:00.541 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-05-10 12:28:00.541 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-05-10 12:28:00.542 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.542 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-05-10 12:28:00.542 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.542 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.550 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-05-10 12:28:00.553 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.559 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.565 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.565 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-05-10 12:28:00.567 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.567 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-05-10 12:28:00.567 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.567 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-05-10 12:28:00.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-05-10 12:28:00.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-05-10 12:28:00.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-05-10 12:28:00.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-05-10 12:28:00.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-05-10 12:28:00.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-05-10 12:28:00.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-05-10 12:28:00.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-05-10 12:28:00.569 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-05-10 12:28:00.569 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.574 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-05-10 12:28:00.577 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.581 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.588 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-05-10 12:28:00.590 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-05-10 12:28:00.591 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-05-10 12:28:00.591 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-05-10 12:28:00.591 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.592 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-05-10 12:28:00.592 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.592 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-05-10 12:28:00.592 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.592 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-05-10 12:28:00.592 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.592 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-05-10 12:28:00.592 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.592 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.597 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-05-10 12:28:00.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.605 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.610 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.611 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-05-10 12:28:00.612 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.613 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-05-10 12:28:00.613 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.613 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-05-10 12:28:00.613 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.613 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-05-10 12:28:00.613 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.613 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.619 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.619 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-05-10 12:28:00.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.627 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.628 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.633 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.633 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-05-10 12:28:00.635 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.635 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-05-10 12:28:00.635 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.635 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-05-10 12:28:00.635 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.635 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-05-10 12:28:00.635 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.635 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-05-10 12:28:00.636 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-05-10 12:28:00.636 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-05-10 12:28:00.636 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 12:28:00.643 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.644 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.649 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-05-10 12:28:00.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.658 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.658 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.664 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.664 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-05-10 12:28:00.666 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.666 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-05-10 12:28:00.666 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.666 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-05-10 12:28:00.666 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.666 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-05-10 12:28:00.666 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.667 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-05-10 12:28:00.667 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.667 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-05-10 12:28:00.667 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.667 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-05-10 12:28:00.667 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.667 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-05-10 12:28:00.667 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.667 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-05-10 12:28:00.667 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.667 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-05-10 12:28:00.667 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.667 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-05-10 12:28:00.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-05-10 12:28:00.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-05-10 12:28:00.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-05-10 12:28:00.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-05-10 12:28:00.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-05-10 12:28:00.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-05-10 12:28:00.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-05-10 12:28:00.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-05-10 12:28:00.669 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-05-10 12:28:00.677 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.683 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.686 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.686 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.692 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.692 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-05-10 12:28:00.694 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.694 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-05-10 12:28:00.695 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-05-10 12:28:00.695 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-05-10 12:28:00.695 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-05-10 12:28:00.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.707 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-05-10 12:28:00.714 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-05-10 12:28:00.715 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-05-10 12:28:00.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-05-10 12:28:00.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-05-10 12:28:00.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-05-10 12:28:00.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-05-10 12:28:00.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-05-10 12:28:00.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-05-10 12:28:00.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-05-10 12:28:00.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-05-10 12:28:00.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-05-10 12:28:00.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-05-10 12:28:00.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-05-10 12:28:00.725 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.729 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.730 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.735 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-05-10 12:28:00.737 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.737 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-05-10 12:28:00.737 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.737 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-05-10 12:28:00.737 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.737 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-05-10 12:28:00.737 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.737 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-05-10 12:28:00.737 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.737 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.742 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.742 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-05-10 12:28:00.744 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.749 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.750 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.750 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.755 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.756 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-05-10 12:28:00.758 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-05-10 12:28:00.758 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-05-10 12:28:00.758 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-05-10 12:28:00.758 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-05-10 12:28:00.759 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.759 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-05-10 12:28:00.759 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.759 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-05-10 12:28:00.759 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.759 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-05-10 12:28:00.759 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.759 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-05-10 12:28:00.759 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.759 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-05-10 12:28:00.759 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.759 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-05-10 12:28:00.759 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.759 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-05-10 12:28:00.760 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.760 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-05-10 12:28:00.760 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.760 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-05-10 12:28:00.760 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.760 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.765 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.766 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-05-10 12:28:00.767 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.771 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.772 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.772 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.777 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-05-10 12:28:00.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-05-10 12:28:00.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-05-10 12:28:00.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.786 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.786 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-05-10 12:28:00.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.792 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.794 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-05-10 12:28:00.802 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-05-10 12:28:00.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-05-10 12:28:00.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-05-10 12:28:00.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-05-10 12:28:00.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-05-10 12:28:00.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-05-10 12:28:00.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-05-10 12:28:00.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-05-10 12:28:00.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-05-10 12:28:00.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-05-10 12:28:00.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-05-10 12:28:00.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-05-10 12:28:00.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-05-10 12:28:00.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.805 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-05-10 12:28:00.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.805 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-05-10 12:28:00.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.805 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-05-10 12:28:00.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.805 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-05-10 12:28:00.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.805 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-05-10 12:28:00.806 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-05-10 12:28:00.806 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-05-10 12:28:00.806 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-05-10 12:28:00.806 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-05-10 12:28:00.806 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-05-10 12:28:00.806 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-05-10 12:28:00.807 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.807 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 12:28:00.808 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.808 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.815 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-05-10 12:28:00.817 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.827 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.827 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-05-10 12:28:00.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-05-10 12:28:00.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-05-10 12:28:00.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-05-10 12:28:00.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-05-10 12:28:00.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-05-10 12:28:00.840 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.845 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.845 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-05-10 12:28:00.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-05-10 12:28:00.853 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-05-10 12:28:00.853 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-05-10 12:28:00.853 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-05-10 12:28:00.853 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.858 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.859 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-05-10 12:28:00.860 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.866 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.866 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-05-10 12:28:00.873 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.873 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-05-10 12:28:00.874 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.879 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-05-10 12:28:00.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.884 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.886 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.886 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.891 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-05-10 12:28:00.894 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 12:28:00.895 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 12:28:00.896 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.896 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.902 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-05-10 12:28:00.905 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.911 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.913 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.913 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.921 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.921 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-05-10 12:28:00.923 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 12:28:00.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 12:28:00.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.933 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.933 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-05-10 12:28:00.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.939 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.941 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-05-10 12:28:00.949 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.949 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 12:28:00.951 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 12:28:00.952 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.952 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-05-10 12:28:00.959 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.964 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-05-10 12:28:00.971 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 12:28:00.973 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.973 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.979 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-05-10 12:28:00.981 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.985 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:00.987 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:00.992 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-05-10 12:28:00.995 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-05-10 12:28:00.995 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-05-10 12:28:00.995 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-05-10 12:28:00.995 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:00.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:01.001 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-05-10 12:28:01.003 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:01.008 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:01.015 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-05-10 12:28:01.018 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-05-10 12:28:01.019 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.019 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:01.024 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.025 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-05-10 12:28:01.027 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.031 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:01.032 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.032 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:01.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-05-10 12:28:01.039 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-05-10 12:28:01.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-05-10 12:28:01.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-05-10 12:28:01.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-05-10 12:28:01.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-05-10 12:28:01.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.041 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:01.047 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.047 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-05-10 12:28:01.049 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:01.054 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.054 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:01.059 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-05-10 12:28:01.062 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-05-10 12:28:01.062 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-05-10 12:28:01.063 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.063 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:01.068 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.068 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-05-10 12:28:01.070 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 12:28:01.074 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:01.079 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.080 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-05-10 12:28:01.082 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.082 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-05-10 12:28:01.082 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.082 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-05-10 12:28:01.082 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.082 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-05-10 12:28:01.082 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.082 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-05-10 12:28:01.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 12:28:01.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-05-10 12:28:01.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 12:28:01.178 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 12:28:01.187 +08:00 [DBG] =========Yi-SQL耗时9.4423毫秒=====
2024-05-10 12:28:01.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 12:28:01.218 +08:00 [DBG] =========Yi-SQL耗时1.1775毫秒=====
2024-05-10 12:28:01.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 12:28:01.222 +08:00 [DBG] =========Yi-SQL耗时0.815毫秒=====
2024-05-10 12:28:01.227 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 12:28:01.229 +08:00 [DBG] =========Yi-SQL耗时2.1627毫秒=====
2024-05-10 12:28:01.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 12:28:01.233 +08:00 [DBG] =========Yi-SQL耗时1.0641毫秒=====
2024-05-10 12:28:01.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 12:28:01.237 +08:00 [DBG] =========Yi-SQL耗时1.0078毫秒=====
2024-05-10 12:28:01.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 12:28:01.242 +08:00 [DBG] =========Yi-SQL耗时1.0356毫秒=====
2024-05-10 12:28:01.245 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-05-10 12:28:01.247 +08:00 [DBG] =========Yi-SQL耗时2.0462毫秒=====
2024-05-10 12:28:01.256 +08:00 [DBG] 耗时-1548ms,已加载模块-Yi.Framework.SqlSugarCore
2024-05-10 12:28:01.315 +08:00 [DBG] 耗时-56ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-05-10 12:28:01.319 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-05-10 12:28:01.334 +08:00 [DBG] 耗时-14ms,已加载模块-Volo.Abp.AspNetCore
2024-05-10 12:28:01.339 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-05-10 12:28:01.360 +08:00 [DBG] 耗时-20ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-05-10 12:28:01.362 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-05-10 12:28:01.616 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-05-10 12:28:01.687 +08:00 [DBG] 耗时-324ms,已加载模块-Yi.Abp.Web
2024-05-10 12:28:01.688 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【1973ms】==========
2024-05-10 12:28:01.784 +08:00 [INF] Now listening on: http://[::]:19001
2024-05-10 12:28:01.784 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-05-10 12:28:01.784 +08:00 [INF] Hosting environment: Development
2024-05-10 12:28:01.785 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-05-10 12:29:04.878 +08:00 [INF] CORS policy execution successful.
2024-05-10 12:29:04.933 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 12:29:04.937 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 12:29:04.957 +08:00 [INF] CORS policy execution successful.
2024-05-10 12:29:04.958 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 12:29:05.034 +08:00 [INF] 2024/5/10 12:29:05：cc,m9gRQOh1WcgJy0WQD5rDkw连接服务端success，当前已连接0个
2024-05-10 12:29:36.517 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-05-10 12:29:36.537 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "User", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.UserService (Yi.Abp.Application).
2024-05-10 12:29:36.561 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-05-10 12:29:36.565 +08:00 [INF] Executed action Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application) in 25.2531ms
2024-05-10 12:29:36.565 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-05-10 13:16:06.825 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 13:16:06.841 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 13:19:57.539 +08:00 [INF] CORS policy execution successful.
2024-05-10 13:19:57.587 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 13:19:57.597 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 13:19:57.612 +08:00 [INF] CORS policy execution successful.
2024-05-10 13:19:57.615 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 13:19:57.690 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 13:19:57.745 +08:00 [INF] 2024/5/10 13:19:57：cc,xgeBr7ppu4oYrINnDG1z-A连接服务端success，当前已连接0个
2024-05-10 13:19:57.757 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 13:19:58.027 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:19:58.126 +08:00 [DBG] =========Yi-SQL耗时99.8182毫秒=====
2024-05-10 13:19:58.192 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 13:19:58.196 +08:00 [DBG] =========Yi-SQL耗时3.901毫秒=====
2024-05-10 13:19:58.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 13:19:58.219 +08:00 [DBG] =========Yi-SQL耗时3.2529毫秒=====
2024-05-10 13:19:58.375 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 13:19:58.484 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 725.8154ms
2024-05-10 13:19:58.484 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 13:19:58.492 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 13:19:58.494 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 13:19:58.497 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:19:58.498 +08:00 [DBG] =========Yi-SQL耗时0.9576毫秒=====
2024-05-10 13:19:58.500 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 13:19:58.501 +08:00 [DBG] =========Yi-SQL耗时0.2906毫秒=====
2024-05-10 13:19:58.501 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 13:19:58.502 +08:00 [DBG] =========Yi-SQL耗时0.3208毫秒=====
2024-05-10 13:19:58.509 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:19:58.512 +08:00 [DBG] =========Yi-SQL耗时3.186毫秒=====
2024-05-10 13:19:58.559 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:19:58.565 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 70.6424ms
2024-05-10 13:19:58.565 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 13:19:58.756 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 13:19:58.762 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-05-10 13:19:58.763 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:19:58.774 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-05-10 13:19:58.774 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 13:19:58.775 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-05-10 13:19:58.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:19:58.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 13:19:58.819 +08:00 [DBG] =========Yi-SQL耗时5.2461毫秒=====
2024-05-10 13:19:58.846 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 13:19:58.858 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 83.9903ms
2024-05-10 13:19:58.858 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 13:19:58.892 +08:00 [DBG] =========Yi-SQL耗时78.8686毫秒=====
2024-05-10 13:19:58.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:19:58.910 +08:00 [DBG] =========Yi-SQL耗时5.1824毫秒=====
2024-05-10 13:19:58.918 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:19:58.922 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-05-10 13:19:58.924 +08:00 [DBG] =========Yi-SQL耗时1.8874毫秒=====
2024-05-10 13:19:58.925 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 151.0897ms
2024-05-10 13:19:58.925 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-05-10 13:19:58.944 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:19:58.948 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 172.1041ms
2024-05-10 13:19:58.948 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:50:55.080 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 13:50:55.090 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 13:52:35.890 +08:00 [INF] CORS policy execution successful.
2024-05-10 13:52:35.995 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 13:52:35.999 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 13:52:36.004 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 13:52:36.017 +08:00 [INF] CORS policy execution successful.
2024-05-10 13:52:36.020 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 13:52:36.027 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 13:52:36.180 +08:00 [INF] 2024/5/10 13:52:36：cc,fpUF00NfKuvEanSDZ7oURw连接服务端success，当前已连接0个
2024-05-10 13:52:36.294 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 13:52:36.317 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 288.8771ms
2024-05-10 13:52:36.317 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 13:52:36.331 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 13:52:36.332 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 13:52:36.366 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:52:36.520 +08:00 [DBG] =========Yi-SQL耗时154.096毫秒=====
2024-05-10 13:52:36.525 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 13:52:36.530 +08:00 [DBG] =========Yi-SQL耗时5.1233毫秒=====
2024-05-10 13:52:36.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 13:52:36.535 +08:00 [DBG] =========Yi-SQL耗时3.0069毫秒=====
2024-05-10 13:52:36.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:52:36.542 +08:00 [DBG] =========Yi-SQL耗时4.3124毫秒=====
2024-05-10 13:52:36.545 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:52:36.547 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 214.5114ms
2024-05-10 13:52:36.547 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 13:52:36.788 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 13:52:36.788 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:52:36.788 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-05-10 13:52:36.789 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-05-10 13:52:36.789 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 13:52:36.790 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-05-10 13:52:36.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 13:52:36.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:52:36.805 +08:00 [DBG] =========Yi-SQL耗时6.6037毫秒=====
2024-05-10 13:52:36.817 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 13:52:36.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:52:36.826 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 36.0193ms
2024-05-10 13:52:36.826 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 13:52:36.829 +08:00 [DBG] =========Yi-SQL耗时7.482毫秒=====
2024-05-10 13:52:36.896 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-05-10 13:52:36.897 +08:00 [DBG] =========Yi-SQL耗时1.3911毫秒=====
2024-05-10 13:52:36.909 +08:00 [DBG] =========Yi-SQL耗时107.2772毫秒=====
2024-05-10 13:52:36.912 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:52:36.913 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:52:36.913 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 123.5931ms
2024-05-10 13:52:36.913 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:52:36.914 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 124.6922ms
2024-05-10 13:52:36.914 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-05-10 13:52:45.440 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:52:45.440 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:52:45.441 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-05-10 13:52:45.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:52:45.448 +08:00 [DBG] =========Yi-SQL耗时0.9204毫秒=====
2024-05-10 13:52:45.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 50 offset 0
===============================

2024-05-10 13:52:45.455 +08:00 [DBG] =========Yi-SQL耗时3.7535毫秒=====
2024-05-10 13:52:45.469 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:52:45.469 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 27.8377ms
2024-05-10 13:52:45.469 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:52:45.471 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-05-10 13:52:45.501 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:52:45.502 +08:00 [DBG] =========Yi-SQL耗时1.0667毫秒=====
2024-05-10 13:52:45.505 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-05-10 13:52:45.506 +08:00 [DBG] =========Yi-SQL耗时0.5327毫秒=====
2024-05-10 13:52:45.512 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:52:45.521 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 49.4911ms
2024-05-10 13:52:45.521 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:52:48.752 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:52:48.753 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-05-10 13:52:48.757 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:52:48.758 +08:00 [DBG] =========Yi-SQL耗时1.0142毫秒=====
2024-05-10 13:52:48.761 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 30
===============================

2024-05-10 13:52:48.763 +08:00 [DBG] =========Yi-SQL耗时1.0195毫秒=====
2024-05-10 13:52:48.766 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:52:48.766 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 13.0933ms
2024-05-10 13:52:48.766 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:52:50.974 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:52:50.974 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-05-10 13:52:50.978 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:52:50.979 +08:00 [DBG] =========Yi-SQL耗时0.8589毫秒=====
2024-05-10 13:52:50.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-05-10 13:52:50.982 +08:00 [DBG] =========Yi-SQL耗时0.4667毫秒=====
2024-05-10 13:52:50.987 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:52:50.988 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 13.5007ms
2024-05-10 13:52:50.988 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:53:07.105 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:53:07.105 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-05-10 13:53:07.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:53:07.110 +08:00 [DBG] =========Yi-SQL耗时0.8104毫秒=====
2024-05-10 13:53:07.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-05-10 13:53:07.115 +08:00 [DBG] =========Yi-SQL耗时2.2882毫秒=====
2024-05-10 13:53:07.126 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:53:07.128 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 22.6453ms
2024-05-10 13:53:07.128 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:53:10.137 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:53:10.137 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:53:10.138 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-05-10 13:53:10.138 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-05-10 13:53:10.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:53:10.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:53:10.144 +08:00 [DBG] =========Yi-SQL耗时1.9552毫秒=====
2024-05-10 13:53:10.145 +08:00 [DBG] =========Yi-SQL耗时1.7593毫秒=====
2024-05-10 13:53:10.153 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 50 offset 0
===============================

2024-05-10 13:53:10.156 +08:00 [DBG] =========Yi-SQL耗时3.1178毫秒=====
2024-05-10 13:53:10.167 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:53:10.168 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 30.388ms
2024-05-10 13:53:10.168 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:53:10.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-05-10 13:53:10.188 +08:00 [DBG] =========Yi-SQL耗时0.6325毫秒=====
2024-05-10 13:53:10.198 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:53:10.199 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 60.7183ms
2024-05-10 13:53:10.199 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:53:19.417 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-05-10 13:53:19.417 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-05-10 13:53:19.422 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-05-10 13:53:19.422 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-05-10 13:53:19.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:53:19.424 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-05-10 13:53:19.425 +08:00 [DBG] =========Yi-SQL耗时1.4845毫秒=====
2024-05-10 13:53:19.428 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-05-10 13:53:19.430 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:53:19.431 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.4478ms
2024-05-10 13:53:19.431 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-05-10 13:53:19.432 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-05-10 13:53:19.432 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-05-10 13:53:19.450 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:53:19.462 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 34.0775ms
2024-05-10 13:53:19.462 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-05-10 13:53:19.468 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-05-10 13:53:19.472 +08:00 [DBG] =========Yi-SQL耗时4.3926毫秒=====
2024-05-10 13:53:19.474 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-05-10 13:53:19.478 +08:00 [DBG] =========Yi-SQL耗时3.8575毫秒=====
2024-05-10 13:53:19.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-05-10 13:53:19.484 +08:00 [DBG] =========Yi-SQL耗时2.4036毫秒=====
2024-05-10 13:53:19.485 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-05-10 13:53:19.486 +08:00 [DBG] =========Yi-SQL耗时0.3709毫秒=====
2024-05-10 13:53:19.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-05-10 13:53:19.492 +08:00 [DBG] =========Yi-SQL耗时1.1602毫秒=====
2024-05-10 13:53:19.515 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:53:19.520 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:53:19.523 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 91.0455ms
2024-05-10 13:53:19.523 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-05-10 13:53:19.523 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 91.3707ms
2024-05-10 13:53:19.523 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-05-10 13:53:23.286 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TemplateService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-05-10 13:53:23.292 +08:00 [INF] Route matched with {action = "GetList", controller = "Template", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TemplateService (Yi.Framework.CodeGen.Application).
2024-05-10 13:53:23.304 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitemplate"  
===============================

2024-05-10 13:53:23.307 +08:00 [DBG] =========Yi-SQL耗时3.3796毫秒=====
2024-05-10 13:53:23.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","templatestr","buildpath","name","remarks" FROM "yitemplate"     LIMIT 10 offset 0
===============================

2024-05-10 13:53:23.311 +08:00 [DBG] =========Yi-SQL耗时2.4928毫秒=====
2024-05-10 13:53:23.324 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:53:23.330 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TemplateService.GetListAsync (Yi.Framework.CodeGen.Application) in 38.0912ms
2024-05-10 13:53:23.330 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TemplateService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-05-10 13:53:29.963 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:53:29.964 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-05-10 13:53:29.965 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:53:29.965 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-05-10 13:53:29.967 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:53:29.970 +08:00 [DBG] =========Yi-SQL耗时2.6182毫秒=====
2024-05-10 13:53:29.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:53:29.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-05-10 13:53:29.971 +08:00 [DBG] =========Yi-SQL耗时0.7993毫秒=====
2024-05-10 13:53:29.973 +08:00 [DBG] =========Yi-SQL耗时2.2834毫秒=====
2024-05-10 13:53:29.979 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 50 offset 0
===============================

2024-05-10 13:53:29.985 +08:00 [DBG] =========Yi-SQL耗时6.2912毫秒=====
2024-05-10 13:53:29.990 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:53:29.991 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 25.9275ms
2024-05-10 13:53:29.991 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:53:30.004 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:53:30.005 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 41.1395ms
2024-05-10 13:53:30.005 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:53:32.685 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.RecordLog.OperationLogService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:53:32.685 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-05-10 13:53:32.685 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-05-10 13:53:32.688 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-05-10 13:53:32.688 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-05-10 13:53:32.691 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_oper_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:53:32.693 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_common_status' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:53:32.693 +08:00 [DBG] =========Yi-SQL耗时2.0706毫秒=====
2024-05-10 13:53:32.695 +08:00 [DBG] =========Yi-SQL耗时1.8933毫秒=====
2024-05-10 13:53:32.695 +08:00 [INF] Route matched with {action = "GetList", controller = "OperationLog", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.OperLog.OperationLogGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.OperLog.OperationLogGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.RecordLog.OperationLogService (Yi.Framework.Rbac.Application).
2024-05-10 13:53:32.699 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:53:32.699 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 10.7976ms
2024-05-10 13:53:32.699 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-05-10 13:53:32.754 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:53:32.755 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 66.692ms
2024-05-10 13:53:32.755 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-05-10 13:53:32.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "operationlog"  
===============================

2024-05-10 13:53:32.782 +08:00 [DBG] =========Yi-SQL耗时5.8149毫秒=====
2024-05-10 13:53:32.783 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","title","opertype","requestmethod","operuser","operip","operlocation","method","requestparam","requestresult","creationtime","creatorid" FROM "operationlog"     LIMIT 10 offset 0
===============================

2024-05-10 13:53:32.784 +08:00 [DBG] =========Yi-SQL耗时1.004毫秒=====
2024-05-10 13:53:32.820 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.OperLog.OperationLogGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:53:32.829 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.RecordLog.OperationLogService.GetListAsync (Yi.Framework.Rbac.Application) in 133.4205ms
2024-05-10 13:53:32.829 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.RecordLog.OperationLogService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:53:49.376 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 13:53:49.379 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-05-10 13:53:49.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 13:53:49.416 +08:00 [DBG] =========Yi-SQL耗时4.9463毫秒=====
2024-05-10 13:53:49.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-05-10 13:53:49.418 +08:00 [DBG] =========Yi-SQL耗时1.1683毫秒=====
2024-05-10 13:53:49.440 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 13:53:49.446 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 67.0188ms
2024-05-10 13:53:49.446 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-05-10 15:07:15.411 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-05-10 15:07:15.435 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-05-10 15:07:21.976 +08:00 [INF] Loaded ABP modules:
2024-05-10 15:07:21.977 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-05-10 15:07:21.977 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-05-10 15:07:21.977 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-05-10 15:07:21.977 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-05-10 15:07:21.977 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-05-10 15:07:21.977 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-05-10 15:07:21.977 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-05-10 15:07:21.977 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-05-10 15:07:21.977 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-05-10 15:07:21.977 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-05-10 15:07:21.977 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-05-10 15:07:21.977 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-05-10 15:07:21.977 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-05-10 15:07:21.977 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-05-10 15:07:21.977 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-05-10 15:07:21.977 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-05-10 15:07:21.977 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-05-10 15:07:21.977 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-05-10 15:07:21.977 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-05-10 15:07:21.977 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-05-10 15:07:21.977 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-05-10 15:07:21.977 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-05-10 15:07:21.977 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-05-10 15:07:21.977 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-05-10 15:07:21.977 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-05-10 15:07:21.977 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-05-10 15:07:21.977 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-05-10 15:07:21.977 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-05-10 15:07:21.977 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-05-10 15:07:21.977 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-05-10 15:07:21.977 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-05-10 15:07:21.977 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-05-10 15:07:21.977 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-05-10 15:07:21.977 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-05-10 15:07:21.977 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-05-10 15:07:21.977 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-05-10 15:07:21.977 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-05-10 15:07:21.977 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-05-10 15:07:21.977 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-05-10 15:07:21.977 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-05-10 15:07:21.977 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-05-10 15:07:21.977 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-05-10 15:07:21.977 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-05-10 15:07:21.977 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-05-10 15:07:21.977 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-05-10 15:07:21.977 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-05-10 15:07:21.977 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-05-10 15:07:21.977 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-05-10 15:07:21.977 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-05-10 15:07:21.977 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-05-10 15:07:21.977 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-05-10 15:07:21.977 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-05-10 15:07:21.977 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-05-10 15:07:21.977 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-05-10 15:07:21.977 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-05-10 15:07:21.977 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-05-10 15:07:21.977 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-05-10 15:07:21.977 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-05-10 15:07:21.977 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-05-10 15:07:21.977 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-05-10 15:07:21.977 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-05-10 15:07:21.977 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-05-10 15:07:21.977 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-05-10 15:07:21.977 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-05-10 15:07:21.977 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-05-10 15:07:21.977 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-05-10 15:07:21.977 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-05-10 15:07:21.977 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-05-10 15:07:21.977 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-05-10 15:07:21.977 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-05-10 15:07:21.977 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-05-10 15:07:21.977 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-05-10 15:07:21.977 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-05-10 15:07:21.977 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-05-10 15:07:21.977 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-05-10 15:07:21.977 +08:00 [INF]   - Volo.Abp.Emailing.AbpEmailingModule
2024-05-10 15:07:21.977 +08:00 [INF]     - Volo.Abp.BackgroundJobs.AbpBackgroundJobsAbstractionsModule
2024-05-10 15:07:21.977 +08:00 [INF]     - Volo.Abp.TextTemplating.AbpTextTemplatingModule
2024-05-10 15:07:21.977 +08:00 [INF]       - Volo.Abp.TextTemplating.Scriban.AbpTextTemplatingScribanModule
2024-05-10 15:07:21.977 +08:00 [INF]         - Volo.Abp.TextTemplating.AbpTextTemplatingCoreModule
2024-05-10 15:07:21.977 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-05-10 15:07:21.977 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-05-10 15:07:21.977 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-05-10 15:07:21.977 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-05-10 15:07:21.977 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-05-10 15:07:21.977 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-05-10 15:07:21.977 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-05-10 15:07:21.977 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-05-10 15:07:21.977 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-05-10 15:07:21.977 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-05-10 15:07:21.977 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-05-10 15:07:21.977 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-05-10 15:07:21.977 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-05-10 15:07:21.989 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-05-10 15:07:21.995 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-05-10 15:07:22.738 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:22.749 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.766 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:22.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.783 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-05-10 15:07:22.786 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.793 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:22.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-05-10 15:07:22.806 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:22.817 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.817 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:22.824 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-05-10 15:07:22.827 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-05-10 15:07:22.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-05-10 15:07:22.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-05-10 15:07:22.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-05-10 15:07:22.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-05-10 15:07:22.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-05-10 15:07:22.832 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-05-10 15:07:22.832 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-05-10 15:07:22.832 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-05-10 15:07:22.832 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.833 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-05-10 15:07:22.833 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:22.841 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.841 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-05-10 15:07:22.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.848 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:22.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.851 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:22.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.858 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-05-10 15:07:22.860 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.860 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-05-10 15:07:22.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-05-10 15:07:22.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-05-10 15:07:22.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-05-10 15:07:22.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-05-10 15:07:22.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-05-10 15:07:22.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-05-10 15:07:22.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:22.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-05-10 15:07:22.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:22.878 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:22.885 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.886 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-05-10 15:07:22.888 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.888 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-05-10 15:07:22.888 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.888 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-05-10 15:07:22.888 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.888 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-05-10 15:07:22.888 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.888 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-05-10 15:07:22.888 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-05-10 15:07:22.889 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-05-10 15:07:22.889 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-05-10 15:07:22.889 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-05-10 15:07:22.889 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-05-10 15:07:22.889 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-05-10 15:07:22.889 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-05-10 15:07:22.889 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-05-10 15:07:22.890 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.890 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-05-10 15:07:22.890 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.890 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-05-10 15:07:22.890 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.890 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:22.896 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-05-10 15:07:22.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:22.905 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:22.912 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.912 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-05-10 15:07:22.915 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.915 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-05-10 15:07:22.915 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.915 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-05-10 15:07:22.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-05-10 15:07:22.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-05-10 15:07:22.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-05-10 15:07:22.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-05-10 15:07:22.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-05-10 15:07:22.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-05-10 15:07:22.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-05-10 15:07:22.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-05-10 15:07:22.917 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.917 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-05-10 15:07:22.917 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.917 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:22.922 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-05-10 15:07:22.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.930 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:22.932 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.932 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:22.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-05-10 15:07:22.940 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.940 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-05-10 15:07:22.940 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.940 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-05-10 15:07:22.940 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.940 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-05-10 15:07:22.941 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-05-10 15:07:22.941 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-05-10 15:07:22.941 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-05-10 15:07:22.941 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-05-10 15:07:22.941 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:22.948 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-05-10 15:07:22.951 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:22.956 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:22.963 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-05-10 15:07:22.966 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.966 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-05-10 15:07:22.966 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.966 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-05-10 15:07:22.966 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.966 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-05-10 15:07:22.967 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.967 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:22.972 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-05-10 15:07:22.974 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.981 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:22.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:22.992 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-05-10 15:07:22.995 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-05-10 15:07:22.996 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-05-10 15:07:22.996 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-05-10 15:07:22.996 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-05-10 15:07:22.996 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-05-10 15:07:22.996 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-05-10 15:07:22.996 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:22.997 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 15:07:23.004 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.010 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.010 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-05-10 15:07:23.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:23.019 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.019 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.025 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.025 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-05-10 15:07:23.027 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-05-10 15:07:23.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-05-10 15:07:23.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-05-10 15:07:23.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-05-10 15:07:23.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-05-10 15:07:23.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-05-10 15:07:23.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-05-10 15:07:23.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-05-10 15:07:23.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-05-10 15:07:23.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-05-10 15:07:23.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-05-10 15:07:23.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-05-10 15:07:23.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-05-10 15:07:23.030 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-05-10 15:07:23.030 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-05-10 15:07:23.030 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-05-10 15:07:23.030 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-05-10 15:07:23.030 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-05-10 15:07:23.030 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-05-10 15:07:23.038 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:23.047 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.047 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-05-10 15:07:23.054 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-05-10 15:07:23.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-05-10 15:07:23.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-05-10 15:07:23.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.060 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-05-10 15:07:23.063 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.067 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:23.069 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.069 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.074 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.074 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-05-10 15:07:23.076 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.076 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-05-10 15:07:23.077 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-05-10 15:07:23.077 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-05-10 15:07:23.077 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-05-10 15:07:23.077 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-05-10 15:07:23.077 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-05-10 15:07:23.077 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-05-10 15:07:23.077 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-05-10 15:07:23.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-05-10 15:07:23.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-05-10 15:07:23.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-05-10 15:07:23.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-05-10 15:07:23.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-05-10 15:07:23.087 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:23.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.097 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-05-10 15:07:23.099 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-05-10 15:07:23.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-05-10 15:07:23.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-05-10 15:07:23.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-05-10 15:07:23.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.105 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.105 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-05-10 15:07:23.107 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:23.114 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.114 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.119 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-05-10 15:07:23.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-05-10 15:07:23.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-05-10 15:07:23.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-05-10 15:07:23.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-05-10 15:07:23.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-05-10 15:07:23.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-05-10 15:07:23.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-05-10 15:07:23.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-05-10 15:07:23.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-05-10 15:07:23.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-05-10 15:07:23.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-05-10 15:07:23.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-05-10 15:07:23.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-05-10 15:07:23.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.130 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.130 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-05-10 15:07:23.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:23.136 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-05-10 15:07:23.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-05-10 15:07:23.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-05-10 15:07:23.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.150 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.150 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-05-10 15:07:23.152 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:23.158 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.165 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.165 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-05-10 15:07:23.167 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-05-10 15:07:23.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-05-10 15:07:23.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-05-10 15:07:23.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-05-10 15:07:23.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-05-10 15:07:23.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-05-10 15:07:23.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-05-10 15:07:23.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-05-10 15:07:23.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-05-10 15:07:23.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-05-10 15:07:23.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-05-10 15:07:23.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-05-10 15:07:23.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-05-10 15:07:23.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-05-10 15:07:23.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-05-10 15:07:23.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-05-10 15:07:23.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-05-10 15:07:23.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-05-10 15:07:23.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-05-10 15:07:23.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-05-10 15:07:23.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-05-10 15:07:23.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-05-10 15:07:23.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-05-10 15:07:23.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-05-10 15:07:23.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 15:07:23.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-05-10 15:07:23.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:23.186 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.186 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.192 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.192 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-05-10 15:07:23.194 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-05-10 15:07:23.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-05-10 15:07:23.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-05-10 15:07:23.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-05-10 15:07:23.196 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-05-10 15:07:23.203 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.207 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:23.209 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.209 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.215 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-05-10 15:07:23.217 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-05-10 15:07:23.217 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-05-10 15:07:23.217 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-05-10 15:07:23.217 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-05-10 15:07:23.217 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.223 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-05-10 15:07:23.225 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:23.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-05-10 15:07:23.238 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-05-10 15:07:23.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.244 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-05-10 15:07:23.247 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:23.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-05-10 15:07:23.261 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 15:07:23.263 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 15:07:23.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.270 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.270 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-05-10 15:07:23.272 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:23.279 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.279 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.286 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.286 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-05-10 15:07:23.288 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.289 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 15:07:23.290 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.290 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 15:07:23.291 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.297 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-05-10 15:07:23.300 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.304 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:23.306 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.306 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.312 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-05-10 15:07:23.315 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 15:07:23.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 15:07:23.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.323 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.323 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-05-10 15:07:23.325 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.328 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:23.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.336 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-05-10 15:07:23.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-05-10 15:07:23.340 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-05-10 15:07:23.348 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:23.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.359 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-05-10 15:07:23.362 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.363 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-05-10 15:07:23.363 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-05-10 15:07:23.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-05-10 15:07:23.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-05-10 15:07:23.372 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:23.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.386 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.386 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-05-10 15:07:23.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-05-10 15:07:23.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.396 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-05-10 15:07:23.401 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.405 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:23.406 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.407 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.413 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.414 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-05-10 15:07:23.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-05-10 15:07:23.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-05-10 15:07:23.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-05-10 15:07:23.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-05-10 15:07:23.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-05-10 15:07:23.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-05-10 15:07:23.426 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.431 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:23.432 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.438 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-05-10 15:07:23.442 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.442 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-05-10 15:07:23.442 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.442 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-05-10 15:07:23.442 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.442 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.449 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-05-10 15:07:23.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.457 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-05-10 15:07:23.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.466 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.466 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-05-10 15:07:23.469 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-05-10 15:07:23.470 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-05-10 15:07:23.471 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.471 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-05-10 15:07:23.471 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.471 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-05-10 15:07:23.471 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.471 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-05-10 15:07:23.480 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.480 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-05-10 15:07:23.483 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-05-10 15:07:23.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 15:07:23.588 +08:00 [DBG] =========Yi-SQL耗时9.0497毫秒=====
2024-05-10 15:07:23.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 15:07:23.605 +08:00 [DBG] =========Yi-SQL耗时1.3624毫秒=====
2024-05-10 15:07:23.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 15:07:23.609 +08:00 [DBG] =========Yi-SQL耗时1.7342毫秒=====
2024-05-10 15:07:23.616 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 15:07:23.619 +08:00 [DBG] =========Yi-SQL耗时2.9558毫秒=====
2024-05-10 15:07:23.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 15:07:23.622 +08:00 [DBG] =========Yi-SQL耗时1.0209毫秒=====
2024-05-10 15:07:23.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 15:07:23.627 +08:00 [DBG] =========Yi-SQL耗时1.8479毫秒=====
2024-05-10 15:07:23.633 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-05-10 15:07:23.634 +08:00 [DBG] =========Yi-SQL耗时1.6912毫秒=====
2024-05-10 15:07:23.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-05-10 15:07:23.638 +08:00 [DBG] =========Yi-SQL耗时1.2405毫秒=====
2024-05-10 15:07:23.648 +08:00 [DBG] 耗时-1657ms,已加载模块-Yi.Framework.SqlSugarCore
2024-05-10 15:07:23.707 +08:00 [DBG] 耗时-57ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-05-10 15:07:23.711 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-05-10 15:07:23.726 +08:00 [DBG] 耗时-14ms,已加载模块-Volo.Abp.AspNetCore
2024-05-10 15:07:23.731 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-05-10 15:07:23.753 +08:00 [DBG] 耗时-22ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-05-10 15:07:23.756 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-05-10 15:07:24.042 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-05-10 15:07:24.115 +08:00 [DBG] 耗时-358ms,已加载模块-Yi.Abp.Web
2024-05-10 15:07:24.116 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2119ms】==========
2024-05-10 15:07:24.214 +08:00 [INF] Now listening on: http://[::]:19001
2024-05-10 15:07:24.214 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-05-10 15:07:24.215 +08:00 [INF] Hosting environment: Development
2024-05-10 15:07:24.215 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-05-10 15:07:43.399 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:07:43.507 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 15:07:43.507 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:07:43.511 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 15:07:43.521 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:07:43.523 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 15:07:43.528 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:07:43.622 +08:00 [INF] 2024/5/10 15:07:43：cc,VcElyCn6AtZ7Tlc7dOfCrg连接服务端success，当前已连接0个
2024-05-10 15:07:43.733 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:07:43.745 +08:00 [DBG] =========Yi-SQL耗时12.0813毫秒=====
2024-05-10 15:07:43.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 15:07:43.831 +08:00 [DBG] =========Yi-SQL耗时10.0811毫秒=====
2024-05-10 15:07:43.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 15:07:43.848 +08:00 [DBG] =========Yi-SQL耗时1.7355毫秒=====
2024-05-10 15:07:43.964 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 15:07:44.060 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 527.5483ms
2024-05-10 15:07:44.060 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:07:44.073 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:07:44.076 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:07:44.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:07:44.081 +08:00 [DBG] =========Yi-SQL耗时1.4645毫秒=====
2024-05-10 15:07:44.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 15:07:44.084 +08:00 [DBG] =========Yi-SQL耗时0.4534毫秒=====
2024-05-10 15:07:44.084 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 15:07:44.084 +08:00 [DBG] =========Yi-SQL耗时0.3329毫秒=====
2024-05-10 15:07:44.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:07:44.088 +08:00 [DBG] =========Yi-SQL耗时0.7356毫秒=====
2024-05-10 15:07:44.117 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 15:07:44.120 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 44.158ms
2024-05-10 15:07:44.120 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:08:38.937 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 15:08:38.943 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 15:08:39.666 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:08:39.671 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 15:08:39.672 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 15:08:39.672 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:08:39.673 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:08:39.679 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:08:39.684 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 15:08:39.725 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 15:08:39.726 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 52.6886ms
2024-05-10 15:08:39.726 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:08:39.737 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:08:39.737 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:08:39.738 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:08:39.740 +08:00 [DBG] =========Yi-SQL耗时1.2457毫秒=====
2024-05-10 15:08:39.742 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 15:08:39.742 +08:00 [DBG] =========Yi-SQL耗时0.3127毫秒=====
2024-05-10 15:08:39.742 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 15:08:39.743 +08:00 [DBG] =========Yi-SQL耗时0.29毫秒=====
2024-05-10 15:08:39.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:08:39.744 +08:00 [DBG] =========Yi-SQL耗时0.5078毫秒=====
2024-05-10 15:08:39.744 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 15:08:39.745 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 8.0736ms
2024-05-10 15:08:39.745 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:08:39.752 +08:00 [INF] 2024/5/10 15:08:39：cc,S0JGV6IO7YsF0KBg1oh1yw连接服务端success，当前已连接0个
2024-05-10 15:08:52.778 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 15:08:52.779 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 15:08:52.904 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:08:52.906 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 15:08:52.909 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 15:08:52.921 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:08:52.921 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:08:52.929 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 15:08:52.929 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 8.4564ms
2024-05-10 15:08:52.930 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:08:52.935 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:08:52.936 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 15:08:52.941 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:08:52.941 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:08:52.942 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:08:52.943 +08:00 [DBG] =========Yi-SQL耗时0.7108毫秒=====
2024-05-10 15:08:52.945 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 15:08:52.945 +08:00 [DBG] =========Yi-SQL耗时0.2897毫秒=====
2024-05-10 15:08:52.945 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 15:08:52.946 +08:00 [DBG] =========Yi-SQL耗时0.2637毫秒=====
2024-05-10 15:08:52.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:08:52.947 +08:00 [DBG] =========Yi-SQL耗时0.3992毫秒=====
2024-05-10 15:08:52.947 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 15:08:52.948 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 7.2783ms
2024-05-10 15:08:52.948 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:08:52.968 +08:00 [INF] 2024/5/10 15:08:52：cc,hG1v3Mpbw-ltpVIx9C04Bg连接服务端success，当前已连接0个
2024-05-10 15:36:43.093 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 15:36:43.097 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 15:36:43.311 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:36:43.332 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 15:36:43.332 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:36:43.333 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 15:36:43.335 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:36:43.346 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:36:43.349 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 15:36:43.357 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 15:36:43.358 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 23.6182ms
2024-05-10 15:36:43.358 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:36:43.368 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:36:43.368 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:36:43.375 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:36:43.389 +08:00 [INF] 2024/5/10 15:36:43：cc,rU1vX0PC38l9JpSQWZ624g连接服务端success，当前已连接0个
2024-05-10 15:36:43.522 +08:00 [DBG] =========Yi-SQL耗时147.2101毫秒=====
2024-05-10 15:36:43.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 15:36:43.531 +08:00 [DBG] =========Yi-SQL耗时4.4126毫秒=====
2024-05-10 15:36:43.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 15:36:43.537 +08:00 [DBG] =========Yi-SQL耗时2.8682毫秒=====
2024-05-10 15:36:43.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:36:43.552 +08:00 [DBG] =========Yi-SQL耗时8.2497毫秒=====
2024-05-10 15:36:43.569 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 15:36:43.573 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 204.4865ms
2024-05-10 15:36:43.573 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:36:48.848 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 15:36:48.848 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 15:36:55.507 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:36:55.511 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 15:36:55.512 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 15:36:55.514 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:36:55.516 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:36:55.521 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:36:55.530 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 15:36:55.530 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:36:55.531 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 11.9499ms
2024-05-10 15:36:55.531 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:36:55.531 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 15:36:55.531 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 15:36:55.546 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 15:36:55.552 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:36:55.552 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:36:55.554 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 15:36:55.554 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.1096ms
2024-05-10 15:36:55.554 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:36:55.563 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:36:55.566 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:36:55.568 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:36:55.575 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 15:36:55.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:36:55.580 +08:00 [DBG] =========Yi-SQL耗时2.2792毫秒=====
2024-05-10 15:36:55.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 15:36:55.585 +08:00 [DBG] =========Yi-SQL耗时0.9231毫秒=====
2024-05-10 15:36:55.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 15:36:55.588 +08:00 [DBG] =========Yi-SQL耗时0.5262毫秒=====
2024-05-10 15:36:55.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:36:55.590 +08:00 [DBG] =========Yi-SQL耗时1.3108毫秒=====
2024-05-10 15:36:55.591 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 15:36:55.591 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 25.3896ms
2024-05-10 15:36:55.591 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:36:55.601 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:36:55.601 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:36:55.604 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:36:55.605 +08:00 [DBG] =========Yi-SQL耗时1.2722毫秒=====
2024-05-10 15:36:55.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 15:36:55.608 +08:00 [DBG] =========Yi-SQL耗时0.6819毫秒=====
2024-05-10 15:36:55.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 15:36:55.611 +08:00 [DBG] =========Yi-SQL耗时1.5121毫秒=====
2024-05-10 15:36:55.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:36:55.615 +08:00 [DBG] =========Yi-SQL耗时2.3015毫秒=====
2024-05-10 15:36:55.616 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 15:36:55.617 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 15.8701ms
2024-05-10 15:36:55.617 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:36:55.629 +08:00 [INF] 2024/5/10 15:36:55：cc,oiBQ10tLQNbUHV6xn4GuMw连接服务端success，当前已连接0个
2024-05-10 15:36:55.665 +08:00 [INF] 2024/5/10 15:36:55：cc,LI79F-3NlmKfNrDLa8K6BQ连接服务端success，当前已连接0个
2024-05-10 15:38:12.803 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 15:38:12.804 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 15:38:13.238 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:38:13.242 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 15:38:13.243 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 15:38:13.280 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:38:13.280 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:38:13.281 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:38:13.283 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 15:38:13.288 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 15:38:13.289 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 8.13ms
2024-05-10 15:38:13.289 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:38:13.332 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:38:13.334 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:38:13.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:38:13.375 +08:00 [DBG] =========Yi-SQL耗时16.149毫秒=====
2024-05-10 15:38:13.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 15:38:13.397 +08:00 [DBG] =========Yi-SQL耗时0.968毫秒=====
2024-05-10 15:38:13.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 15:38:13.400 +08:00 [DBG] =========Yi-SQL耗时1.1841毫秒=====
2024-05-10 15:38:13.401 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:38:13.402 +08:00 [DBG] =========Yi-SQL耗时1.3837毫秒=====
2024-05-10 15:38:13.405 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 15:38:13.406 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 63.5912ms
2024-05-10 15:38:13.406 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:38:13.472 +08:00 [INF] 2024/5/10 15:38:13：cc,v2QPKDPEVYXWfkFhPjUu_w连接服务端success，当前已连接0个
2024-05-10 15:39:47.657 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 15:39:47.658 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 15:39:48.479 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:39:48.491 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 15:39:48.492 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 15:39:48.503 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:39:48.504 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:39:48.508 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 15:39:48.512 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 7.5081ms
2024-05-10 15:39:48.512 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:39:48.513 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:39:48.519 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 15:39:48.562 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:39:48.572 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:39:48.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:39:48.581 +08:00 [DBG] =========Yi-SQL耗时4.2021毫秒=====
2024-05-10 15:39:48.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 15:39:48.586 +08:00 [DBG] =========Yi-SQL耗时0.8628毫秒=====
2024-05-10 15:39:48.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 15:39:48.587 +08:00 [DBG] =========Yi-SQL耗时0.6993毫秒=====
2024-05-10 15:39:48.589 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:39:48.590 +08:00 [DBG] =========Yi-SQL耗时1.2276毫秒=====
2024-05-10 15:39:48.592 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 15:39:48.593 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 20.3792ms
2024-05-10 15:39:48.593 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:39:48.640 +08:00 [INF] 2024/5/10 15:39:48：cc,ZdpQQwMGxLm_AERbTuyGPg连接服务端success，当前已连接0个
2024-05-10 15:40:11.134 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 15:40:11.138 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 15:40:11.956 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:40:11.974 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 15:40:11.975 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 15:40:11.982 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:40:11.983 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:40:11.986 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 15:40:11.987 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.2035ms
2024-05-10 15:40:11.987 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:40:11.995 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:40:11.999 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 15:40:12.005 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:40:12.006 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:40:12.010 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:40:12.015 +08:00 [DBG] =========Yi-SQL耗时4.2825毫秒=====
2024-05-10 15:40:12.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 15:40:12.019 +08:00 [DBG] =========Yi-SQL耗时0.923毫秒=====
2024-05-10 15:40:12.021 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 15:40:12.022 +08:00 [DBG] =========Yi-SQL耗时0.9129毫秒=====
2024-05-10 15:40:12.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:40:12.030 +08:00 [DBG] =========Yi-SQL耗时5.9264毫秒=====
2024-05-10 15:40:12.032 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 15:40:12.033 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 27.224ms
2024-05-10 15:40:12.033 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:40:12.244 +08:00 [INF] 2024/5/10 15:40:12：cc,czQoucbGYNvZAh8pB1CxXw连接服务端success，当前已连接0个
2024-05-10 15:40:12.411 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:40:12.470 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 15:40:12.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 15:40:12.562 +08:00 [DBG] =========Yi-SQL耗时4.093毫秒=====
2024-05-10 15:40:12.596 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 15:40:12.605 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 134.4461ms
2024-05-10 15:40:12.605 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:40:31.778 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 15:40:31.786 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 15:42:49.018 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 15:42:49.021 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 15:42:49.715 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:42:49.721 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 15:42:49.736 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:42:49.736 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 15:42:49.737 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:42:49.746 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 15:42:49.748 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 10.0545ms
2024-05-10 15:42:49.748 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:42:49.756 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:42:49.771 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 15:42:49.793 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:42:49.793 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:42:49.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:42:49.925 +08:00 [INF] 2024/5/10 15:42:49：cc,6HQOreXihdhABWrauSxm8A连接服务端success，当前已连接0个
2024-05-10 15:42:49.964 +08:00 [DBG] =========Yi-SQL耗时160.8309毫秒=====
2024-05-10 15:42:49.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 15:42:49.965 +08:00 [DBG] =========Yi-SQL耗时0.9275毫秒=====
2024-05-10 15:42:49.967 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 15:42:49.970 +08:00 [DBG] =========Yi-SQL耗时2.9725毫秒=====
2024-05-10 15:42:49.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:42:49.974 +08:00 [DBG] =========Yi-SQL耗时1.8483毫秒=====
2024-05-10 15:42:49.975 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 15:42:49.976 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 182.4746ms
2024-05-10 15:42:49.976 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:49:08.955 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 15:49:08.958 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 15:49:09.673 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:49:09.679 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 15:49:09.680 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 15:49:09.705 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:49:09.707 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 15:49:09.709 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:49:09.711 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:49:09.723 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 15:49:09.725 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 12.9379ms
2024-05-10 15:49:09.725 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:49:09.751 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:49:09.752 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:49:09.757 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:49:09.777 +08:00 [INF] 2024/5/10 15:49:09：cc,6WXlWOG3bRKGoz5ZF7yImA连接服务端success，当前已连接0个
2024-05-10 15:49:09.882 +08:00 [DBG] =========Yi-SQL耗时125.462毫秒=====
2024-05-10 15:49:09.885 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 15:49:09.886 +08:00 [DBG] =========Yi-SQL耗时1.1824毫秒=====
2024-05-10 15:49:09.887 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 15:49:09.888 +08:00 [DBG] =========Yi-SQL耗时1.25毫秒=====
2024-05-10 15:49:09.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:49:09.891 +08:00 [DBG] =========Yi-SQL耗时1.3639毫秒=====
2024-05-10 15:49:09.892 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 15:49:09.892 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 139.8549ms
2024-05-10 15:49:09.892 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:51:33.869 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 15:51:33.869 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 15:51:34.878 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:51:34.884 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 15:51:34.885 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 15:51:34.889 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:51:34.897 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:51:34.907 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 15:51:34.908 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 7.8852ms
2024-05-10 15:51:34.908 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:51:34.925 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:51:34.928 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 15:51:34.955 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:51:34.956 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:51:34.978 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:51:34.981 +08:00 [DBG] =========Yi-SQL耗时2.4699毫秒=====
2024-05-10 15:51:34.985 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 15:51:34.986 +08:00 [DBG] =========Yi-SQL耗时1.0977毫秒=====
2024-05-10 15:51:34.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 15:51:34.987 +08:00 [DBG] =========Yi-SQL耗时0.6153毫秒=====
2024-05-10 15:51:34.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:51:34.995 +08:00 [DBG] =========Yi-SQL耗时5.9708毫秒=====
2024-05-10 15:51:34.999 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 15:51:35.001 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 45.7011ms
2024-05-10 15:51:35.001 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:51:35.085 +08:00 [INF] 2024/5/10 15:51:35：cc,RV59WdABdd_7-30-A1AA3Q连接服务端success，当前已连接0个
2024-05-10 15:51:49.047 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 15:51:49.054 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 15:51:49.688 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:51:49.692 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 15:51:49.696 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 15:51:49.719 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:51:49.720 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:51:49.722 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 15:51:49.722 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.7586ms
2024-05-10 15:51:49.722 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:51:49.728 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:51:49.730 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 15:51:49.738 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:51:49.738 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:51:49.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:51:49.741 +08:00 [DBG] =========Yi-SQL耗时0.9978毫秒=====
2024-05-10 15:51:49.744 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 15:51:49.745 +08:00 [DBG] =========Yi-SQL耗时0.8893毫秒=====
2024-05-10 15:51:49.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 15:51:49.747 +08:00 [DBG] =========Yi-SQL耗时1.031毫秒=====
2024-05-10 15:51:49.749 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:51:49.750 +08:00 [DBG] =========Yi-SQL耗时1.1656毫秒=====
2024-05-10 15:51:49.752 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 15:51:49.754 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 15.7616ms
2024-05-10 15:51:49.754 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:51:49.821 +08:00 [INF] 2024/5/10 15:51:49：cc,K-nkT1F-KFRT5eUIsRVfgA连接服务端success，当前已连接0个
2024-05-10 15:51:50.046 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:51:50.047 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 15:51:50.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 15:51:50.056 +08:00 [DBG] =========Yi-SQL耗时4.2903毫秒=====
2024-05-10 15:51:50.073 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 15:51:50.074 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 26.998ms
2024-05-10 15:51:50.074 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:52:09.484 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 15:52:09.485 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 15:52:10.242 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:52:10.246 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 15:52:10.247 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 15:52:10.269 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:52:10.269 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:52:10.271 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 15:52:10.272 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.3964ms
2024-05-10 15:52:10.272 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:52:10.275 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:52:10.278 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 15:52:10.288 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:52:10.289 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:52:10.292 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:52:10.294 +08:00 [DBG] =========Yi-SQL耗时1.8467毫秒=====
2024-05-10 15:52:10.305 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 15:52:10.306 +08:00 [DBG] =========Yi-SQL耗时0.965毫秒=====
2024-05-10 15:52:10.307 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 15:52:10.309 +08:00 [DBG] =========Yi-SQL耗时1.6454毫秒=====
2024-05-10 15:52:10.312 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:52:10.319 +08:00 [DBG] =========Yi-SQL耗时7.054毫秒=====
2024-05-10 15:52:10.320 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 15:52:10.321 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 31.59ms
2024-05-10 15:52:10.321 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:52:10.365 +08:00 [INF] 2024/5/10 15:52:10：cc,AxLeraci8xfID5IQSx9vyw连接服务端success，当前已连接0个
2024-05-10 15:52:35.635 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 15:52:35.642 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 15:52:36.383 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:52:36.385 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 15:52:36.385 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 15:52:36.421 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:52:36.422 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:52:36.424 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:52:36.428 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 15:52:36.427 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 15:52:36.429 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 7.2244ms
2024-05-10 15:52:36.429 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:52:36.455 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:52:36.457 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:52:36.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:52:36.470 +08:00 [DBG] =========Yi-SQL耗时5.0385毫秒=====
2024-05-10 15:52:36.471 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 15:52:36.471 +08:00 [DBG] =========Yi-SQL耗时0.6786毫秒=====
2024-05-10 15:52:36.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 15:52:36.473 +08:00 [DBG] =========Yi-SQL耗时0.6079毫秒=====
2024-05-10 15:52:36.474 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:52:36.485 +08:00 [DBG] =========Yi-SQL耗时11.1851毫秒=====
2024-05-10 15:52:36.488 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 15:52:36.489 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 31.6547ms
2024-05-10 15:52:36.489 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:52:36.516 +08:00 [INF] 2024/5/10 15:52:36：cc,60ysSAgMWLqxx-EJN7r2Uw连接服务端success，当前已连接0个
2024-05-10 15:52:36.720 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:52:36.721 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 15:52:36.722 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 15:52:36.723 +08:00 [DBG] =========Yi-SQL耗时0.9203毫秒=====
2024-05-10 15:52:36.726 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 15:52:36.726 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 5.3087ms
2024-05-10 15:52:36.726 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:53:35.130 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 15:53:35.130 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 15:53:35.859 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:53:35.861 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 15:53:35.862 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 15:53:35.887 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:53:35.890 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:53:35.890 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:53:35.893 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 15:53:35.893 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.1359ms
2024-05-10 15:53:35.893 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:53:35.896 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 15:53:35.908 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:53:35.908 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:53:35.909 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:53:35.910 +08:00 [DBG] =========Yi-SQL耗时0.6595毫秒=====
2024-05-10 15:53:35.912 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 15:53:35.912 +08:00 [DBG] =========Yi-SQL耗时0.2314毫秒=====
2024-05-10 15:53:35.912 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 15:53:35.913 +08:00 [DBG] =========Yi-SQL耗时0.2654毫秒=====
2024-05-10 15:53:35.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:53:35.917 +08:00 [DBG] =========Yi-SQL耗时1.3161毫秒=====
2024-05-10 15:53:35.918 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 15:53:35.919 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 10.8698ms
2024-05-10 15:53:35.919 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:53:36.044 +08:00 [INF] 2024/5/10 15:53:36：cc,TlObEIzHw-L8jtnmMCy4XQ连接服务端success，当前已连接0个
2024-05-10 15:54:25.122 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 15:54:25.123 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 15:54:25.814 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:54:25.817 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 15:54:25.817 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 15:54:25.840 +08:00 [INF] CORS policy execution successful.
2024-05-10 15:54:25.843 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:54:25.843 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:54:25.843 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 15:54:25.853 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 15:54:25.919 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 75.8771ms
2024-05-10 15:54:25.919 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 15:54:25.975 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 15:54:25.976 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 15:54:25.979 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:54:26.000 +08:00 [INF] 2024/5/10 15:54:26：cc,0ILBWL3fYNlkNr5aVOLyPA连接服务端success，当前已连接0个
2024-05-10 15:54:26.090 +08:00 [DBG] =========Yi-SQL耗时111.3947毫秒=====
2024-05-10 15:54:26.093 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 15:54:26.094 +08:00 [DBG] =========Yi-SQL耗时1.7207毫秒=====
2024-05-10 15:54:26.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 15:54:26.097 +08:00 [DBG] =========Yi-SQL耗时1.1819毫秒=====
2024-05-10 15:54:26.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 15:54:26.098 +08:00 [DBG] =========Yi-SQL耗时0.9819毫秒=====
2024-05-10 15:54:26.100 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 15:54:26.100 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 124.5661ms
2024-05-10 15:54:26.100 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:11:13.806 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:11:13.820 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:11:14.560 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:11:14.608 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:11:14.622 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:11:14.630 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:11:14.698 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:11:14.699 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:11:14.702 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:11:14.764 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:11:14.771 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 72.1332ms
2024-05-10 16:11:14.771 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:11:14.791 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:11:14.792 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:11:14.826 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:11:14.833 +08:00 [INF] 2024/5/10 16:11:14：cc,e9tPq-eqU_RCeoDC2HqSCw连接服务端success，当前已连接0个
2024-05-10 16:11:15.029 +08:00 [DBG] =========Yi-SQL耗时203.5114毫秒=====
2024-05-10 16:11:15.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:11:15.042 +08:00 [DBG] =========Yi-SQL耗时2.8636毫秒=====
2024-05-10 16:11:15.046 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:11:15.048 +08:00 [DBG] =========Yi-SQL耗时1.422毫秒=====
2024-05-10 16:11:15.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:11:15.052 +08:00 [DBG] =========Yi-SQL耗时1.9075毫秒=====
2024-05-10 16:11:15.056 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:11:15.058 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 265.9806ms
2024-05-10 16:11:15.058 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:11:45.736 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:11:45.741 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:11:46.544 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:11:46.548 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:11:46.549 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:11:46.575 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:11:46.575 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:11:46.580 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:11:46.581 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:11:46.582 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 6.3954ms
2024-05-10 16:11:46.582 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:11:46.585 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:11:46.641 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:11:46.641 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:11:46.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:11:46.653 +08:00 [DBG] =========Yi-SQL耗时6.8146毫秒=====
2024-05-10 16:11:46.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:11:46.657 +08:00 [DBG] =========Yi-SQL耗时2.2705毫秒=====
2024-05-10 16:11:46.659 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:11:46.659 +08:00 [DBG] =========Yi-SQL耗时0.6925毫秒=====
2024-05-10 16:11:46.661 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:11:46.662 +08:00 [DBG] =========Yi-SQL耗时1.4315毫秒=====
2024-05-10 16:11:46.663 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:11:46.664 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 22.3584ms
2024-05-10 16:11:46.664 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:11:46.725 +08:00 [INF] 2024/5/10 16:11:46：cc,eeD9yRc8lmj6SCF08MQeKA连接服务端success，当前已连接0个
2024-05-10 16:11:47.036 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:11:47.038 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 16:11:47.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 16:11:47.073 +08:00 [DBG] =========Yi-SQL耗时8.084毫秒=====
2024-05-10 16:11:47.087 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 16:11:47.091 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 52.8002ms
2024-05-10 16:11:47.091 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:12:26.848 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:12:26.854 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:12:27.566 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:12:27.569 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:12:27.583 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:12:27.583 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:12:27.585 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:12:27.592 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:12:27.592 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 8.9716ms
2024-05-10 16:12:27.592 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:12:27.603 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:12:27.607 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:12:27.613 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:12:27.614 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:12:27.616 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:12:27.617 +08:00 [DBG] =========Yi-SQL耗时1.2163毫秒=====
2024-05-10 16:12:27.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:12:27.620 +08:00 [DBG] =========Yi-SQL耗时0.5761毫秒=====
2024-05-10 16:12:27.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:12:27.622 +08:00 [DBG] =========Yi-SQL耗时0.6552毫秒=====
2024-05-10 16:12:27.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:12:27.624 +08:00 [DBG] =========Yi-SQL耗时0.7921毫秒=====
2024-05-10 16:12:27.626 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:12:27.626 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 12.4335ms
2024-05-10 16:12:27.627 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:12:27.698 +08:00 [INF] 2024/5/10 16:12:27：cc,as1Mt3_IfvhebQ3PHmNYpA连接服务端success，当前已连接0个
2024-05-10 16:12:27.836 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:12:27.836 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 16:12:27.839 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 16:12:27.840 +08:00 [DBG] =========Yi-SQL耗时1.3799毫秒=====
2024-05-10 16:12:27.843 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 16:12:27.843 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 7.0675ms
2024-05-10 16:12:27.844 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:12:35.351 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:12:35.351 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:12:36.004 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:12:36.006 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:12:36.006 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:12:36.020 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:12:36.021 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:12:36.025 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:12:36.027 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 4.0871ms
2024-05-10 16:12:36.027 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:12:36.039 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:12:36.044 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:12:36.056 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:12:36.057 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:12:36.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:12:36.062 +08:00 [DBG] =========Yi-SQL耗时0.9079毫秒=====
2024-05-10 16:12:36.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:12:36.065 +08:00 [DBG] =========Yi-SQL耗时0.8993毫秒=====
2024-05-10 16:12:36.066 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:12:36.066 +08:00 [DBG] =========Yi-SQL耗时0.4259毫秒=====
2024-05-10 16:12:36.067 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:12:36.068 +08:00 [DBG] =========Yi-SQL耗时0.894毫秒=====
2024-05-10 16:12:36.069 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:12:36.070 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 12.4443ms
2024-05-10 16:12:36.070 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:12:36.262 +08:00 [INF] 2024/5/10 16:12:36：cc,ZxwIB5cE_YIUlak6Low8nA连接服务端success，当前已连接0个
2024-05-10 16:12:36.307 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:12:36.307 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 16:12:36.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 16:12:36.311 +08:00 [DBG] =========Yi-SQL耗时1.3861毫秒=====
2024-05-10 16:12:36.314 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 16:12:36.314 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 7.0779ms
2024-05-10 16:12:36.314 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:12:45.862 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:12:45.863 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:12:46.495 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:12:46.498 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:12:46.499 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:12:46.520 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:12:46.521 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:12:46.530 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:12:46.530 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 8.7964ms
2024-05-10 16:12:46.530 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:12:46.540 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:12:46.541 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:12:46.552 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:12:46.552 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:12:46.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:12:46.556 +08:00 [DBG] =========Yi-SQL耗时1.8158毫秒=====
2024-05-10 16:12:46.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:12:46.560 +08:00 [DBG] =========Yi-SQL耗时0.9681毫秒=====
2024-05-10 16:12:46.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:12:46.562 +08:00 [DBG] =========Yi-SQL耗时0.552毫秒=====
2024-05-10 16:12:46.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:12:46.563 +08:00 [DBG] =========Yi-SQL耗时0.836毫秒=====
2024-05-10 16:12:46.564 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:12:46.565 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 12.9853ms
2024-05-10 16:12:46.565 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:12:46.616 +08:00 [INF] 2024/5/10 16:12:46：cc,tWB6IR0OrhB_bM842MogOw连接服务端success，当前已连接0个
2024-05-10 16:16:37.117 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:16:37.122 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:16:37.984 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:16:37.986 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:16:37.986 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:16:37.999 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:16:38.000 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:16:38.005 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:16:38.006 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 6.0593ms
2024-05-10 16:16:38.006 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:16:38.019 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:16:38.021 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:16:38.032 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:16:38.032 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:16:38.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:16:38.082 +08:00 [INF] 2024/5/10 16:16:38：cc,_t0yJmEP5EPCQCcyZZijNw连接服务端success，当前已连接0个
2024-05-10 16:16:38.172 +08:00 [DBG] =========Yi-SQL耗时134.7135毫秒=====
2024-05-10 16:16:38.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:16:38.175 +08:00 [DBG] =========Yi-SQL耗时1.2403毫秒=====
2024-05-10 16:16:38.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:16:38.177 +08:00 [DBG] =========Yi-SQL耗时1.2393毫秒=====
2024-05-10 16:16:38.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:16:38.189 +08:00 [DBG] =========Yi-SQL耗时10.0308毫秒=====
2024-05-10 16:16:38.190 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:16:38.190 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 157.8915ms
2024-05-10 16:16:38.190 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:17:04.045 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:17:04.045 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:17:04.788 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:17:04.791 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:17:04.808 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:17:04.827 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:17:04.829 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:17:04.831 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:17:04.831 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.5534ms
2024-05-10 16:17:04.831 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:17:04.835 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:17:04.836 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:17:04.846 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:17:04.846 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:17:04.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:17:04.852 +08:00 [DBG] =========Yi-SQL耗时2.8921毫秒=====
2024-05-10 16:17:04.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:17:04.864 +08:00 [DBG] =========Yi-SQL耗时0.8203毫秒=====
2024-05-10 16:17:04.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:17:04.866 +08:00 [DBG] =========Yi-SQL耗时0.5468毫秒=====
2024-05-10 16:17:04.868 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:17:04.869 +08:00 [DBG] =========Yi-SQL耗时1.1248毫秒=====
2024-05-10 16:17:04.870 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:17:04.872 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 25.5629ms
2024-05-10 16:17:04.872 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:17:04.934 +08:00 [INF] 2024/5/10 16:17:04：cc,3xoBk_DxAYLmCAtit7q_Xw连接服务端success，当前已连接0个
2024-05-10 16:17:17.997 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:17:17.998 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:17:18.618 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:17:18.620 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:17:18.620 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:17:18.638 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:17:18.638 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:17:18.641 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:17:18.642 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.4068ms
2024-05-10 16:17:18.642 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:17:18.650 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:17:18.654 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:17:18.660 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:17:18.660 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:17:18.665 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:17:18.667 +08:00 [DBG] =========Yi-SQL耗时2.8644毫秒=====
2024-05-10 16:17:18.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:17:18.670 +08:00 [DBG] =========Yi-SQL耗时0.7439毫秒=====
2024-05-10 16:17:18.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:17:18.673 +08:00 [DBG] =========Yi-SQL耗时1.3115毫秒=====
2024-05-10 16:17:18.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:17:18.676 +08:00 [DBG] =========Yi-SQL耗时1.2857毫秒=====
2024-05-10 16:17:18.683 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:17:18.684 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 23.7039ms
2024-05-10 16:17:18.684 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:17:18.718 +08:00 [INF] 2024/5/10 16:17:18：cc,Ho8HtBvPMojRUOIZvg91NQ连接服务端success，当前已连接0个
2024-05-10 16:18:00.175 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:18:00.175 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:18:00.829 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:18:00.837 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:18:00.837 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:18:00.854 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:18:00.854 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:18:00.857 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:18:00.857 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.2236ms
2024-05-10 16:18:00.857 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:18:00.868 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:18:00.871 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:18:00.881 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:18:00.882 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:18:00.885 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:18:00.888 +08:00 [DBG] =========Yi-SQL耗时2.2385毫秒=====
2024-05-10 16:18:00.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:18:00.895 +08:00 [DBG] =========Yi-SQL耗时1.4258毫秒=====
2024-05-10 16:18:00.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:18:00.898 +08:00 [DBG] =========Yi-SQL耗时0.6777毫秒=====
2024-05-10 16:18:00.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:18:00.902 +08:00 [DBG] =========Yi-SQL耗时2.8767毫秒=====
2024-05-10 16:18:00.904 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:18:00.905 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 22.943ms
2024-05-10 16:18:00.905 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:18:00.988 +08:00 [INF] 2024/5/10 16:18:00：cc,aZWnlvVITluJCcBGOC5gyQ连接服务端success，当前已连接0个
2024-05-10 16:20:34.176 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:20:34.198 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:20:35.077 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:20:35.079 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:20:35.080 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:20:35.098 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:20:35.098 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:20:35.099 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:20:35.100 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.6804ms
2024-05-10 16:20:35.100 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:20:35.110 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:20:35.112 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:20:35.133 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:20:35.133 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:20:35.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:20:35.143 +08:00 [DBG] =========Yi-SQL耗时7.2984毫秒=====
2024-05-10 16:20:35.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:20:35.147 +08:00 [DBG] =========Yi-SQL耗时0.9006毫秒=====
2024-05-10 16:20:35.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:20:35.148 +08:00 [DBG] =========Yi-SQL耗时0.9704毫秒=====
2024-05-10 16:20:35.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:20:35.171 +08:00 [DBG] =========Yi-SQL耗时21.204毫秒=====
2024-05-10 16:20:35.173 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:20:35.179 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 45.6329ms
2024-05-10 16:20:35.179 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:20:35.236 +08:00 [INF] 2024/5/10 16:20:35：cc,-oCEmfgoBRWSEQMfrDVZLA连接服务端success，当前已连接0个
2024-05-10 16:20:55.603 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:20:55.610 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:20:56.481 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:20:56.486 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:20:56.486 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:20:56.490 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:20:56.490 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:20:56.492 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:20:56.492 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.2669ms
2024-05-10 16:20:56.492 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:20:56.553 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:20:56.557 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:20:56.561 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:20:56.581 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:20:56.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:20:56.625 +08:00 [DBG] =========Yi-SQL耗时4.4918毫秒=====
2024-05-10 16:20:56.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:20:56.627 +08:00 [DBG] =========Yi-SQL耗时1.4192毫秒=====
2024-05-10 16:20:56.629 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:20:56.630 +08:00 [DBG] =========Yi-SQL耗时1.0871毫秒=====
2024-05-10 16:20:56.631 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:20:56.633 +08:00 [DBG] =========Yi-SQL耗时1.84毫秒=====
2024-05-10 16:20:56.635 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:20:56.637 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 55.6885ms
2024-05-10 16:20:56.637 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:20:56.687 +08:00 [INF] 2024/5/10 16:20:56：cc,lo717IUjPvdCI_WvTIPRPQ连接服务端success，当前已连接0个
2024-05-10 16:20:56.905 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:20:56.907 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 16:20:56.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 16:20:56.947 +08:00 [DBG] =========Yi-SQL耗时5.0634毫秒=====
2024-05-10 16:20:56.957 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 16:20:56.960 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 52.8709ms
2024-05-10 16:20:56.960 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:21:16.849 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:21:16.849 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:21:17.370 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:21:17.371 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:21:17.371 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:21:17.385 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:21:17.385 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:21:17.391 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:21:17.391 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 5.6923ms
2024-05-10 16:21:17.391 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:21:17.398 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:21:17.400 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:21:17.409 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:21:17.409 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:21:17.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:21:17.411 +08:00 [DBG] =========Yi-SQL耗时0.8324毫秒=====
2024-05-10 16:21:17.414 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:21:17.414 +08:00 [DBG] =========Yi-SQL耗时0.5276毫秒=====
2024-05-10 16:21:17.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:21:17.416 +08:00 [DBG] =========Yi-SQL耗时0.6148毫秒=====
2024-05-10 16:21:17.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:21:17.417 +08:00 [DBG] =========Yi-SQL耗时0.6475毫秒=====
2024-05-10 16:21:17.418 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:21:17.419 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 9.1917ms
2024-05-10 16:21:17.419 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:21:17.439 +08:00 [INF] 2024/5/10 16:21:17：cc,jtKDkRmb3wIop9oCipM0jw连接服务端success，当前已连接0个
2024-05-10 16:21:17.487 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:21:17.487 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 16:21:17.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 16:21:17.489 +08:00 [DBG] =========Yi-SQL耗时0.7204毫秒=====
2024-05-10 16:21:17.491 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 16:21:17.491 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 3.7628ms
2024-05-10 16:21:17.491 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:21:41.463 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:21:41.464 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:21:41.968 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:21:41.969 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:21:41.970 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:21:41.991 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:21:41.992 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:21:41.992 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:21:41.992 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:21:41.995 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:21:41.996 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 4.3094ms
2024-05-10 16:21:41.996 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:21:42.005 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:21:42.005 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:21:42.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:21:42.018 +08:00 [INF] 2024/5/10 16:21:42：cc,k0zBJKufwqlbGM0VZfo7Zw连接服务端success，当前已连接0个
2024-05-10 16:21:42.057 +08:00 [DBG] =========Yi-SQL耗时51.1507毫秒=====
2024-05-10 16:21:42.059 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:21:42.060 +08:00 [DBG] =========Yi-SQL耗时0.5129毫秒=====
2024-05-10 16:21:42.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:21:42.061 +08:00 [DBG] =========Yi-SQL耗时0.7356毫秒=====
2024-05-10 16:21:42.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:21:42.062 +08:00 [DBG] =========Yi-SQL耗时0.8942毫秒=====
2024-05-10 16:21:42.063 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:21:42.063 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 58.5518ms
2024-05-10 16:21:42.064 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:22:00.509 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:22:00.510 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:22:00.791 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:22:00.793 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:22:00.794 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:22:00.805 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:22:00.805 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:22:00.809 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:22:00.809 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.9001ms
2024-05-10 16:22:00.809 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:22:00.851 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:22:00.852 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:22:00.852 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:22:00.853 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:22:00.860 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:22:00.863 +08:00 [DBG] =========Yi-SQL耗时2.3176毫秒=====
2024-05-10 16:22:00.868 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:22:00.869 +08:00 [DBG] =========Yi-SQL耗时0.6919毫秒=====
2024-05-10 16:22:00.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:22:00.870 +08:00 [DBG] =========Yi-SQL耗时0.4308毫秒=====
2024-05-10 16:22:00.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:22:00.873 +08:00 [DBG] =========Yi-SQL耗时2.0952毫秒=====
2024-05-10 16:22:00.875 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:22:00.876 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 23.3801ms
2024-05-10 16:22:00.876 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:22:00.926 +08:00 [INF] 2024/5/10 16:22:00：cc,c1IBT0eEPoBW1RYDDw-JPg连接服务端success，当前已连接0个
2024-05-10 16:27:12.888 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:27:12.898 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:27:13.817 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:27:13.852 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:27:13.856 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:27:13.857 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:27:13.864 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:27:13.909 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:27:13.912 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:27:14.009 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:27:14.012 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 146.989ms
2024-05-10 16:27:14.012 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:27:14.026 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:27:14.026 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:27:14.042 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:27:14.077 +08:00 [INF] 2024/5/10 16:27:14：cc,fvZFsBfBrWvGMZCJN_mc5A连接服务端success，当前已连接0个
2024-05-10 16:27:14.159 +08:00 [DBG] =========Yi-SQL耗时116.9261毫秒=====
2024-05-10 16:27:14.164 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:27:14.166 +08:00 [DBG] =========Yi-SQL耗时2.2302毫秒=====
2024-05-10 16:27:14.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:27:14.170 +08:00 [DBG] =========Yi-SQL耗时2.079毫秒=====
2024-05-10 16:27:14.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:27:14.175 +08:00 [DBG] =========Yi-SQL耗时2.015毫秒=====
2024-05-10 16:27:14.178 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:27:14.179 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 152.7357ms
2024-05-10 16:27:14.179 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:31:21.684 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:31:21.687 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:31:22.497 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:31:22.507 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:31:22.509 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:31:22.517 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:31:22.518 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:31:22.524 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:31:22.525 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 7.4226ms
2024-05-10 16:31:22.525 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:31:22.553 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:31:22.555 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:31:22.564 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:31:22.564 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:31:22.572 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:31:22.579 +08:00 [DBG] =========Yi-SQL耗时6.5697毫秒=====
2024-05-10 16:31:22.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:31:22.627 +08:00 [DBG] =========Yi-SQL耗时4.5306毫秒=====
2024-05-10 16:31:22.630 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:31:22.631 +08:00 [DBG] =========Yi-SQL耗时0.9435毫秒=====
2024-05-10 16:31:22.634 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:31:22.634 +08:00 [DBG] =========Yi-SQL耗时2.3931毫秒=====
2024-05-10 16:31:22.635 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:31:22.637 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 73.0479ms
2024-05-10 16:31:22.638 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:31:22.703 +08:00 [INF] 2024/5/10 16:31:22：cc,y_WSyQCbtVxUXq7G4Af8Pw连接服务端success，当前已连接0个
2024-05-10 16:32:02.214 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:32:02.214 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:32:02.889 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:32:02.892 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:32:02.896 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:32:02.916 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:32:02.917 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:32:02.919 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:32:02.920 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.7659ms
2024-05-10 16:32:02.920 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:32:02.930 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:32:02.931 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:32:02.937 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:32:02.937 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:32:02.939 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:32:02.941 +08:00 [DBG] =========Yi-SQL耗时1.8261毫秒=====
2024-05-10 16:32:02.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:32:02.978 +08:00 [DBG] =========Yi-SQL耗时1.2881毫秒=====
2024-05-10 16:32:02.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:32:02.981 +08:00 [DBG] =========Yi-SQL耗时0.8757毫秒=====
2024-05-10 16:32:02.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:32:02.988 +08:00 [DBG] =========Yi-SQL耗时5.4827毫秒=====
2024-05-10 16:32:02.990 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:32:02.990 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 52.9849ms
2024-05-10 16:32:02.990 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:32:03.022 +08:00 [INF] 2024/5/10 16:32:03：cc,83T06Hrqge0eC7OdjOyoXw连接服务端success，当前已连接0个
2024-05-10 16:34:39.834 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:34:39.834 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:34:40.573 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:34:40.583 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:34:40.584 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:34:40.586 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:34:40.586 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:34:40.586 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:34:40.592 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 7.9822ms
2024-05-10 16:34:40.592 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:34:40.615 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:34:40.617 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:34:40.617 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:34:40.617 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:34:40.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:34:40.718 +08:00 [INF] 2024/5/10 16:34:40：cc,tfS-jkwweBtmoEckv2_Muw连接服务端success，当前已连接0个
2024-05-10 16:34:40.805 +08:00 [DBG] =========Yi-SQL耗时183.5257毫秒=====
2024-05-10 16:34:40.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:34:40.809 +08:00 [DBG] =========Yi-SQL耗时2.8073毫秒=====
2024-05-10 16:34:40.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:34:40.811 +08:00 [DBG] =========Yi-SQL耗时1.1463毫秒=====
2024-05-10 16:34:40.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:34:40.816 +08:00 [DBG] =========Yi-SQL耗时2.8839毫秒=====
2024-05-10 16:34:40.818 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:34:40.818 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 200.4272ms
2024-05-10 16:34:40.818 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:35:53.773 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:35:53.817 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:35:54.433 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:35:54.436 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:35:54.436 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:35:54.465 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:35:54.466 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:35:54.467 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:35:54.467 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:35:54.472 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:35:54.473 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 6.2521ms
2024-05-10 16:35:54.473 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:35:54.503 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:35:54.505 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:35:54.545 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:35:54.548 +08:00 [DBG] =========Yi-SQL耗时2.063毫秒=====
2024-05-10 16:35:54.549 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:35:54.551 +08:00 [DBG] =========Yi-SQL耗时1.4039毫秒=====
2024-05-10 16:35:54.553 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:35:54.553 +08:00 [DBG] =========Yi-SQL耗时0.9329毫秒=====
2024-05-10 16:35:54.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:35:54.557 +08:00 [DBG] =========Yi-SQL耗时1.6037毫秒=====
2024-05-10 16:35:54.558 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:35:54.559 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 21.9153ms
2024-05-10 16:35:54.559 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:35:54.609 +08:00 [INF] 2024/5/10 16:35:54：cc,KhDrC5_B-r9DpFA4qEiPBg连接服务端success，当前已连接0个
2024-05-10 16:35:58.942 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:35:58.943 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:36:00.506 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:36:00.507 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:36:00.508 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:36:00.534 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:36:00.534 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:36:00.535 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:36:00.536 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:36:00.537 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:36:00.538 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.5891ms
2024-05-10 16:36:00.538 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:36:00.600 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:36:00.601 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:36:00.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:36:00.622 +08:00 [DBG] =========Yi-SQL耗时1.9228毫秒=====
2024-05-10 16:36:00.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:36:00.624 +08:00 [DBG] =========Yi-SQL耗时0.4337毫秒=====
2024-05-10 16:36:00.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:36:00.625 +08:00 [DBG] =========Yi-SQL耗时0.379毫秒=====
2024-05-10 16:36:00.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:36:00.626 +08:00 [DBG] =========Yi-SQL耗时0.541毫秒=====
2024-05-10 16:36:00.627 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:36:00.629 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 28.5839ms
2024-05-10 16:36:00.629 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:36:00.645 +08:00 [INF] 2024/5/10 16:36:00：cc,yyztloe2axQlxYyPMTSWiA连接服务端success，当前已连接0个
2024-05-10 16:36:01.085 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:36:01.086 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 16:36:01.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 16:36:01.120 +08:00 [DBG] =========Yi-SQL耗时4.6616毫秒=====
2024-05-10 16:36:01.133 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 16:36:01.136 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 49.849ms
2024-05-10 16:36:01.136 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:43:30.944 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:43:30.945 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:43:31.638 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:43:31.639 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:43:31.639 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:43:31.645 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:43:31.646 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:43:31.647 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:43:31.647 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.3629ms
2024-05-10 16:43:31.647 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:43:31.678 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:43:31.679 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:43:31.679 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:43:31.679 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:43:31.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:43:31.721 +08:00 [INF] 2024/5/10 16:43:31：cc,QHS4avWuVCwZhsfBIY4-zw连接服务端success，当前已连接0个
2024-05-10 16:43:31.745 +08:00 [DBG] =========Yi-SQL耗时63.226毫秒=====
2024-05-10 16:43:31.747 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:43:31.747 +08:00 [DBG] =========Yi-SQL耗时0.8906毫秒=====
2024-05-10 16:43:31.748 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:43:31.749 +08:00 [DBG] =========Yi-SQL耗时0.7609毫秒=====
2024-05-10 16:43:31.750 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:43:31.750 +08:00 [DBG] =========Yi-SQL耗时0.9045毫秒=====
2024-05-10 16:43:31.751 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:43:31.752 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 73.163ms
2024-05-10 16:43:31.752 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:43:43.629 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:43:43.629 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:43:43.968 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:43:43.973 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:43:43.973 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:43:44.027 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:43:44.029 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:43:44.029 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:43:44.030 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:43:44.039 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:43:44.040 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 9.2512ms
2024-05-10 16:43:44.040 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:43:44.080 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:43:44.081 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:43:44.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:43:44.089 +08:00 [DBG] =========Yi-SQL耗时3.9852毫秒=====
2024-05-10 16:43:44.093 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:43:44.094 +08:00 [DBG] =========Yi-SQL耗时0.9533毫秒=====
2024-05-10 16:43:44.094 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:43:44.095 +08:00 [DBG] =========Yi-SQL耗时0.7398毫秒=====
2024-05-10 16:43:44.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:43:44.097 +08:00 [DBG] =========Yi-SQL耗时0.8758毫秒=====
2024-05-10 16:43:44.098 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:43:44.099 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 17.8255ms
2024-05-10 16:43:44.099 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:43:44.180 +08:00 [INF] 2024/5/10 16:43:44：cc,pwtaImHcvj0L8mHZK-qUhw连接服务端success，当前已连接0个
2024-05-10 16:44:07.424 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:44:07.424 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:44:08.816 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:44:08.818 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:44:08.819 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:44:08.857 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:44:08.860 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:44:08.917 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:44:08.917 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:44:08.921 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:44:08.921 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.9543ms
2024-05-10 16:44:08.921 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:44:08.965 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:44:08.966 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:44:08.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:44:08.981 +08:00 [DBG] =========Yi-SQL耗时5.4898毫秒=====
2024-05-10 16:44:08.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:44:08.987 +08:00 [DBG] =========Yi-SQL耗时3.4446毫秒=====
2024-05-10 16:44:08.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:44:08.990 +08:00 [INF] 2024/5/10 16:44:08：cc,lzb94uqcW4ntLTwQxXr97A连接服务端success，当前已连接0个
2024-05-10 16:44:08.995 +08:00 [DBG] =========Yi-SQL耗时4.4265毫秒=====
2024-05-10 16:44:08.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:44:09.000 +08:00 [DBG] =========Yi-SQL耗时2.174毫秒=====
2024-05-10 16:44:09.002 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:44:09.003 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 37.0401ms
2024-05-10 16:44:09.003 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:44:17.080 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:44:17.081 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:44:17.777 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:44:17.779 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:44:17.781 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:44:17.809 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:44:17.809 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:44:17.811 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:44:17.812 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.7281ms
2024-05-10 16:44:17.812 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:44:17.824 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:44:17.826 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:44:17.835 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:44:17.836 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:44:17.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:44:17.840 +08:00 [DBG] =========Yi-SQL耗时1.5589毫秒=====
2024-05-10 16:44:17.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:44:17.843 +08:00 [DBG] =========Yi-SQL耗时0.7981毫秒=====
2024-05-10 16:44:17.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:44:17.845 +08:00 [DBG] =========Yi-SQL耗时1.1433毫秒=====
2024-05-10 16:44:17.848 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:44:17.849 +08:00 [DBG] =========Yi-SQL耗时0.8922毫秒=====
2024-05-10 16:44:17.849 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:44:17.850 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 13.6485ms
2024-05-10 16:44:17.850 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:44:17.896 +08:00 [INF] 2024/5/10 16:44:17：cc,aBXVcgwIJpk6lU5oCd5FGQ连接服务端success，当前已连接0个
2024-05-10 16:44:27.461 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:44:27.461 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:44:28.064 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:44:28.066 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:44:28.067 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:44:28.076 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:44:28.076 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:44:28.078 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:44:28.078 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.1862ms
2024-05-10 16:44:28.079 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:44:28.081 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:44:28.083 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:44:28.094 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:44:28.095 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:44:28.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:44:28.101 +08:00 [DBG] =========Yi-SQL耗时1.3449毫秒=====
2024-05-10 16:44:28.105 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:44:28.107 +08:00 [DBG] =========Yi-SQL耗时2.0928毫秒=====
2024-05-10 16:44:28.108 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:44:28.109 +08:00 [DBG] =========Yi-SQL耗时0.8354毫秒=====
2024-05-10 16:44:28.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:44:28.110 +08:00 [DBG] =========Yi-SQL耗时0.6766毫秒=====
2024-05-10 16:44:28.111 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:44:28.111 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 16.2577ms
2024-05-10 16:44:28.111 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:44:28.140 +08:00 [INF] 2024/5/10 16:44:28：cc,IoK5muLYdQ2BwaIYkYAwpA连接服务端success，当前已连接0个
2024-05-10 16:44:28.365 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:44:28.366 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 16:44:28.374 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 16:44:28.380 +08:00 [DBG] =========Yi-SQL耗时5.4879毫秒=====
2024-05-10 16:44:28.381 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 16:44:28.382 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 16.3323ms
2024-05-10 16:44:28.382 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:44:51.481 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:44:51.481 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:44:52.639 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:44:52.641 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:44:52.641 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:44:52.661 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:44:52.662 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:44:52.663 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:44:52.663 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.8129ms
2024-05-10 16:44:52.664 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:44:52.669 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:44:52.671 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:44:52.693 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:44:52.693 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:44:52.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:44:52.701 +08:00 [DBG] =========Yi-SQL耗时5.3882毫秒=====
2024-05-10 16:44:52.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:44:52.705 +08:00 [DBG] =========Yi-SQL耗时2.0155毫秒=====
2024-05-10 16:44:52.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:44:52.710 +08:00 [DBG] =========Yi-SQL耗时1.404毫秒=====
2024-05-10 16:44:52.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:44:52.713 +08:00 [DBG] =========Yi-SQL耗时1.6851毫秒=====
2024-05-10 16:44:52.716 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:44:52.716 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 23.0979ms
2024-05-10 16:44:52.716 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:44:52.762 +08:00 [INF] 2024/5/10 16:44:52：cc,L-E8OPed_H8bIhEDvQrTpg连接服务端success，当前已连接0个
2024-05-10 16:44:52.903 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:44:52.907 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 16:44:52.915 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 16:44:52.916 +08:00 [DBG] =========Yi-SQL耗时1.6123毫秒=====
2024-05-10 16:44:52.934 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 16:44:52.935 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 27.8518ms
2024-05-10 16:44:52.935 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:46:19.835 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:46:19.835 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:46:20.596 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:46:20.597 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:46:20.598 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:46:20.621 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:46:20.622 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:46:20.624 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:46:20.624 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:46:20.625 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.8028ms
2024-05-10 16:46:20.625 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:46:20.630 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:46:20.641 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:46:20.641 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:46:20.644 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:46:20.645 +08:00 [DBG] =========Yi-SQL耗时1.3529毫秒=====
2024-05-10 16:46:20.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:46:20.650 +08:00 [DBG] =========Yi-SQL耗时1.1387毫秒=====
2024-05-10 16:46:20.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:46:20.652 +08:00 [DBG] =========Yi-SQL耗时0.9162毫秒=====
2024-05-10 16:46:20.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:46:20.654 +08:00 [DBG] =========Yi-SQL耗时1.1118毫秒=====
2024-05-10 16:46:20.657 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:46:20.658 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 16.552ms
2024-05-10 16:46:20.658 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:46:20.696 +08:00 [INF] 2024/5/10 16:46:20：cc,9jz7JhMWNiOArZQd5v0BGQ连接服务端success，当前已连接0个
2024-05-10 16:46:47.320 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:46:47.321 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:46:49.140 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:46:49.141 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:46:49.142 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:46:49.223 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:46:49.224 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 82.4574ms
2024-05-10 16:46:49.224 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:46:49.313 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:46:49.313 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:46:49.482 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:46:49.482 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:46:49.508 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:46:49.508 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:46:49.512 +08:00 [DBG] =========Yi-SQL耗时2.9429毫秒=====
2024-05-10 16:46:49.518 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:46:49.518 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:46:49.519 +08:00 [DBG] =========Yi-SQL耗时0.8006毫秒=====
2024-05-10 16:46:49.520 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:46:49.521 +08:00 [DBG] =========Yi-SQL耗时0.7031毫秒=====
2024-05-10 16:46:49.522 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:46:49.532 +08:00 [DBG] =========Yi-SQL耗时10.2626毫秒=====
2024-05-10 16:46:49.533 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:46:49.534 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 51.5878ms
2024-05-10 16:46:49.534 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:46:49.581 +08:00 [INF] 2024/5/10 16:46:49：cc,NcMOK9ANaUudYhzf-WtR9Q连接服务端success，当前已连接0个
2024-05-10 16:46:50.111 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:46:50.111 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 16:46:50.114 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 16:46:50.116 +08:00 [DBG] =========Yi-SQL耗时1.2278毫秒=====
2024-05-10 16:46:50.120 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 16:46:50.120 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 8.7541ms
2024-05-10 16:46:50.120 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:47:37.821 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:47:37.822 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:47:38.607 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:47:38.611 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:47:38.612 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:47:38.627 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:47:38.627 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:47:38.631 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:47:38.633 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 5.4519ms
2024-05-10 16:47:38.633 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:47:38.634 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:47:38.663 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:47:38.666 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:47:38.666 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:47:38.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:47:38.676 +08:00 [DBG] =========Yi-SQL耗时3.2869毫秒=====
2024-05-10 16:47:38.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:47:38.683 +08:00 [DBG] =========Yi-SQL耗时0.7124毫秒=====
2024-05-10 16:47:38.683 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:47:38.684 +08:00 [DBG] =========Yi-SQL耗时0.5373毫秒=====
2024-05-10 16:47:38.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:47:38.687 +08:00 [DBG] =========Yi-SQL耗时1.7261毫秒=====
2024-05-10 16:47:38.688 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:47:38.688 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 21.8672ms
2024-05-10 16:47:38.688 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:47:38.725 +08:00 [INF] 2024/5/10 16:47:38：cc,HNoiW_y27QQNEN397_AlQA连接服务端success，当前已连接0个
2024-05-10 16:47:38.941 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:47:38.942 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 16:47:38.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 16:47:38.949 +08:00 [DBG] =========Yi-SQL耗时0.8182毫秒=====
2024-05-10 16:47:38.962 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 16:47:38.963 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 21.2529ms
2024-05-10 16:47:38.963 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:47:55.745 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:47:55.745 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:47:56.492 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:47:56.507 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:47:56.508 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:47:56.514 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:47:56.516 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:47:56.529 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:47:56.532 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 15.1512ms
2024-05-10 16:47:56.532 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:47:56.556 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:47:56.558 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:47:56.558 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:47:56.560 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:47:56.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:47:56.565 +08:00 [DBG] =========Yi-SQL耗时1.9339毫秒=====
2024-05-10 16:47:56.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:47:56.570 +08:00 [DBG] =========Yi-SQL耗时1.4874毫秒=====
2024-05-10 16:47:56.572 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:47:56.573 +08:00 [DBG] =========Yi-SQL耗时1.2834毫秒=====
2024-05-10 16:47:56.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:47:56.576 +08:00 [DBG] =========Yi-SQL耗时1.5124毫秒=====
2024-05-10 16:47:56.578 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:47:56.579 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 20.0378ms
2024-05-10 16:47:56.579 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:47:56.640 +08:00 [INF] 2024/5/10 16:47:56：cc,ITa4ilPy1SNE3s8RV9EnrA连接服务端success，当前已连接0个
2024-05-10 16:47:56.814 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:47:56.815 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 16:47:56.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 16:47:56.835 +08:00 [DBG] =========Yi-SQL耗时10.0179毫秒=====
2024-05-10 16:47:56.846 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 16:47:56.846 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 31.4065ms
2024-05-10 16:47:56.846 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:52:24.321 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:52:24.326 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:52:25.073 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:52:25.074 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:52:25.075 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:52:25.096 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:52:25.098 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:52:25.099 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:52:25.100 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:52:25.101 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:52:25.105 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 6.2301ms
2024-05-10 16:52:25.105 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:52:25.122 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:52:25.122 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:52:25.126 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:52:25.153 +08:00 [INF] 2024/5/10 16:52:25：cc,xvCBeKKT_S8pjmyCc4UUUw连接服务端success，当前已连接0个
2024-05-10 16:52:25.281 +08:00 [DBG] =========Yi-SQL耗时154.3383毫秒=====
2024-05-10 16:52:25.286 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:52:25.287 +08:00 [DBG] =========Yi-SQL耗时1.4292毫秒=====
2024-05-10 16:52:25.289 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:52:25.291 +08:00 [DBG] =========Yi-SQL耗时1.2946毫秒=====
2024-05-10 16:52:25.292 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:52:25.296 +08:00 [DBG] =========Yi-SQL耗时4.1279毫秒=====
2024-05-10 16:52:25.307 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:52:25.308 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 185.5511ms
2024-05-10 16:52:25.308 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:52:25.645 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:52:25.645 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 16:52:25.650 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 16:52:25.656 +08:00 [DBG] =========Yi-SQL耗时5.9166毫秒=====
2024-05-10 16:52:25.669 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 16:52:25.671 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 25.9081ms
2024-05-10 16:52:25.671 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:53:34.096 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:53:34.097 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:53:34.897 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:53:34.899 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:53:34.900 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:53:34.901 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:53:34.902 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:53:34.909 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:53:34.910 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 7.8273ms
2024-05-10 16:53:34.910 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:53:34.930 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:53:34.931 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:53:34.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:53:34.955 +08:00 [DBG] =========Yi-SQL耗时13.4926毫秒=====
2024-05-10 16:53:34.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:53:34.959 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:53:34.960 +08:00 [DBG] =========Yi-SQL耗时1.0404毫秒=====
2024-05-10 16:53:34.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:53:34.961 +08:00 [DBG] =========Yi-SQL耗时0.7034毫秒=====
2024-05-10 16:53:34.962 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:53:34.964 +08:00 [DBG] =========Yi-SQL耗时1.4336毫秒=====
2024-05-10 16:53:34.965 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:53:34.965 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 34.6439ms
2024-05-10 16:53:34.966 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:53:34.968 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:53:35.088 +08:00 [INF] 2024/5/10 16:53:35：cc,UIxO7RXABLrPQNk9m7u-OA连接服务端success，当前已连接0个
2024-05-10 16:53:35.238 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:53:35.238 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 16:53:35.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 16:53:35.260 +08:00 [DBG] =========Yi-SQL耗时7.114毫秒=====
2024-05-10 16:53:35.269 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 16:53:35.270 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 32.0438ms
2024-05-10 16:53:35.271 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:54:24.312 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:54:24.312 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:54:25.017 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:54:25.020 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:54:25.020 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:54:25.039 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:54:25.040 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:54:25.050 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:54:25.054 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 13.786ms
2024-05-10 16:54:25.054 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:54:25.054 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:54:25.055 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:54:25.071 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:54:25.071 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:54:25.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:54:25.080 +08:00 [DBG] =========Yi-SQL耗时2.3454毫秒=====
2024-05-10 16:54:25.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:54:25.086 +08:00 [DBG] =========Yi-SQL耗时0.6453毫秒=====
2024-05-10 16:54:25.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:54:25.087 +08:00 [DBG] =========Yi-SQL耗时0.8566毫秒=====
2024-05-10 16:54:25.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:54:25.090 +08:00 [DBG] =========Yi-SQL耗时1.7194毫秒=====
2024-05-10 16:54:25.091 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:54:25.092 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 20.9777ms
2024-05-10 16:54:25.092 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:54:25.117 +08:00 [INF] 2024/5/10 16:54:25：cc,Sc6uH1rlZefYO_O_5Z09Og连接服务端success，当前已连接0个
2024-05-10 16:54:25.304 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:54:25.305 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 16:54:25.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 16:54:25.319 +08:00 [DBG] =========Yi-SQL耗时1.5679毫秒=====
2024-05-10 16:54:25.323 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 16:54:25.323 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 18.6336ms
2024-05-10 16:54:25.323 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:56:00.560 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-05-10 16:56:00.560 +08:00 [INF] Executed endpoint '/hub/main'
2024-05-10 16:56:01.467 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:56:01.470 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-05-10 16:56:01.470 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-05-10 16:56:01.494 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:56:01.495 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:56:01.496 +08:00 [INF] CORS policy execution successful.
2024-05-10 16:56:01.498 +08:00 [INF] Executing endpoint '/hub/main'
2024-05-10 16:56:01.523 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-05-10 16:56:01.523 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 28.1749ms
2024-05-10 16:56:01.523 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:56:01.556 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:56:01.556 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-05-10 16:56:01.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:56:01.595 +08:00 [DBG] =========Yi-SQL耗时4.0712毫秒=====
2024-05-10 16:56:01.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-05-10 16:56:01.606 +08:00 [DBG] =========Yi-SQL耗时1.0318毫秒=====
2024-05-10 16:56:01.607 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-05-10 16:56:01.608 +08:00 [DBG] =========Yi-SQL耗时0.8391毫秒=====
2024-05-10 16:56:01.618 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-05-10 16:56:01.618 +08:00 [DBG] =========Yi-SQL耗时0.7818毫秒=====
2024-05-10 16:56:01.619 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-05-10 16:56:01.619 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 62.9458ms
2024-05-10 16:56:01.619 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-05-10 16:56:01.688 +08:00 [INF] 2024/5/10 16:56:01：cc,AIM0x59GCDveotxZC7i-fQ连接服务端success，当前已连接0个
2024-05-10 16:56:01.898 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-05-10 16:56:01.899 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-05-10 16:56:01.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-05-10 16:56:01.906 +08:00 [DBG] =========Yi-SQL耗时4.1122毫秒=====
2024-05-10 16:56:01.915 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-05-10 16:56:01.915 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 16.6517ms
2024-05-10 16:56:01.916 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
