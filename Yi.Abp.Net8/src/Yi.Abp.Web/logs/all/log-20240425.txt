2024-04-25 09:32:25.111 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-25 09:32:25.125 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-25 09:32:31.308 +08:00 [INF] Loaded ABP modules:
2024-04-25 09:32:31.308 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-25 09:32:31.308 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-25 09:32:31.308 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-25 09:32:31.308 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-25 09:32:31.308 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-25 09:32:31.308 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-25 09:32:31.308 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-25 09:32:31.308 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-25 09:32:31.308 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-25 09:32:31.308 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-25 09:32:31.308 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-25 09:32:31.308 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-25 09:32:31.308 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-25 09:32:31.308 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-25 09:32:31.308 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-25 09:32:31.308 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-25 09:32:31.308 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-25 09:32:31.308 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-25 09:32:31.308 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-25 09:32:31.308 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-25 09:32:31.308 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-25 09:32:31.308 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-25 09:32:31.308 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-25 09:32:31.308 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-25 09:32:31.308 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-25 09:32:31.308 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-25 09:32:31.308 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-25 09:32:31.308 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-25 09:32:31.308 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-25 09:32:31.308 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-25 09:32:31.308 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-25 09:32:31.308 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-25 09:32:31.308 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-25 09:32:31.308 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-25 09:32:31.308 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-25 09:32:31.308 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-25 09:32:31.308 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-25 09:32:31.308 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-25 09:32:31.308 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-25 09:32:31.308 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-25 09:32:31.308 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-25 09:32:31.308 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-25 09:32:31.308 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-25 09:32:31.308 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-25 09:32:31.308 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-25 09:32:31.308 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-25 09:32:31.308 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-25 09:32:31.308 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-25 09:32:31.309 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-25 09:32:31.309 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-25 09:32:31.309 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-25 09:32:31.309 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-25 09:32:31.309 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-25 09:32:31.309 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-25 09:32:31.309 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-25 09:32:31.309 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-25 09:32:31.309 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-25 09:32:31.309 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-25 09:32:31.309 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-25 09:32:31.309 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-25 09:32:31.309 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-25 09:32:31.309 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-25 09:32:31.309 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-25 09:32:31.309 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-25 09:32:31.309 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-25 09:32:31.309 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-25 09:32:31.309 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-25 09:32:31.309 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-25 09:32:31.309 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-25 09:32:31.309 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-25 09:32:31.309 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-25 09:32:31.309 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-25 09:32:31.309 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-25 09:32:31.309 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-25 09:32:31.309 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-25 09:32:31.309 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-25 09:32:31.309 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-25 09:32:31.309 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-25 09:32:31.309 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-25 09:32:31.309 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-25 09:32:31.309 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-25 09:32:31.309 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-25 09:32:31.309 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-25 09:32:31.309 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-25 09:32:31.309 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-25 09:32:31.309 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-25 09:32:31.309 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-25 09:32:31.309 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-25 09:32:31.314 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-25 09:32:31.318 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-25 09:32:31.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:31.988 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 09:32:32.021 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.027 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 09:32:32.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.049 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.051 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.059 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 09:32:32.062 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-25 09:32:32.066 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.066 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-25 09:32:32.066 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.066 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-25 09:32:32.066 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.067 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-25 09:32:32.067 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.067 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-25 09:32:32.067 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.067 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-25 09:32:32.067 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.068 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-25 09:32:32.068 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.068 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-25 09:32:32.068 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.068 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-25 09:32:32.068 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.069 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-25 09:32:32.069 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.070 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 09:32:32.081 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.087 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.095 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 09:32:32.098 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.098 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-25 09:32:32.098 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.098 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-25 09:32:32.098 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.098 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-25 09:32:32.099 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-25 09:32:32.099 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-25 09:32:32.099 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-25 09:32:32.099 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-25 09:32:32.099 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.105 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.105 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 09:32:32.107 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.111 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.112 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 09:32:32.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-25 09:32:32.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-25 09:32:32.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-25 09:32:32.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-25 09:32:32.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 09:32:32.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 09:32:32.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-25 09:32:32.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-25 09:32:32.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-25 09:32:32.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-25 09:32:32.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-25 09:32:32.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-25 09:32:32.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-25 09:32:32.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-25 09:32:32.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.129 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.129 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 09:32:32.130 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.138 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 09:32:32.146 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-25 09:32:32.146 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-25 09:32:32.146 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-25 09:32:32.147 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-25 09:32:32.147 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-25 09:32:32.147 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-25 09:32:32.147 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-25 09:32:32.147 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-25 09:32:32.147 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-25 09:32:32.147 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-25 09:32:32.148 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-25 09:32:32.148 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 09:32:32.157 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.161 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.163 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.163 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 09:32:32.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-25 09:32:32.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-25 09:32:32.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-25 09:32:32.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-25 09:32:32.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-25 09:32:32.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-25 09:32:32.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-25 09:32:32.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 09:32:32.182 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 09:32:32.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-25 09:32:32.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-25 09:32:32.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-25 09:32:32.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.204 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.204 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 09:32:32.206 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.213 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.213 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.218 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 09:32:32.220 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-25 09:32:32.221 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-25 09:32:32.221 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-25 09:32:32.221 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-25 09:32:32.221 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-25 09:32:32.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-25 09:32:32.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 09:32:32.230 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 09:32:32.238 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.245 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.245 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.251 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 09:32:32.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-25 09:32:32.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-25 09:32:32.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-25 09:32:32.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-25 09:32:32.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 09:32:32.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 09:32:32.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-25 09:32:32.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-25 09:32:32.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-25 09:32:32.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-25 09:32:32.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-25 09:32:32.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-25 09:32:32.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-25 09:32:32.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-25 09:32:32.256 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-25 09:32:32.256 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-25 09:32:32.256 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-25 09:32:32.256 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-25 09:32:32.256 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.262 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 09:32:32.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.271 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.272 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.272 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.278 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 09:32:32.280 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.280 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-25 09:32:32.281 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-25 09:32:32.281 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-25 09:32:32.281 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.286 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.286 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 09:32:32.288 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.293 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.303 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.304 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 09:32:32.307 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.307 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-25 09:32:32.308 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-25 09:32:32.308 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-25 09:32:32.308 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-25 09:32:32.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 09:32:32.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 09:32:32.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-25 09:32:32.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-25 09:32:32.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-25 09:32:32.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-25 09:32:32.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-25 09:32:32.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-25 09:32:32.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.315 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 09:32:32.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.321 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.323 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.323 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.328 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.328 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 09:32:32.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-25 09:32:32.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-25 09:32:32.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-25 09:32:32.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-25 09:32:32.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.337 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 09:32:32.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.346 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.351 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.351 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 09:32:32.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-25 09:32:32.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-25 09:32:32.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-25 09:32:32.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-25 09:32:32.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 09:32:32.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 09:32:32.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-25 09:32:32.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.356 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-25 09:32:32.356 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.356 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-25 09:32:32.356 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.356 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-25 09:32:32.356 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.356 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-25 09:32:32.356 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.356 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-25 09:32:32.356 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.356 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-25 09:32:32.356 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.356 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.362 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.362 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 09:32:32.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.377 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 09:32:32.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-25 09:32:32.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-25 09:32:32.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.387 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.387 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 09:32:32.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.401 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.402 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 09:32:32.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-25 09:32:32.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-25 09:32:32.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-25 09:32:32.405 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.405 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-25 09:32:32.405 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.405 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-25 09:32:32.405 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.405 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-25 09:32:32.405 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.405 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-25 09:32:32.405 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.405 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-25 09:32:32.405 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.405 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-25 09:32:32.405 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.405 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-25 09:32:32.405 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.405 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-25 09:32:32.406 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.406 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-25 09:32:32.406 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.406 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-25 09:32:32.406 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.406 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-25 09:32:32.406 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.406 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-25 09:32:32.406 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.406 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-25 09:32:32.406 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.406 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-25 09:32:32.406 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.406 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-25 09:32:32.406 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.406 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-25 09:32:32.407 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.407 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 09:32:32.407 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.407 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 09:32:32.407 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.407 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-25 09:32:32.407 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.407 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-25 09:32:32.407 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.407 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-25 09:32:32.407 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.407 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 09:32:32.408 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.414 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.414 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 09:32:32.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 09:32:32.429 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.429 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-25 09:32:32.430 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-25 09:32:32.430 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-25 09:32:32.430 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-25 09:32:32.430 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.435 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.436 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 09:32:32.438 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.442 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.442 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 09:32:32.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-25 09:32:32.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-25 09:32:32.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-25 09:32:32.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-25 09:32:32.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.457 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 09:32:32.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.466 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.471 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.471 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 09:32:32.473 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.473 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-25 09:32:32.474 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.474 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.479 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.480 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 09:32:32.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 09:32:32.497 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.498 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 09:32:32.500 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.500 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 09:32:32.501 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.508 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.509 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 09:32:32.512 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.519 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.520 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 09:32:32.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 09:32:32.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 09:32:32.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 09:32:32.540 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.545 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.545 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.550 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 09:32:32.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 09:32:32.554 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 09:32:32.554 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.560 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.560 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 09:32:32.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.566 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.567 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.567 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.573 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 09:32:32.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 09:32:32.578 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 09:32:32.585 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.592 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.592 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.598 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 09:32:32.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-25 09:32:32.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-25 09:32:32.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-25 09:32:32.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 09:32:32.610 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.614 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.616 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.616 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.622 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 09:32:32.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-25 09:32:32.625 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.630 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.630 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 09:32:32.632 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.639 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.645 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.645 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 09:32:32.647 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.647 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-25 09:32:32.647 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.647 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-25 09:32:32.648 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.648 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-25 09:32:32.648 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.648 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-25 09:32:32.648 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.648 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-25 09:32:32.648 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.648 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 09:32:32.658 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.661 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.662 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 09:32:32.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-25 09:32:32.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-25 09:32:32.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.677 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 09:32:32.680 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 09:32:32.685 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.693 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.693 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 09:32:32.695 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-25 09:32:32.696 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-25 09:32:32.696 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-25 09:32:32.696 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-25 09:32:32.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 09:32:32.703 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 09:32:32.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 09:32:32.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 09:32:32.808 +08:00 [DBG] =========Yi-SQL耗时10.1825毫秒=====
2024-04-25 09:32:32.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 09:32:32.825 +08:00 [DBG] =========Yi-SQL耗时1.1732毫秒=====
2024-04-25 09:32:32.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 09:32:32.831 +08:00 [DBG] =========Yi-SQL耗时1.73毫秒=====
2024-04-25 09:32:32.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 09:32:32.840 +08:00 [DBG] =========Yi-SQL耗时2.6174毫秒=====
2024-04-25 09:32:32.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 09:32:32.844 +08:00 [DBG] =========Yi-SQL耗时1.4083毫秒=====
2024-04-25 09:32:32.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 09:32:32.848 +08:00 [DBG] =========Yi-SQL耗时0.9916毫秒=====
2024-04-25 09:32:32.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 09:32:32.854 +08:00 [DBG] =========Yi-SQL耗时1.4737毫秒=====
2024-04-25 09:32:32.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-25 09:32:32.858 +08:00 [DBG] =========Yi-SQL耗时1.0558毫秒=====
2024-04-25 09:32:32.867 +08:00 [DBG] 耗时-1551ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-25 09:32:32.931 +08:00 [DBG] 耗时-62ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-25 09:32:32.936 +08:00 [DBG] 耗时-4ms,已加载模块-Volo.Abp.EventBus
2024-04-25 09:32:32.952 +08:00 [DBG] 耗时-16ms,已加载模块-Volo.Abp.AspNetCore
2024-04-25 09:32:32.958 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-04-25 09:32:32.979 +08:00 [DBG] 耗时-21ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-25 09:32:32.982 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-25 09:32:33.323 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-25 09:32:33.393 +08:00 [DBG] 耗时-411ms,已加载模块-Yi.Abp.Web
2024-04-25 09:32:33.394 +08:00 [INF] ==========【352】个模块初始化执行完毕，总耗时【2073ms】==========
2024-04-25 09:32:33.505 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-25 09:32:33.505 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-25 09:32:33.505 +08:00 [INF] Hosting environment: Development
2024-04-25 09:32:33.505 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-25 09:32:48.186 +08:00 [INF] CORS policy execution successful.
2024-04-25 09:32:48.218 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-25 09:32:48.222 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-25 09:32:48.273 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 09:32:48.278 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 09:32:48.292 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-04-25 09:32:48.292 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:32:48.315 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 09:32:48.315 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-25 09:32:48.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:32:48.357 +08:00 [DBG] =========Yi-SQL耗时3.3192毫秒=====
2024-04-25 09:32:48.427 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:32:48.433 +08:00 [INF] CORS policy execution successful.
2024-04-25 09:32:48.437 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-25 09:32:48.437 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-25 09:32:48.439 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 09:32:48.707 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 278.8062ms
2024-04-25 09:32:48.709 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-04-25 09:32:48.768 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-04-25 09:32:48.792 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 476.6384ms
2024-04-25 09:32:48.792 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:32:49.826 +08:00 [INF] CORS policy execution successful.
2024-04-25 09:32:49.827 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:32:49.834 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 09:32:49.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"   WHERE (( "username" = N'cc' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 09:32:49.881 +08:00 [DBG] =========Yi-SQL耗时1.3493毫秒=====
2024-04-25 09:32:49.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:32:49.911 +08:00 [DBG] =========Yi-SQL耗时3.8481毫秒=====
2024-04-25 09:32:49.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-25 09:32:49.940 +08:00 [DBG] =========Yi-SQL耗时1.8206毫秒=====
2024-04-25 09:32:49.949 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-25 09:32:49.950 +08:00 [DBG] =========Yi-SQL耗时0.6242毫秒=====
2024-04-25 09:32:50.174 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-04-25 09:32:50.179 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 345.0087ms
2024-04-25 09:32:50.179 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:32:50.188 +08:00 [INF] CORS policy execution successful.
2024-04-25 09:32:50.196 +08:00 [INF] 用户【e94b7363-80d1-10a3-eb2c-3a119a976151:cc】登入系统
2024-04-25 09:32:50.214 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 09:32:50.214 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 09:32:50.218 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 09:32:50.221 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 09:32:50.224 +08:00 [INF] CORS policy execution successful.
2024-04-25 09:32:50.225 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 09:32:50.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:32:50.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "loginlog"  
           ("id","creationtime","loginuser","loginlocation","loginip","browser","os","logmsg","creatorid")
     VALUES
           (N'01f04426-4e9b-3c0c-cd24-3a12250f1ea5',CAST('2024-04-25 09:32:50.218' AS DATETIME),N'cc',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'cc登录系统',N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-04-25 09:32:50.252 +08:00 [DBG] =========Yi-SQL耗时8.2995毫秒=====
2024-04-25 09:32:50.275 +08:00 [INF] 2024/4/25 9:32:50：cc,C2Bx10yvIXLH141w7yHFGQ连接服务端success，当前已连接1个
2024-04-25 09:32:50.310 +08:00 [DBG] =========Yi-SQL耗时79.1643毫秒=====
2024-04-25 09:32:50.311 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-25 09:32:50.311 +08:00 [DBG] =========Yi-SQL耗时0.4313毫秒=====
2024-04-25 09:32:50.312 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-25 09:32:50.313 +08:00 [DBG] =========Yi-SQL耗时0.8014毫秒=====
2024-04-25 09:32:50.350 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-25 09:32:50.359 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 137.9116ms
2024-04-25 09:32:50.359 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 09:32:50.368 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-25 09:32:50.370 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 09:32:50.374 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:32:50.374 +08:00 [DBG] =========Yi-SQL耗时0.9057毫秒=====
2024-04-25 09:32:50.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-25 09:32:50.377 +08:00 [DBG] =========Yi-SQL耗时1.1199毫秒=====
2024-04-25 09:32:50.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-25 09:32:50.378 +08:00 [DBG] =========Yi-SQL耗时0.4064毫秒=====
2024-04-25 09:32:50.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:32:50.382 +08:00 [DBG] =========Yi-SQL耗时1.304毫秒=====
2024-04-25 09:32:50.415 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:32:50.419 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 48.5771ms
2024-04-25 09:32:50.419 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-25 09:32:50.688 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 09:32:50.693 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-25 09:32:50.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-25 09:32:50.710 +08:00 [DBG] =========Yi-SQL耗时2.6854毫秒=====
2024-04-25 09:32:50.726 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-25 09:32:50.731 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 38.1231ms
2024-04-25 09:32:50.731 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 09:32:54.733 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:32:54.733 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 09:32:54.733 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:32:54.736 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 09:32:54.739 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 09:32:54.740 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-25 09:32:54.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:32:54.745 +08:00 [DBG] =========Yi-SQL耗时2.0921毫秒=====
2024-04-25 09:32:54.773 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:32:54.777 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 40.936ms
2024-04-25 09:32:54.777 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 09:32:54.790 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:32:54.790 +08:00 [DBG] =========Yi-SQL耗时0.6797毫秒=====
2024-04-25 09:32:54.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:32:54.799 +08:00 [DBG] =========Yi-SQL耗时1.3445毫秒=====
2024-04-25 09:32:54.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 09:32:54.801 +08:00 [DBG] =========Yi-SQL耗时1.1879毫秒=====
2024-04-25 09:32:54.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 50 offset 0
===============================

2024-04-25 09:32:54.802 +08:00 [DBG] =========Yi-SQL耗时0.6428毫秒=====
2024-04-25 09:32:54.806 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:32:54.808 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 68.8967ms
2024-04-25 09:32:54.808 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:32:54.816 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:32:54.821 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 80.8756ms
2024-04-25 09:32:54.821 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:32:57.454 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:32:57.455 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 09:32:57.462 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:32:57.463 +08:00 [DBG] =========Yi-SQL耗时0.9906毫秒=====
2024-04-25 09:32:57.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 40
===============================

2024-04-25 09:32:57.466 +08:00 [DBG] =========Yi-SQL耗时1.0621毫秒=====
2024-04-25 09:32:57.469 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:32:57.470 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 15.5107ms
2024-04-25 09:32:57.471 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:32:59.930 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-25 09:32:59.934 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-25 09:32:59.944 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:32:59.945 +08:00 [DBG] =========Yi-SQL耗时0.7133毫秒=====
2024-04-25 09:32:59.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 09:32:59.948 +08:00 [DBG] =========Yi-SQL耗时0.9811毫秒=====
2024-04-25 09:32:59.949 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:32:59.951 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 17.0394ms
2024-04-25 09:32:59.951 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-25 09:33:02.742 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:33:02.742 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:33:02.743 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 09:33:02.743 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 09:33:02.744 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:33:02.745 +08:00 [DBG] =========Yi-SQL耗时0.876毫秒=====
2024-04-25 09:33:02.746 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-25 09:33:02.746 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-25 09:33:02.748 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:33:02.748 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 5.0586ms
2024-04-25 09:33:02.748 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 09:33:02.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-25 09:33:02.801 +08:00 [DBG] =========Yi-SQL耗时2.3829毫秒=====
2024-04-25 09:33:02.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-25 09:33:02.805 +08:00 [DBG] =========Yi-SQL耗时1.7843毫秒=====
2024-04-25 09:33:02.813 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:33:02.816 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 70.1673ms
2024-04-25 09:33:02.816 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:33:02.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-25 09:33:02.831 +08:00 [DBG] =========Yi-SQL耗时1.4172毫秒=====
2024-04-25 09:33:02.833 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-25 09:33:02.835 +08:00 [DBG] =========Yi-SQL耗时1.6188毫秒=====
2024-04-25 09:33:02.839 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:33:02.845 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 99.3565ms
2024-04-25 09:33:02.845 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:33:38.776 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:33:38.776 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-25 09:33:38.782 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:33:38.783 +08:00 [DBG] =========Yi-SQL耗时0.6377毫秒=====
2024-04-25 09:33:38.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND  ((CASE WHEN  "deptid" IS NULL THEN  N'00000000-0000-0000-0000-000000000000' ELSE "deptid" END) IN ('310e3b0b-b741-5786-ffcc-3a119a9760f3'))   AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-25 09:33:38.824 +08:00 [DBG] =========Yi-SQL耗时0.9032毫秒=====
2024-04-25 09:33:38.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND  ((CASE WHEN  "deptid" IS NULL THEN  N'00000000-0000-0000-0000-000000000000' ELSE "deptid" END) IN ('310e3b0b-b741-5786-ffcc-3a119a9760f3'))   AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-25 09:33:38.825 +08:00 [DBG] =========Yi-SQL耗时0.8046毫秒=====
2024-04-25 09:33:38.826 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:33:38.826 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 50.0848ms
2024-04-25 09:33:38.826 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:33:39.829 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:33:39.829 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-25 09:33:39.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:33:39.832 +08:00 [DBG] =========Yi-SQL耗时0.6788毫秒=====
2024-04-25 09:33:39.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND  ((CASE WHEN  "deptid" IS NULL THEN  N'00000000-0000-0000-0000-000000000000' ELSE "deptid" END) IN ('92ddd400-2bd6-a928-ac61-3a119a9760f3','310e3b0b-b741-5786-ffcc-3a119a9760f3','e0c47979-f00d-26c7-101f-3a119a9760f3','a5100d19-9ace-6dbb-a926-3a119a9760f3','0259b42a-8817-9c60-1b65-3a119a9760f3','3f9ef02a-0f12-4ca5-0e4e-3a119a9760f3'))   AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-25 09:33:39.837 +08:00 [DBG] =========Yi-SQL耗时1.323毫秒=====
2024-04-25 09:33:39.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND  ((CASE WHEN  "deptid" IS NULL THEN  N'00000000-0000-0000-0000-000000000000' ELSE "deptid" END) IN ('92ddd400-2bd6-a928-ac61-3a119a9760f3','310e3b0b-b741-5786-ffcc-3a119a9760f3','e0c47979-f00d-26c7-101f-3a119a9760f3','a5100d19-9ace-6dbb-a926-3a119a9760f3','0259b42a-8817-9c60-1b65-3a119a9760f3','3f9ef02a-0f12-4ca5-0e4e-3a119a9760f3'))   AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-25 09:33:39.839 +08:00 [DBG] =========Yi-SQL耗时0.8509毫秒=====
2024-04-25 09:33:39.839 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:33:39.840 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 10.5307ms
2024-04-25 09:33:39.840 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:33:40.318 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:33:40.318 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-25 09:33:40.321 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:33:40.322 +08:00 [DBG] =========Yi-SQL耗时0.7514毫秒=====
2024-04-25 09:33:40.325 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND  ((CASE WHEN  "deptid" IS NULL THEN  N'00000000-0000-0000-0000-000000000000' ELSE "deptid" END) IN ('e6ebca6a-f4a4-c5f6-2912-3a119a9760f2','92ddd400-2bd6-a928-ac61-3a119a9760f3','8ca24824-ac24-e8dd-9d21-3a119a9760f3','310e3b0b-b741-5786-ffcc-3a119a9760f3','e0c47979-f00d-26c7-101f-3a119a9760f3','a5100d19-9ace-6dbb-a926-3a119a9760f3','0259b42a-8817-9c60-1b65-3a119a9760f3','3f9ef02a-0f12-4ca5-0e4e-3a119a9760f3','38c6f3af-e240-a9bc-70bb-3a119a9760f3','25e0225d-3c6e-1ca6-74f9-3a119a9760f3'))   AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-25 09:33:40.326 +08:00 [DBG] =========Yi-SQL耗时0.6417毫秒=====
2024-04-25 09:33:40.326 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND  ((CASE WHEN  "deptid" IS NULL THEN  N'00000000-0000-0000-0000-000000000000' ELSE "deptid" END) IN ('e6ebca6a-f4a4-c5f6-2912-3a119a9760f2','92ddd400-2bd6-a928-ac61-3a119a9760f3','8ca24824-ac24-e8dd-9d21-3a119a9760f3','310e3b0b-b741-5786-ffcc-3a119a9760f3','e0c47979-f00d-26c7-101f-3a119a9760f3','a5100d19-9ace-6dbb-a926-3a119a9760f3','0259b42a-8817-9c60-1b65-3a119a9760f3','3f9ef02a-0f12-4ca5-0e4e-3a119a9760f3','38c6f3af-e240-a9bc-70bb-3a119a9760f3','25e0225d-3c6e-1ca6-74f9-3a119a9760f3'))   AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-25 09:33:40.327 +08:00 [DBG] =========Yi-SQL耗时0.8112毫秒=====
2024-04-25 09:33:40.327 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:33:40.328 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 9.4236ms
2024-04-25 09:33:40.328 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:33:41.613 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:33:41.613 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-25 09:33:41.615 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:33:41.616 +08:00 [DBG] =========Yi-SQL耗时0.6119毫秒=====
2024-04-25 09:33:41.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND  ((CASE WHEN  "deptid" IS NULL THEN  N'00000000-0000-0000-0000-000000000000' ELSE "deptid" END) IN ('e6ebca6a-f4a4-c5f6-2912-3a119a9760f2','92ddd400-2bd6-a928-ac61-3a119a9760f3','8ca24824-ac24-e8dd-9d21-3a119a9760f3','310e3b0b-b741-5786-ffcc-3a119a9760f3','e0c47979-f00d-26c7-101f-3a119a9760f3','a5100d19-9ace-6dbb-a926-3a119a9760f3','0259b42a-8817-9c60-1b65-3a119a9760f3','3f9ef02a-0f12-4ca5-0e4e-3a119a9760f3','38c6f3af-e240-a9bc-70bb-3a119a9760f3','25e0225d-3c6e-1ca6-74f9-3a119a9760f3'))   AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-25 09:33:41.622 +08:00 [DBG] =========Yi-SQL耗时1.0655毫秒=====
2024-04-25 09:33:41.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND  ((CASE WHEN  "deptid" IS NULL THEN  N'00000000-0000-0000-0000-000000000000' ELSE "deptid" END) IN ('e6ebca6a-f4a4-c5f6-2912-3a119a9760f2','92ddd400-2bd6-a928-ac61-3a119a9760f3','8ca24824-ac24-e8dd-9d21-3a119a9760f3','310e3b0b-b741-5786-ffcc-3a119a9760f3','e0c47979-f00d-26c7-101f-3a119a9760f3','a5100d19-9ace-6dbb-a926-3a119a9760f3','0259b42a-8817-9c60-1b65-3a119a9760f3','3f9ef02a-0f12-4ca5-0e4e-3a119a9760f3','38c6f3af-e240-a9bc-70bb-3a119a9760f3','25e0225d-3c6e-1ca6-74f9-3a119a9760f3'))   AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-25 09:33:41.623 +08:00 [DBG] =========Yi-SQL耗时0.7745毫秒=====
2024-04-25 09:33:41.623 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:33:41.624 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 10.0896ms
2024-04-25 09:33:41.624 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:33:41.965 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:33:41.965 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-25 09:33:41.967 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-25 09:33:41.968 +08:00 [DBG] =========Yi-SQL耗时1.0573毫秒=====
2024-04-25 09:33:41.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-25 09:33:41.972 +08:00 [DBG] =========Yi-SQL耗时0.9528毫秒=====
2024-04-25 09:33:41.973 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:33:41.973 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 7.768ms
2024-04-25 09:33:41.973 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:33:46.726 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:33:46.726 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-25 09:33:46.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-25 09:33:46.729 +08:00 [DBG] =========Yi-SQL耗时1.1122毫秒=====
2024-04-25 09:33:46.732 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-25 09:33:46.732 +08:00 [DBG] =========Yi-SQL耗时0.7579毫秒=====
2024-04-25 09:33:46.733 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:33:46.733 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 7.1695ms
2024-04-25 09:33:46.733 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:33:55.771 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:33:55.774 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-25 09:33:55.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:33:55.781 +08:00 [DBG] =========Yi-SQL耗时0.6483毫秒=====
2024-04-25 09:33:55.783 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 09:33:55.783 +08:00 [DBG] =========Yi-SQL耗时0.8841毫秒=====
2024-04-25 09:33:55.793 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:33:55.797 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 22.9568ms
2024-04-25 09:33:55.797 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:34:00.252 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:34:00.252 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:34:00.252 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-25 09:34:00.255 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-04-25 09:34:00.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:34:00.256 +08:00 [DBG] =========Yi-SQL耗时0.6873毫秒=====
2024-04-25 09:34:00.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 09:34:00.258 +08:00 [DBG] =========Yi-SQL耗时0.8132毫秒=====
2024-04-25 09:34:00.260 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:34:00.260 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 8.2338ms
2024-04-25 09:34:00.260 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:34:00.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "post"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:34:00.266 +08:00 [DBG] =========Yi-SQL耗时0.8665毫秒=====
2024-04-25 09:34:00.268 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 09:34:00.269 +08:00 [DBG] =========Yi-SQL耗时0.5656毫秒=====
2024-04-25 09:34:00.277 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:34:00.280 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 24.5844ms
2024-04-25 09:34:00.280 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:34:34.185 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:34:34.188 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-25 09:34:34.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-25 09:34:34.198 +08:00 [DBG] =========Yi-SQL耗时1.7583毫秒=====
2024-04-25 09:34:34.216 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:34:34.222 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 33.4834ms
2024-04-25 09:34:34.222 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:34:42.985 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:34:42.985 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 09:34:42.985 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-25 09:34:42.985 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 09:34:42.988 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:34:42.990 +08:00 [DBG] =========Yi-SQL耗时1.5771毫秒=====
2024-04-25 09:34:42.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-25 09:34:42.994 +08:00 [DBG] =========Yi-SQL耗时1.6104毫秒=====
2024-04-25 09:34:43.004 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:34:43.004 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 18.7023ms
2024-04-25 09:34:43.004 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 09:34:43.015 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:34:43.015 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 29.819ms
2024-04-25 09:34:43.015 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:34:47.176 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:34:47.176 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-25 09:34:47.178 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-25 09:34:47.179 +08:00 [DBG] =========Yi-SQL耗时1.0382毫秒=====
2024-04-25 09:34:47.182 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-25 09:34:47.183 +08:00 [DBG] =========Yi-SQL耗时1.509毫秒=====
2024-04-25 09:34:47.187 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:34:47.187 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 11.3117ms
2024-04-25 09:34:47.187 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:34:52.925 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:34:52.926 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-04-25 09:34:52.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "post"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:34:52.928 +08:00 [DBG] =========Yi-SQL耗时0.6817毫秒=====
2024-04-25 09:34:52.930 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 09:34:52.930 +08:00 [DBG] =========Yi-SQL耗时0.7514毫秒=====
2024-04-25 09:34:52.932 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:34:52.932 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 6.2386ms
2024-04-25 09:34:52.932 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:34:54.456 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:34:54.456 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-25 09:34:54.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:34:54.461 +08:00 [DBG] =========Yi-SQL耗时0.6884毫秒=====
2024-04-25 09:34:54.463 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 09:34:54.464 +08:00 [DBG] =========Yi-SQL耗时0.5882毫秒=====
2024-04-25 09:34:54.466 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:34:54.466 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 9.7863ms
2024-04-25 09:34:54.466 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:34:57.441 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:34:57.441 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-25 09:34:57.443 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:34:57.444 +08:00 [DBG] =========Yi-SQL耗时0.8139毫秒=====
2024-04-25 09:34:57.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 09:34:57.448 +08:00 [DBG] =========Yi-SQL耗时1.3828毫秒=====
2024-04-25 09:34:57.450 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:34:57.451 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 9.3895ms
2024-04-25 09:34:57.451 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:35:00.065 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:35:00.068 +08:00 [INF] Route matched with {action = "GetList", controller = "Notice", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListInput) on controller Yi.Framework.Rbac.Application.Services.NoticeService (Yi.Framework.Rbac.Application).
2024-04-25 09:35:00.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "notice"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:35:00.110 +08:00 [DBG] =========Yi-SQL耗时13.5005毫秒=====
2024-04-25 09:35:00.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","title","type","content","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "notice"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 09:35:00.115 +08:00 [DBG] =========Yi-SQL耗时1.9221毫秒=====
2024-04-25 09:35:00.123 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:35:00.126 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application) in 57.8694ms
2024-04-25 09:35:00.126 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:35:02.860 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:35:02.864 +08:00 [INF] Route matched with {action = "Get", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-04-25 09:35:02.915 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"  WHERE "id" = N'9a68fec9-4b76-d8d6-d239-3a119a976142'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:35:02.916 +08:00 [DBG] =========Yi-SQL耗时1.1662毫秒=====
2024-04-25 09:35:02.925 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetOutputDto'.
2024-04-25 09:35:02.927 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetAsync (Yi.Framework.Rbac.Application) in 62.8412ms
2024-04-25 09:35:02.927 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:35:07.251 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 09:35:07.251 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 09:35:07.251 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 09:35:07.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:35:07.254 +08:00 [DBG] =========Yi-SQL耗时1.4244毫秒=====
2024-04-25 09:35:07.256 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-25 09:35:07.257 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:35:07.257 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 6.0794ms
2024-04-25 09:35:07.257 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 09:35:07.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 09:35:07.268 +08:00 [DBG] =========Yi-SQL耗时2.6361毫秒=====
2024-04-25 09:35:07.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 09:35:07.270 +08:00 [DBG] =========Yi-SQL耗时1.1307毫秒=====
2024-04-25 09:35:07.278 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 09:35:07.281 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 24.6615ms
2024-04-25 09:35:07.281 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:24:47.789 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-25 10:24:47.806 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-25 10:24:52.380 +08:00 [INF] Loaded ABP modules:
2024-04-25 10:24:52.381 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-25 10:24:52.381 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-25 10:24:52.381 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-25 10:24:52.381 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-25 10:24:52.381 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-25 10:24:52.381 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-25 10:24:52.381 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-25 10:24:52.381 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-25 10:24:52.381 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-25 10:24:52.381 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-25 10:24:52.381 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-25 10:24:52.381 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-25 10:24:52.381 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-25 10:24:52.381 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-25 10:24:52.381 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-25 10:24:52.381 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-25 10:24:52.381 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-25 10:24:52.381 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-25 10:24:52.381 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-25 10:24:52.381 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-25 10:24:52.381 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-25 10:24:52.381 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-25 10:24:52.381 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-25 10:24:52.381 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-25 10:24:52.381 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-25 10:24:52.381 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-25 10:24:52.381 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-25 10:24:52.381 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-25 10:24:52.381 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-25 10:24:52.381 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-25 10:24:52.381 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-25 10:24:52.381 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-25 10:24:52.381 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-25 10:24:52.381 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-25 10:24:52.381 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-25 10:24:52.381 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-25 10:24:52.381 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-25 10:24:52.381 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-25 10:24:52.381 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-25 10:24:52.381 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-25 10:24:52.381 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-25 10:24:52.381 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-25 10:24:52.381 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-25 10:24:52.381 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-25 10:24:52.381 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-25 10:24:52.381 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-25 10:24:52.381 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-25 10:24:52.381 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-25 10:24:52.381 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-25 10:24:52.381 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-25 10:24:52.381 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-25 10:24:52.381 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-25 10:24:52.381 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-25 10:24:52.381 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-25 10:24:52.381 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-25 10:24:52.381 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-25 10:24:52.381 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-25 10:24:52.381 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-25 10:24:52.381 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-25 10:24:52.381 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-25 10:24:52.381 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-25 10:24:52.381 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-25 10:24:52.381 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-25 10:24:52.381 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-25 10:24:52.381 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-25 10:24:52.381 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-25 10:24:52.381 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-25 10:24:52.381 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-25 10:24:52.381 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-25 10:24:52.381 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-25 10:24:52.381 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-25 10:24:52.381 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-25 10:24:52.381 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-25 10:24:52.381 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-25 10:24:52.381 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-25 10:24:52.381 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-25 10:24:52.381 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-25 10:24:52.381 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-25 10:24:52.381 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-25 10:24:52.381 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-25 10:24:52.381 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-25 10:24:52.381 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-25 10:24:52.381 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-25 10:24:52.381 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-25 10:24:52.381 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-25 10:24:52.381 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-25 10:24:52.381 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-25 10:24:52.381 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-25 10:24:52.390 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-25 10:24:52.397 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-25 10:24:53.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.203 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 10:24:53.206 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.220 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 10:24:53.223 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.233 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.234 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 10:24:53.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-25 10:24:53.246 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.246 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-25 10:24:53.246 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.246 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-25 10:24:53.246 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.246 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-25 10:24:53.246 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.247 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-25 10:24:53.247 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.247 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-25 10:24:53.247 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.247 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-25 10:24:53.247 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.247 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-25 10:24:53.247 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.247 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-25 10:24:53.248 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.248 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-25 10:24:53.248 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.248 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 10:24:53.260 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.273 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.273 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 10:24:53.275 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-25 10:24:53.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-25 10:24:53.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-25 10:24:53.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-25 10:24:53.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-25 10:24:53.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-25 10:24:53.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-25 10:24:53.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 10:24:53.287 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.292 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.292 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.298 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 10:24:53.300 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.300 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-25 10:24:53.300 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.300 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:24:53.300 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.300 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-25 10:24:53.301 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-25 10:24:53.301 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 10:24:53.301 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 10:24:53.301 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-25 10:24:53.301 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-25 10:24:53.301 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-25 10:24:53.301 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-25 10:24:53.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-25 10:24:53.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-25 10:24:53.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-25 10:24:53.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-25 10:24:53.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.307 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 10:24:53.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.314 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.315 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.321 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.321 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 10:24:53.323 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.323 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-25 10:24:53.324 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.324 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:24:53.324 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.324 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-25 10:24:53.324 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.324 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-25 10:24:53.324 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.324 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-25 10:24:53.324 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.324 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-25 10:24:53.324 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.324 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-25 10:24:53.324 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.324 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-25 10:24:53.325 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.325 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-25 10:24:53.325 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.325 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-25 10:24:53.325 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.325 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-25 10:24:53.325 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.325 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 10:24:53.333 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 10:24:53.347 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-25 10:24:53.347 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:24:53.347 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-25 10:24:53.347 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-25 10:24:53.347 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-25 10:24:53.348 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.348 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-25 10:24:53.348 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.348 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-25 10:24:53.348 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.348 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 10:24:53.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.362 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.362 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.368 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 10:24:53.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-25 10:24:53.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-25 10:24:53.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-25 10:24:53.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 10:24:53.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.386 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 10:24:53.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-25 10:24:53.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-25 10:24:53.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-25 10:24:53.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-25 10:24:53.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-25 10:24:53.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-25 10:24:53.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.400 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:24:53.407 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.407 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.413 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.413 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 10:24:53.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 10:24:53.431 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.431 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-25 10:24:53.431 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.431 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:24:53.432 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-25 10:24:53.432 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-25 10:24:53.432 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 10:24:53.432 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 10:24:53.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-25 10:24:53.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-25 10:24:53.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-25 10:24:53.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-25 10:24:53.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-25 10:24:53.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-25 10:24:53.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-25 10:24:53.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-25 10:24:53.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-25 10:24:53.435 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-25 10:24:53.435 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-25 10:24:53.435 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-25 10:24:53.435 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.444 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.444 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 10:24:53.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.457 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.462 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.463 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 10:24:53.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-25 10:24:53.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-25 10:24:53.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-25 10:24:53.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.472 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 10:24:53.474 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.479 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.479 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.485 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.485 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 10:24:53.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-25 10:24:53.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:24:53.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-25 10:24:53.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-25 10:24:53.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 10:24:53.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 10:24:53.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-25 10:24:53.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-25 10:24:53.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-25 10:24:53.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-25 10:24:53.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-25 10:24:53.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-25 10:24:53.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.490 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.496 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 10:24:53.497 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.500 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.502 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.508 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.508 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 10:24:53.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-25 10:24:53.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-25 10:24:53.511 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.511 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-25 10:24:53.511 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.511 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-25 10:24:53.511 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.511 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.516 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 10:24:53.518 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.523 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.524 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 10:24:53.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-25 10:24:53.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:24:53.533 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-25 10:24:53.533 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-25 10:24:53.533 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 10:24:53.533 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 10:24:53.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-25 10:24:53.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-25 10:24:53.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-25 10:24:53.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-25 10:24:53.535 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.535 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-25 10:24:53.535 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.535 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-25 10:24:53.535 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.535 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-25 10:24:53.535 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.536 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.543 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 10:24:53.546 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.551 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.557 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 10:24:53.559 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-25 10:24:53.559 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-25 10:24:53.559 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.565 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.565 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 10:24:53.567 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.572 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.573 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.581 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.581 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 10:24:53.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-25 10:24:53.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:24:53.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-25 10:24:53.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-25 10:24:53.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-25 10:24:53.585 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-25 10:24:53.585 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-25 10:24:53.585 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-25 10:24:53.585 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-25 10:24:53.585 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-25 10:24:53.585 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-25 10:24:53.585 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.586 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-25 10:24:53.586 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.586 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-25 10:24:53.586 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.586 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-25 10:24:53.586 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.586 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-25 10:24:53.586 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.586 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-25 10:24:53.586 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.586 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-25 10:24:53.586 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.586 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-25 10:24:53.586 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.586 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-25 10:24:53.587 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 10:24:53.587 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 10:24:53.587 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-25 10:24:53.587 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-25 10:24:53.587 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-25 10:24:53.587 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:24:53.588 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.594 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.594 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 10:24:53.596 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.605 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 10:24:53.607 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.607 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-25 10:24:53.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-25 10:24:53.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-25 10:24:53.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-25 10:24:53.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.614 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.614 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 10:24:53.616 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.619 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 10:24:53.628 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.628 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-25 10:24:53.629 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.629 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-25 10:24:53.629 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.629 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-25 10:24:53.629 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.629 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-25 10:24:53.629 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.629 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.634 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.635 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 10:24:53.637 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.642 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.648 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.648 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 10:24:53.650 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.650 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-25 10:24:53.650 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.650 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 10:24:53.658 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 10:24:53.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:24:53.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:24:53.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.678 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 10:24:53.680 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.686 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.687 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.687 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.696 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 10:24:53.698 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.699 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:24:53.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:24:53.701 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.708 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.708 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 10:24:53.711 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.714 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.724 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.724 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 10:24:53.726 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:24:53.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:24:53.729 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.734 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.734 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 10:24:53.736 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.741 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.741 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.746 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 10:24:53.749 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.749 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:24:53.750 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.750 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.756 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.756 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 10:24:53.758 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.765 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.765 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.772 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.772 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 10:24:53.775 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.775 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-25 10:24:53.775 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.775 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-25 10:24:53.776 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.776 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-25 10:24:53.776 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.776 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.783 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.783 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 10:24:53.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.789 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.791 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.791 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.796 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.797 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 10:24:53.799 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-25 10:24:53.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 10:24:53.808 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.813 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.814 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.820 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 10:24:53.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-25 10:24:53.823 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-25 10:24:53.823 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-25 10:24:53.823 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-25 10:24:53.823 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-25 10:24:53.823 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 10:24:53.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.836 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.841 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 10:24:53.844 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-25 10:24:53.844 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-25 10:24:53.844 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.845 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 10:24:53.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.855 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:24:53.856 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.856 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.862 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.862 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 10:24:53.864 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-25 10:24:53.864 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-25 10:24:53.864 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-25 10:24:53.864 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-25 10:24:53.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:24:53.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 10:24:53.872 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:24:53.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:24:53.970 +08:00 [DBG] =========Yi-SQL耗时9.6779毫秒=====
2024-04-25 10:24:53.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:24:53.985 +08:00 [DBG] =========Yi-SQL耗时1.4291毫秒=====
2024-04-25 10:24:53.988 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:24:53.989 +08:00 [DBG] =========Yi-SQL耗时0.8687毫秒=====
2024-04-25 10:24:53.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:24:53.996 +08:00 [DBG] =========Yi-SQL耗时2.6379毫秒=====
2024-04-25 10:24:53.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:24:54.002 +08:00 [DBG] =========Yi-SQL耗时3.238毫秒=====
2024-04-25 10:24:54.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:24:54.006 +08:00 [DBG] =========Yi-SQL耗时1.0816毫秒=====
2024-04-25 10:24:54.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:24:54.012 +08:00 [DBG] =========Yi-SQL耗时1.3098毫秒=====
2024-04-25 10:24:54.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-25 10:24:54.017 +08:00 [DBG] =========Yi-SQL耗时1.1755毫秒=====
2024-04-25 10:24:54.026 +08:00 [DBG] 耗时-1634ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-25 10:24:54.103 +08:00 [DBG] 耗时-75ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-25 10:24:54.106 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-25 10:24:54.123 +08:00 [DBG] 耗时-16ms,已加载模块-Volo.Abp.AspNetCore
2024-04-25 10:24:54.129 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-04-25 10:24:54.150 +08:00 [DBG] 耗时-20ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-25 10:24:54.152 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-25 10:24:54.428 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-25 10:24:54.511 +08:00 [DBG] 耗时-358ms,已加载模块-Yi.Abp.Web
2024-04-25 10:24:54.512 +08:00 [INF] ==========【352】个模块初始化执行完毕，总耗时【2114ms】==========
2024-04-25 10:24:54.620 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-25 10:24:54.621 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-25 10:24:54.621 +08:00 [INF] Hosting environment: Development
2024-04-25 10:24:54.621 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-25 10:25:15.768 +08:00 [INF] CORS policy execution successful.
2024-04-25 10:25:15.824 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 10:25:15.824 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 10:25:15.830 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 10:25:15.838 +08:00 [INF] CORS policy execution successful.
2024-04-25 10:25:15.839 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 10:25:15.845 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 10:25:15.929 +08:00 [INF] 2024/4/25 10:25:15：cc,4NzcQUqtatibHM-vdEJ0Wg连接服务端success，当前已连接0个
2024-04-25 10:25:15.974 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 10:25:15.978 +08:00 [DBG] =========Yi-SQL耗时3.7398毫秒=====
2024-04-25 10:25:16.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-25 10:25:16.008 +08:00 [DBG] =========Yi-SQL耗时1.196毫秒=====
2024-04-25 10:25:16.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-25 10:25:16.017 +08:00 [DBG] =========Yi-SQL耗时0.4842毫秒=====
2024-04-25 10:25:16.102 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-25 10:25:16.161 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 311.8197ms
2024-04-25 10:25:16.162 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 10:25:16.171 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-25 10:25:16.175 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 10:25:16.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 10:25:16.181 +08:00 [DBG] =========Yi-SQL耗时1.364毫秒=====
2024-04-25 10:25:16.183 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-25 10:25:16.183 +08:00 [DBG] =========Yi-SQL耗时0.3456毫秒=====
2024-04-25 10:25:16.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-25 10:25:16.184 +08:00 [DBG] =========Yi-SQL耗时0.3153毫秒=====
2024-04-25 10:25:16.186 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 10:25:16.187 +08:00 [DBG] =========Yi-SQL耗时0.9726毫秒=====
2024-04-25 10:25:16.215 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 10:25:16.218 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 42.5855ms
2024-04-25 10:25:16.218 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-25 10:25:16.358 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 10:25:16.366 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-25 10:25:16.387 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-25 10:25:16.391 +08:00 [DBG] =========Yi-SQL耗时2.9447毫秒=====
2024-04-25 10:25:16.404 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-25 10:25:16.407 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 40.7303ms
2024-04-25 10:25:16.407 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 10:25:47.275 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:25:47.275 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 10:25:47.275 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:25:47.278 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 10:25:47.279 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 10:25:47.280 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-25 10:25:47.297 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 10:25:47.298 +08:00 [DBG] =========Yi-SQL耗时0.7625毫秒=====
2024-04-25 10:25:47.321 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 10:25:47.325 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 47.5938ms
2024-04-25 10:25:47.325 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 10:25:47.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 10:25:47.348 +08:00 [DBG] =========Yi-SQL耗时0.8266毫秒=====
2024-04-25 10:25:47.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 10:25:47.355 +08:00 [DBG] =========Yi-SQL耗时1.0379毫秒=====
2024-04-25 10:25:47.358 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 10:25:47.358 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 50 offset 0
===============================

2024-04-25 10:25:47.361 +08:00 [DBG] =========Yi-SQL耗时2.328毫秒=====
2024-04-25 10:25:47.367 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 10:25:47.369 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 89.803ms
2024-04-25 10:25:47.369 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:25:47.435 +08:00 [DBG] =========Yi-SQL耗时77.1129毫秒=====
2024-04-25 10:25:47.458 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 10:25:47.464 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 183.2841ms
2024-04-25 10:25:47.464 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:25:55.144 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:25:55.144 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 10:25:55.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "dicttype" = N'priority_type' )  AND ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 10:25:55.148 +08:00 [DBG] =========Yi-SQL耗时0.708毫秒=====
2024-04-25 10:25:55.150 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "dicttype" = N'priority_type' )  AND ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 10:25:55.152 +08:00 [DBG] =========Yi-SQL耗时1.8323毫秒=====
2024-04-25 10:25:55.153 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 10:25:55.153 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 9.31ms
2024-04-25 10:25:55.153 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:32:41.527 +08:00 [ERR] An unhandled exception has occurred while executing the request.
Swashbuckle.AspNetCore.SwaggerGen.SwaggerGeneratorException: Conflicting method/path combination "GET api/app/test/current-user" for actions - Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application),Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application). Actions require a unique method/path combination for Swagger/OpenAPI 3.0. Use ConflictingActionsResolver as a workaround
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GenerateOperations(IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GeneratePaths(IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GetSwaggerDocumentWithoutFilters(String documentName, String host, String basePath)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GetSwaggerAsync(String documentName, String host, String basePath)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Volo.Abp.AspNetCore.MultiTenancy.MultiTenancyMiddleware.InvokeAsync(HttpContext context, RequestDelegate next)
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.InterfaceMiddlewareBinder.<>c__DisplayClass2_0.<<CreateMiddleware>b__0>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Yi.Framework.Rbac.Domain.Authorization.RefreshTokenMiddleware.InvokeAsync(HttpContext context, RequestDelegate next) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Domain\Authorization\RefreshTokenMiddleware.cs:line 47
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.InterfaceMiddlewareBinder.<>c__DisplayClass2_0.<<CreateMiddleware>b__0>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-04-25 10:32:49.037 +08:00 [ERR] An unhandled exception has occurred while executing the request.
Swashbuckle.AspNetCore.SwaggerGen.SwaggerGeneratorException: Conflicting method/path combination "GET api/app/test/current-user" for actions - Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application),Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application). Actions require a unique method/path combination for Swagger/OpenAPI 3.0. Use ConflictingActionsResolver as a workaround
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GenerateOperations(IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GeneratePaths(IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GetSwaggerDocumentWithoutFilters(String documentName, String host, String basePath)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GetSwaggerAsync(String documentName, String host, String basePath)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Volo.Abp.AspNetCore.MultiTenancy.MultiTenancyMiddleware.InvokeAsync(HttpContext context, RequestDelegate next)
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.InterfaceMiddlewareBinder.<>c__DisplayClass2_0.<<CreateMiddleware>b__0>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Yi.Framework.Rbac.Domain.Authorization.RefreshTokenMiddleware.InvokeAsync(HttpContext context, RequestDelegate next) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Domain\Authorization\RefreshTokenMiddleware.cs:line 47
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.InterfaceMiddlewareBinder.<>c__DisplayClass2_0.<<CreateMiddleware>b__0>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-04-25 10:32:52.527 +08:00 [ERR] An unhandled exception has occurred while executing the request.
Swashbuckle.AspNetCore.SwaggerGen.SwaggerGeneratorException: Conflicting method/path combination "GET api/app/test/current-user" for actions - Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application),Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application). Actions require a unique method/path combination for Swagger/OpenAPI 3.0. Use ConflictingActionsResolver as a workaround
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GenerateOperations(IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GeneratePaths(IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GetSwaggerDocumentWithoutFilters(String documentName, String host, String basePath)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GetSwaggerAsync(String documentName, String host, String basePath)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Volo.Abp.AspNetCore.MultiTenancy.MultiTenancyMiddleware.InvokeAsync(HttpContext context, RequestDelegate next)
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.InterfaceMiddlewareBinder.<>c__DisplayClass2_0.<<CreateMiddleware>b__0>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Yi.Framework.Rbac.Domain.Authorization.RefreshTokenMiddleware.InvokeAsync(HttpContext context, RequestDelegate next) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Domain\Authorization\RefreshTokenMiddleware.cs:line 47
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.InterfaceMiddlewareBinder.<>c__DisplayClass2_0.<<CreateMiddleware>b__0>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-04-25 10:33:28.351 +08:00 [ERR] An unhandled exception has occurred while executing the request.
Swashbuckle.AspNetCore.SwaggerGen.SwaggerGeneratorException: Conflicting method/path combination "GET api/app/test/current-user" for actions - Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application),Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application). Actions require a unique method/path combination for Swagger/OpenAPI 3.0. Use ConflictingActionsResolver as a workaround
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GenerateOperations(IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GeneratePaths(IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GetSwaggerDocumentWithoutFilters(String documentName, String host, String basePath)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GetSwaggerAsync(String documentName, String host, String basePath)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Volo.Abp.AspNetCore.MultiTenancy.MultiTenancyMiddleware.InvokeAsync(HttpContext context, RequestDelegate next)
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.InterfaceMiddlewareBinder.<>c__DisplayClass2_0.<<CreateMiddleware>b__0>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Yi.Framework.Rbac.Domain.Authorization.RefreshTokenMiddleware.InvokeAsync(HttpContext context, RequestDelegate next) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Domain\Authorization\RefreshTokenMiddleware.cs:line 47
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.InterfaceMiddlewareBinder.<>c__DisplayClass2_0.<<CreateMiddleware>b__0>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-04-25 10:33:31.719 +08:00 [ERR] An unhandled exception has occurred while executing the request.
Swashbuckle.AspNetCore.SwaggerGen.SwaggerGeneratorException: Conflicting method/path combination "GET api/app/test/current-user" for actions - Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application),Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application). Actions require a unique method/path combination for Swagger/OpenAPI 3.0. Use ConflictingActionsResolver as a workaround
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GenerateOperations(IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GeneratePaths(IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GetSwaggerDocumentWithoutFilters(String documentName, String host, String basePath)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GetSwaggerAsync(String documentName, String host, String basePath)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Volo.Abp.AspNetCore.MultiTenancy.MultiTenancyMiddleware.InvokeAsync(HttpContext context, RequestDelegate next)
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.InterfaceMiddlewareBinder.<>c__DisplayClass2_0.<<CreateMiddleware>b__0>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Yi.Framework.Rbac.Domain.Authorization.RefreshTokenMiddleware.InvokeAsync(HttpContext context, RequestDelegate next) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Domain\Authorization\RefreshTokenMiddleware.cs:line 47
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.InterfaceMiddlewareBinder.<>c__DisplayClass2_0.<<CreateMiddleware>b__0>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-04-25 10:33:37.665 +08:00 [ERR] An unhandled exception has occurred while executing the request.
Swashbuckle.AspNetCore.SwaggerGen.SwaggerGeneratorException: Conflicting method/path combination "GET api/app/test/current-user" for actions - Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application),Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application). Actions require a unique method/path combination for Swagger/OpenAPI 3.0. Use ConflictingActionsResolver as a workaround
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GenerateOperations(IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GeneratePaths(IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GetSwaggerDocumentWithoutFilters(String documentName, String host, String basePath)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GetSwaggerAsync(String documentName, String host, String basePath)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Volo.Abp.AspNetCore.MultiTenancy.MultiTenancyMiddleware.InvokeAsync(HttpContext context, RequestDelegate next)
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.InterfaceMiddlewareBinder.<>c__DisplayClass2_0.<<CreateMiddleware>b__0>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Yi.Framework.Rbac.Domain.Authorization.RefreshTokenMiddleware.InvokeAsync(HttpContext context, RequestDelegate next) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Domain\Authorization\RefreshTokenMiddleware.cs:line 47
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.InterfaceMiddlewareBinder.<>c__DisplayClass2_0.<<CreateMiddleware>b__0>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-04-25 10:34:01.256 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-25 10:34:01.436 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-25 10:34:06.034 +08:00 [INF] Loaded ABP modules:
2024-04-25 10:34:06.034 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-25 10:34:06.034 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-25 10:34:06.035 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-25 10:34:06.035 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-25 10:34:06.035 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-25 10:34:06.035 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-25 10:34:06.035 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-25 10:34:06.035 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-25 10:34:06.035 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-25 10:34:06.035 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-25 10:34:06.035 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-25 10:34:06.035 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-25 10:34:06.035 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-25 10:34:06.035 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-25 10:34:06.035 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-25 10:34:06.035 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-25 10:34:06.035 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-25 10:34:06.035 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-25 10:34:06.035 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-25 10:34:06.035 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-25 10:34:06.035 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-25 10:34:06.035 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-25 10:34:06.035 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-25 10:34:06.035 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-25 10:34:06.035 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-25 10:34:06.035 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-25 10:34:06.035 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-25 10:34:06.035 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-25 10:34:06.035 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-25 10:34:06.035 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-25 10:34:06.035 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-25 10:34:06.035 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-25 10:34:06.035 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-25 10:34:06.035 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-25 10:34:06.035 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-25 10:34:06.035 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-25 10:34:06.035 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-25 10:34:06.035 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-25 10:34:06.035 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-25 10:34:06.035 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-25 10:34:06.035 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-25 10:34:06.035 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-25 10:34:06.035 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-25 10:34:06.035 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-25 10:34:06.035 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-25 10:34:06.035 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-25 10:34:06.035 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-25 10:34:06.035 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-25 10:34:06.035 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-25 10:34:06.035 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-25 10:34:06.035 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-25 10:34:06.035 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-25 10:34:06.035 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-25 10:34:06.035 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-25 10:34:06.035 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-25 10:34:06.035 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-25 10:34:06.035 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-25 10:34:06.035 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-25 10:34:06.035 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-25 10:34:06.035 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-25 10:34:06.035 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-25 10:34:06.035 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-25 10:34:06.035 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-25 10:34:06.035 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-25 10:34:06.035 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-25 10:34:06.035 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-25 10:34:06.035 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-25 10:34:06.035 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-25 10:34:06.035 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-25 10:34:06.035 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-25 10:34:06.035 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-25 10:34:06.035 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-25 10:34:06.035 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-25 10:34:06.035 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-25 10:34:06.035 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-25 10:34:06.035 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-25 10:34:06.035 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-25 10:34:06.035 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-25 10:34:06.035 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-25 10:34:06.035 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-25 10:34:06.035 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-25 10:34:06.035 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-25 10:34:06.035 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-25 10:34:06.035 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-25 10:34:06.035 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-25 10:34:06.035 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-25 10:34:06.035 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-25 10:34:06.035 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-25 10:34:06.041 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-25 10:34:06.046 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-25 10:34:06.699 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:06.707 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.726 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:06.736 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.741 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 10:34:06.745 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:06.761 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.761 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 10:34:06.763 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.774 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:06.776 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.776 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:06.783 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.783 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 10:34:06.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-25 10:34:06.790 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.790 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-25 10:34:06.790 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.790 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-25 10:34:06.790 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.791 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-25 10:34:06.791 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.791 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-25 10:34:06.791 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.791 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-25 10:34:06.791 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.791 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-25 10:34:06.791 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.791 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-25 10:34:06.791 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.791 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-25 10:34:06.791 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.792 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-25 10:34:06.792 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.792 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:06.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 10:34:06.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:06.807 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.808 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:06.814 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.814 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 10:34:06.816 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.816 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-25 10:34:06.816 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.816 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-25 10:34:06.817 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.817 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-25 10:34:06.817 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.817 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-25 10:34:06.817 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.817 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-25 10:34:06.817 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.817 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-25 10:34:06.817 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-25 10:34:06.818 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:06.823 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 10:34:06.826 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:06.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:06.838 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 10:34:06.841 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.841 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-25 10:34:06.842 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:34:06.842 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-25 10:34:06.842 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-25 10:34:06.842 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 10:34:06.842 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 10:34:06.842 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-25 10:34:06.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-25 10:34:06.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-25 10:34:06.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-25 10:34:06.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-25 10:34:06.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-25 10:34:06.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-25 10:34:06.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-25 10:34:06.844 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:06.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.851 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 10:34:06.853 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.858 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:06.859 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.859 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:06.866 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.866 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 10:34:06.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-25 10:34:06.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:34:06.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-25 10:34:06.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-25 10:34:06.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-25 10:34:06.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-25 10:34:06.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-25 10:34:06.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-25 10:34:06.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-25 10:34:06.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-25 10:34:06.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-25 10:34:06.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:06.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 10:34:06.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.886 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:06.888 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.888 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:06.894 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 10:34:06.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-25 10:34:06.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:34:06.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-25 10:34:06.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-25 10:34:06.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-25 10:34:06.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-25 10:34:06.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-25 10:34:06.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:06.906 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.906 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 10:34:06.908 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.914 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:06.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:06.922 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 10:34:06.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-25 10:34:06.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-25 10:34:06.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-25 10:34:06.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:06.932 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.932 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 10:34:06.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:06.943 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:06.950 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 10:34:06.953 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.953 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-25 10:34:06.954 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.954 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-25 10:34:06.954 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.954 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-25 10:34:06.954 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.954 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-25 10:34:06.954 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.954 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-25 10:34:06.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-25 10:34:06.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:34:06.964 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.965 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:06.971 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 10:34:06.974 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:06.981 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.981 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:06.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 10:34:06.992 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-25 10:34:06.993 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:34:06.993 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-25 10:34:06.993 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-25 10:34:06.993 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 10:34:06.993 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 10:34:06.993 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-25 10:34:06.994 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-25 10:34:06.994 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-25 10:34:06.994 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-25 10:34:06.994 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-25 10:34:06.994 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-25 10:34:06.994 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-25 10:34:06.994 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-25 10:34:06.995 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-25 10:34:06.995 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-25 10:34:06.995 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-25 10:34:06.995 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-25 10:34:06.995 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:06.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.001 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.002 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 10:34:07.004 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:07.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.020 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 10:34:07.023 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-25 10:34:07.023 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-25 10:34:07.024 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-25 10:34:07.024 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 10:34:07.032 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:07.038 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.038 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.046 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.047 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 10:34:07.050 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.051 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-25 10:34:07.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:34:07.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-25 10:34:07.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-25 10:34:07.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 10:34:07.054 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.054 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 10:34:07.054 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.054 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-25 10:34:07.054 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.054 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-25 10:34:07.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-25 10:34:07.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-25 10:34:07.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-25 10:34:07.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-25 10:34:07.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 10:34:07.071 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.076 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:07.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.087 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 10:34:07.090 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-25 10:34:07.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-25 10:34:07.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-25 10:34:07.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-25 10:34:07.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 10:34:07.103 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.109 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:07.110 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 10:34:07.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-25 10:34:07.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:34:07.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-25 10:34:07.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-25 10:34:07.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 10:34:07.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 10:34:07.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-25 10:34:07.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-25 10:34:07.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-25 10:34:07.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-25 10:34:07.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-25 10:34:07.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-25 10:34:07.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-25 10:34:07.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.130 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 10:34:07.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:07.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 10:34:07.147 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-25 10:34:07.147 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-25 10:34:07.147 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.153 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.153 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 10:34:07.155 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:07.161 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.161 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 10:34:07.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-25 10:34:07.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:34:07.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-25 10:34:07.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-25 10:34:07.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-25 10:34:07.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-25 10:34:07.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-25 10:34:07.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-25 10:34:07.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-25 10:34:07.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-25 10:34:07.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-25 10:34:07.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-25 10:34:07.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-25 10:34:07.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-25 10:34:07.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-25 10:34:07.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-25 10:34:07.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-25 10:34:07.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-25 10:34:07.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-25 10:34:07.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 10:34:07.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 10:34:07.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-25 10:34:07.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-25 10:34:07.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-25 10:34:07.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:34:07.175 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.182 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.182 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 10:34:07.185 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:07.190 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.190 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.196 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 10:34:07.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-25 10:34:07.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-25 10:34:07.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-25 10:34:07.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-25 10:34:07.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.208 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.208 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 10:34:07.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:07.217 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.225 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 10:34:07.227 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-25 10:34:07.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-25 10:34:07.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-25 10:34:07.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-25 10:34:07.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.235 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.235 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 10:34:07.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.242 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:07.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.248 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.248 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 10:34:07.250 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-25 10:34:07.251 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.257 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 10:34:07.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:07.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.271 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.271 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 10:34:07.274 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.275 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:34:07.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:34:07.278 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 10:34:07.288 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.296 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:07.297 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.297 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.304 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.304 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 10:34:07.306 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.307 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:34:07.308 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:34:07.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.314 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.314 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 10:34:07.316 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:07.322 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.322 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.327 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.327 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 10:34:07.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:34:07.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:34:07.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.337 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 10:34:07.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:07.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.348 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.348 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 10:34:07.350 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.350 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:34:07.351 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.351 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.356 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.356 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 10:34:07.358 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.363 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:07.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 10:34:07.372 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.373 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-25 10:34:07.373 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.373 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-25 10:34:07.373 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.373 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-25 10:34:07.373 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.373 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 10:34:07.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:07.386 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.386 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.392 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.392 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 10:34:07.393 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-25 10:34:07.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.401 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.401 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 10:34:07.403 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:07.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.424 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 10:34:07.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-25 10:34:07.429 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.429 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-25 10:34:07.429 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.429 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-25 10:34:07.430 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-25 10:34:07.430 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-25 10:34:07.430 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.438 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 10:34:07.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:07.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 10:34:07.458 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.458 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-25 10:34:07.458 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.458 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-25 10:34:07.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.464 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 10:34:07.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:34:07.470 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.475 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.475 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 10:34:07.477 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.477 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-25 10:34:07.477 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.477 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-25 10:34:07.478 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-25 10:34:07.478 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-25 10:34:07.478 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:34:07.485 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.485 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 10:34:07.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:34:07.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:34:07.595 +08:00 [DBG] =========Yi-SQL耗时10.3644毫秒=====
2024-04-25 10:34:07.611 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:34:07.612 +08:00 [DBG] =========Yi-SQL耗时1.2195毫秒=====
2024-04-25 10:34:07.618 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:34:07.619 +08:00 [DBG] =========Yi-SQL耗时1.3659毫秒=====
2024-04-25 10:34:07.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:34:07.626 +08:00 [DBG] =========Yi-SQL耗时2.4299毫秒=====
2024-04-25 10:34:07.630 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:34:07.631 +08:00 [DBG] =========Yi-SQL耗时1.4494毫秒=====
2024-04-25 10:34:07.635 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:34:07.636 +08:00 [DBG] =========Yi-SQL耗时1.1651毫秒=====
2024-04-25 10:34:07.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:34:07.642 +08:00 [DBG] =========Yi-SQL耗时1.3858毫秒=====
2024-04-25 10:34:07.645 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-25 10:34:07.646 +08:00 [DBG] =========Yi-SQL耗时1.1832毫秒=====
2024-04-25 10:34:07.656 +08:00 [DBG] 耗时-1613ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-25 10:34:07.722 +08:00 [DBG] 耗时-63ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-25 10:34:07.725 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-25 10:34:07.741 +08:00 [DBG] 耗时-15ms,已加载模块-Volo.Abp.AspNetCore
2024-04-25 10:34:07.746 +08:00 [DBG] 耗时-4ms,已加载模块-Volo.Abp.Quartz
2024-04-25 10:34:07.769 +08:00 [DBG] 耗时-23ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-25 10:34:07.772 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-25 10:34:08.039 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-25 10:34:08.128 +08:00 [DBG] 耗时-356ms,已加载模块-Yi.Abp.Web
2024-04-25 10:34:08.129 +08:00 [INF] ==========【352】个模块初始化执行完毕，总耗时【2080ms】==========
2024-04-25 10:34:08.219 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-25 10:34:08.219 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-25 10:34:08.219 +08:00 [INF] Hosting environment: Development
2024-04-25 10:34:08.219 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-25 10:34:18.162 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:34:18.180 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature Void GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 10:34:18.209 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 26.2502ms
2024-04-25 10:34:18.209 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:34:55.358 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:34:55.359 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature Void GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 10:34:55.360 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 1.5821ms
2024-04-25 10:34:55.360 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:35:02.225 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:35:02.225 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature Void GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 10:35:02.225 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 0.6131ms
2024-04-25 10:35:02.225 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:35:05.445 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:35:05.445 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature Void GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 10:35:05.445 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 0.4369ms
2024-04-25 10:35:05.446 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:35:08.212 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:35:08.212 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature Void GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 10:35:08.213 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 0.5951ms
2024-04-25 10:35:08.213 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:35:13.291 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:35:13.291 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature Void GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 10:35:13.292 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 0.4766ms
2024-04-25 10:35:13.292 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:35:14.088 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:35:14.088 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature Void GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 10:35:14.089 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 0.3795ms
2024-04-25 10:35:14.089 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:35:32.436 +08:00 [INF] CORS policy execution successful.
2024-04-25 10:35:32.445 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 10:35:32.452 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 10:35:34.620 +08:00 [INF] CORS policy execution successful.
2024-04-25 10:35:34.621 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 10:35:34.698 +08:00 [INF] 2024/4/25 10:35:34：cc,-S8ISqoltaDbSISkR52EbA连接服务端success，当前已连接0个
2024-04-25 10:35:48.013 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-25 10:35:48.016 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-25 10:35:48.465 +08:00 [INF] CORS policy execution successful.
2024-04-25 10:35:48.469 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 10:35:48.471 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 10:35:48.500 +08:00 [INF] CORS policy execution successful.
2024-04-25 10:35:48.505 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 10:35:48.512 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 10:35:48.533 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 10:35:48.627 +08:00 [INF] 2024/4/25 10:35:48：cc,Af1MwKILL0d4Lcs5hHxgrA连接服务端success，当前已连接0个
2024-04-25 10:35:48.720 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 10:35:48.729 +08:00 [DBG] =========Yi-SQL耗时9.1812毫秒=====
2024-04-25 10:35:48.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-25 10:35:48.896 +08:00 [DBG] =========Yi-SQL耗时1.7215毫秒=====
2024-04-25 10:35:48.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-25 10:35:48.906 +08:00 [DBG] =========Yi-SQL耗时0.5407毫秒=====
2024-04-25 10:35:48.998 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-25 10:35:49.073 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 539.7095ms
2024-04-25 10:35:49.073 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 10:35:49.085 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-25 10:35:49.090 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 10:35:49.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 10:35:49.096 +08:00 [DBG] =========Yi-SQL耗时1.3048毫秒=====
2024-04-25 10:35:49.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-25 10:35:49.101 +08:00 [DBG] =========Yi-SQL耗时1.2473毫秒=====
2024-04-25 10:35:49.103 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-25 10:35:49.104 +08:00 [DBG] =========Yi-SQL耗时1.243毫秒=====
2024-04-25 10:35:49.108 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 10:35:49.109 +08:00 [DBG] =========Yi-SQL耗时1.3021毫秒=====
2024-04-25 10:35:49.142 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 10:35:49.145 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 55.1887ms
2024-04-25 10:35:49.145 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-25 10:35:49.240 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 10:35:49.253 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-25 10:35:49.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-25 10:35:49.287 +08:00 [DBG] =========Yi-SQL耗时3.7928毫秒=====
2024-04-25 10:35:49.298 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-25 10:35:49.302 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 49.1004ms
2024-04-25 10:35:49.302 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 10:35:49.359 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 10:35:49.359 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:35:49.359 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:35:49.362 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 10:35:49.364 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 10:35:49.365 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-25 10:35:49.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 10:35:49.421 +08:00 [DBG] =========Yi-SQL耗时6.0839毫秒=====
2024-04-25 10:35:49.452 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 10:35:49.463 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 100.9922ms
2024-04-25 10:35:49.463 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 10:35:49.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 10:35:49.496 +08:00 [DBG] =========Yi-SQL耗时3.0513毫秒=====
2024-04-25 10:35:49.512 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 10:35:49.513 +08:00 [DBG] =========Yi-SQL耗时1.8131毫秒=====
2024-04-25 10:35:49.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 10:35:49.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 50 offset 0
===============================

2024-04-25 10:35:49.540 +08:00 [DBG] =========Yi-SQL耗时9.7366毫秒=====
2024-04-25 10:35:49.564 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 10:35:49.571 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 205.9423ms
2024-04-25 10:35:49.572 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:35:49.622 +08:00 [DBG] =========Yi-SQL耗时92.2762毫秒=====
2024-04-25 10:35:49.624 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 10:35:49.625 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 261.3027ms
2024-04-25 10:35:49.625 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:35:58.744 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:35:58.744 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-25 10:35:58.748 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 10:35:58.750 +08:00 [DBG] =========Yi-SQL耗时0.7999毫秒=====
2024-04-25 10:35:58.753 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 10:35:58.764 +08:00 [DBG] =========Yi-SQL耗时10.4401毫秒=====
2024-04-25 10:35:58.767 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 10:35:58.771 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 26.1029ms
2024-04-25 10:35:58.771 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:36:00.795 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:36:00.795 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:36:00.795 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-25 10:36:00.795 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 10:36:00.797 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 10:36:00.797 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 10:36:00.798 +08:00 [DBG] =========Yi-SQL耗时1.2118毫秒=====
2024-04-25 10:36:00.798 +08:00 [DBG] =========Yi-SQL耗时1.0027毫秒=====
2024-04-25 10:36:00.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 50 offset 0
===============================

2024-04-25 10:36:00.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 10:36:00.804 +08:00 [DBG] =========Yi-SQL耗时2.55毫秒=====
2024-04-25 10:36:00.805 +08:00 [DBG] =========Yi-SQL耗时0.7613毫秒=====
2024-04-25 10:36:00.808 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 10:36:00.808 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 10:36:00.809 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 13.6411ms
2024-04-25 10:36:00.809 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 13.6409ms
2024-04-25 10:36:00.809 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:36:00.809 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:36:03.895 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 10:36:03.895 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:36:03.896 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 10:36:03.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 10:36:03.898 +08:00 [DBG] =========Yi-SQL耗时1.1876毫秒=====
2024-04-25 10:36:03.901 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-25 10:36:03.902 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 10:36:03.902 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 6.7569ms
2024-04-25 10:36:03.903 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 10:36:03.915 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 10:36:03.920 +08:00 [DBG] =========Yi-SQL耗时4.26毫秒=====
2024-04-25 10:36:03.921 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 10:36:03.924 +08:00 [DBG] =========Yi-SQL耗时2.5817毫秒=====
2024-04-25 10:36:03.933 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 10:36:03.940 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 39.2529ms
2024-04-25 10:36:03.940 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:36:06.072 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:36:06.074 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-04-25 10:36:06.082 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "post"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 10:36:06.084 +08:00 [DBG] =========Yi-SQL耗时1.6437毫秒=====
2024-04-25 10:36:06.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 10:36:06.089 +08:00 [DBG] =========Yi-SQL耗时1.3384毫秒=====
2024-04-25 10:36:06.096 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 10:36:06.098 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 23.8ms
2024-04-25 10:36:06.098 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:36:07.937 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:36:07.940 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-25 10:36:07.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 10:36:07.949 +08:00 [DBG] =========Yi-SQL耗时1.2442毫秒=====
2024-04-25 10:36:07.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 10:36:07.952 +08:00 [DBG] =========Yi-SQL耗时0.991毫秒=====
2024-04-25 10:36:07.963 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 10:36:07.966 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 25.47ms
2024-04-25 10:36:07.966 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 10:39:53.996 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:39:53.996 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature Void GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 10:39:53.998 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 1.6ms
2024-04-25 10:39:53.998 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:39:55.325 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:39:55.325 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature Void GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 10:39:55.325 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 0.3519ms
2024-04-25 10:39:55.325 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:39:57.920 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:39:57.921 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature Void GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 10:39:57.922 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 0.551ms
2024-04-25 10:39:57.922 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:40:15.862 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 10:40:15.863 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature Void GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 10:42:12.177 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-25 10:42:12.191 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-25 10:42:16.977 +08:00 [INF] Loaded ABP modules:
2024-04-25 10:42:16.978 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-25 10:42:16.978 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-25 10:42:16.978 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-25 10:42:16.978 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-25 10:42:16.978 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-25 10:42:16.978 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-25 10:42:16.978 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-25 10:42:16.978 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-25 10:42:16.978 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-25 10:42:16.978 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-25 10:42:16.978 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-25 10:42:16.978 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-25 10:42:16.978 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-25 10:42:16.978 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-25 10:42:16.979 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-25 10:42:16.979 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-25 10:42:16.979 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-25 10:42:16.979 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-25 10:42:16.979 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-25 10:42:16.979 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-25 10:42:16.979 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-25 10:42:16.979 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-25 10:42:16.979 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-25 10:42:16.979 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-25 10:42:16.979 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-25 10:42:16.979 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-25 10:42:16.979 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-25 10:42:16.979 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-25 10:42:16.979 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-25 10:42:16.979 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-25 10:42:16.979 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-25 10:42:16.979 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-25 10:42:16.979 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-25 10:42:16.979 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-25 10:42:16.979 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-25 10:42:16.979 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-25 10:42:16.979 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-25 10:42:16.979 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-25 10:42:16.979 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-25 10:42:16.979 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-25 10:42:16.979 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-25 10:42:16.979 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-25 10:42:16.979 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-25 10:42:16.979 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-25 10:42:16.979 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-25 10:42:16.979 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-25 10:42:16.979 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-25 10:42:16.979 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-25 10:42:16.979 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-25 10:42:16.979 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-25 10:42:16.979 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-25 10:42:16.979 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-25 10:42:16.979 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-25 10:42:16.979 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-25 10:42:16.979 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-25 10:42:16.979 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-25 10:42:16.979 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-25 10:42:16.979 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-25 10:42:16.979 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-25 10:42:16.979 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-25 10:42:16.979 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-25 10:42:16.979 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-25 10:42:16.979 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-25 10:42:16.979 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-25 10:42:16.979 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-25 10:42:16.979 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-25 10:42:16.979 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-25 10:42:16.979 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-25 10:42:16.979 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-25 10:42:16.979 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-25 10:42:16.979 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-25 10:42:16.979 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-25 10:42:16.979 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-25 10:42:16.979 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-25 10:42:16.979 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-25 10:42:16.979 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-25 10:42:16.979 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-25 10:42:16.979 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-25 10:42:16.979 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-25 10:42:16.979 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-25 10:42:16.979 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-25 10:42:16.979 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-25 10:42:16.979 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-25 10:42:16.979 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-25 10:42:16.979 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-25 10:42:16.979 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-25 10:42:16.979 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-25 10:42:16.979 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-25 10:42:16.989 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-25 10:42:16.995 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-25 10:42:17.797 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:17.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:17.841 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 10:42:17.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.856 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:17.866 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.867 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 10:42:17.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:17.883 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.884 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:17.891 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 10:42:17.894 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-25 10:42:17.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-25 10:42:17.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-25 10:42:17.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-25 10:42:17.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-25 10:42:17.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-25 10:42:17.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-25 10:42:17.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-25 10:42:17.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-25 10:42:17.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-25 10:42:17.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:17.906 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.906 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 10:42:17.909 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.914 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:17.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.917 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:17.923 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 10:42:17.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-25 10:42:17.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-25 10:42:17.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-25 10:42:17.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-25 10:42:17.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-25 10:42:17.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-25 10:42:17.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-25 10:42:17.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:17.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 10:42:17.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:17.945 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:17.953 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.953 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 10:42:17.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-25 10:42:17.956 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:42:17.956 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-25 10:42:17.956 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-25 10:42:17.956 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 10:42:17.956 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 10:42:17.956 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-25 10:42:17.956 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-25 10:42:17.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-25 10:42:17.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-25 10:42:17.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-25 10:42:17.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-25 10:42:17.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-25 10:42:17.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-25 10:42:17.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:17.964 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 10:42:17.966 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:17.971 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:17.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.979 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 10:42:17.981 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.981 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-25 10:42:17.981 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.981 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:42:17.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-25 10:42:17.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-25 10:42:17.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-25 10:42:17.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-25 10:42:17.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-25 10:42:17.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-25 10:42:17.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-25 10:42:17.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-25 10:42:17.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-25 10:42:17.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:17.988 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.988 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 10:42:17.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:17.998 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:17.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.003 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.003 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 10:42:18.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-25 10:42:18.006 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:42:18.006 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-25 10:42:18.007 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-25 10:42:18.007 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-25 10:42:18.007 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-25 10:42:18.007 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-25 10:42:18.007 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 10:42:18.015 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.019 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.020 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 10:42:18.032 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.033 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-25 10:42:18.034 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.034 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-25 10:42:18.034 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.034 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-25 10:42:18.034 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.034 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.043 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.044 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 10:42:18.046 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.051 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.059 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.059 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 10:42:18.061 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-25 10:42:18.062 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-25 10:42:18.062 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-25 10:42:18.062 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-25 10:42:18.062 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-25 10:42:18.062 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-25 10:42:18.062 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.063 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:42:18.070 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.071 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.076 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.076 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 10:42:18.079 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.086 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.086 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.092 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.092 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 10:42:18.094 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-25 10:42:18.095 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:42:18.095 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-25 10:42:18.095 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-25 10:42:18.095 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 10:42:18.095 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 10:42:18.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-25 10:42:18.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-25 10:42:18.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-25 10:42:18.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-25 10:42:18.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-25 10:42:18.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-25 10:42:18.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-25 10:42:18.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-25 10:42:18.097 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-25 10:42:18.097 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-25 10:42:18.097 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-25 10:42:18.097 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-25 10:42:18.097 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.104 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.104 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 10:42:18.106 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.114 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.114 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.119 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 10:42:18.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-25 10:42:18.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-25 10:42:18.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-25 10:42:18.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.128 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.128 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 10:42:18.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.136 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 10:42:18.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-25 10:42:18.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:42:18.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-25 10:42:18.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-25 10:42:18.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 10:42:18.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 10:42:18.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-25 10:42:18.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-25 10:42:18.146 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-25 10:42:18.146 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-25 10:42:18.146 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-25 10:42:18.146 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-25 10:42:18.146 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.152 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 10:42:18.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.165 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 10:42:18.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-25 10:42:18.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-25 10:42:18.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-25 10:42:18.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-25 10:42:18.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 10:42:18.177 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.182 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.190 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.190 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 10:42:18.192 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.192 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-25 10:42:18.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.193 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:42:18.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.193 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-25 10:42:18.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.193 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-25 10:42:18.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.193 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 10:42:18.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.193 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 10:42:18.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.193 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-25 10:42:18.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.193 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-25 10:42:18.194 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-25 10:42:18.194 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-25 10:42:18.194 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-25 10:42:18.194 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-25 10:42:18.194 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-25 10:42:18.194 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 10:42:18.202 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.205 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.206 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.207 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.212 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 10:42:18.214 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.214 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-25 10:42:18.215 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-25 10:42:18.215 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.220 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 10:42:18.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.238 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.238 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 10:42:18.242 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.242 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-25 10:42:18.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-25 10:42:18.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-25 10:42:18.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-25 10:42:18.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-25 10:42:18.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-25 10:42:18.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-25 10:42:18.244 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-25 10:42:18.244 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-25 10:42:18.244 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-25 10:42:18.244 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-25 10:42:18.244 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-25 10:42:18.244 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-25 10:42:18.244 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-25 10:42:18.244 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-25 10:42:18.245 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.245 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-25 10:42:18.245 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.245 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-25 10:42:18.245 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.245 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-25 10:42:18.245 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.245 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-25 10:42:18.245 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.245 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 10:42:18.245 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.245 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 10:42:18.245 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.245 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-25 10:42:18.245 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.246 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-25 10:42:18.246 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.246 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-25 10:42:18.246 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.246 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:42:18.247 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.247 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 10:42:18.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.260 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 10:42:18.268 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.268 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-25 10:42:18.268 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.268 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-25 10:42:18.268 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-25 10:42:18.269 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-25 10:42:18.269 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.274 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.275 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 10:42:18.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.280 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.282 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.287 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.287 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 10:42:18.290 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.290 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-25 10:42:18.291 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-25 10:42:18.291 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-25 10:42:18.291 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-25 10:42:18.291 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.297 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.297 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 10:42:18.299 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.304 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.305 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.311 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.311 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 10:42:18.313 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-25 10:42:18.313 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.319 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 10:42:18.321 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.327 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.334 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.334 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 10:42:18.337 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:42:18.338 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.338 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:42:18.340 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 10:42:18.347 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.356 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.357 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.362 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.363 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 10:42:18.365 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:42:18.367 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.367 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:42:18.368 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.374 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.374 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 10:42:18.376 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.386 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.387 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 10:42:18.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:42:18.390 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:42:18.391 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.391 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.396 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.396 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 10:42:18.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.402 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.403 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 10:42:18.411 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 10:42:18.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 10:42:18.420 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.426 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.432 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 10:42:18.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-25 10:42:18.435 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-25 10:42:18.435 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-25 10:42:18.435 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 10:42:18.444 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.452 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.452 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 10:42:18.463 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.463 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-25 10:42:18.464 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.469 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 10:42:18.471 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.476 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.477 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.477 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 10:42:18.484 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.484 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-25 10:42:18.485 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.485 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-25 10:42:18.485 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.485 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-25 10:42:18.485 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.485 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-25 10:42:18.485 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.485 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-25 10:42:18.485 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 10:42:18.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.497 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.498 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.498 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.503 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.503 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 10:42:18.505 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.505 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-25 10:42:18.505 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.505 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-25 10:42:18.505 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.511 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.512 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 10:42:18.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 10:42:18.517 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.517 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.524 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.525 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 10:42:18.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-25 10:42:18.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-25 10:42:18.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-25 10:42:18.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-25 10:42:18.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 10:42:18.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 10:42:18.536 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 10:42:18.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:42:18.634 +08:00 [DBG] =========Yi-SQL耗时9.0316毫秒=====
2024-04-25 10:42:18.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:42:18.651 +08:00 [DBG] =========Yi-SQL耗时1.3673毫秒=====
2024-04-25 10:42:18.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:42:18.658 +08:00 [DBG] =========Yi-SQL耗时1.9016毫秒=====
2024-04-25 10:42:18.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:42:18.666 +08:00 [DBG] =========Yi-SQL耗时2.6324毫秒=====
2024-04-25 10:42:18.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:42:18.670 +08:00 [DBG] =========Yi-SQL耗时1.5146毫秒=====
2024-04-25 10:42:18.692 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:42:18.694 +08:00 [DBG] =========Yi-SQL耗时1.5468毫秒=====
2024-04-25 10:42:18.699 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 10:42:18.700 +08:00 [DBG] =========Yi-SQL耗时1.111毫秒=====
2024-04-25 10:42:18.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-25 10:42:18.703 +08:00 [DBG] =========Yi-SQL耗时0.7909毫秒=====
2024-04-25 10:42:18.713 +08:00 [DBG] 耗时-1722ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-25 10:42:18.776 +08:00 [DBG] 耗时-60ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-25 10:42:18.781 +08:00 [DBG] 耗时-4ms,已加载模块-Volo.Abp.EventBus
2024-04-25 10:42:18.848 +08:00 [DBG] 耗时-66ms,已加载模块-Volo.Abp.AspNetCore
2024-04-25 10:42:18.854 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-04-25 10:42:18.878 +08:00 [DBG] 耗时-23ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-25 10:42:18.881 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-25 10:42:19.166 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-25 10:42:19.242 +08:00 [DBG] 耗时-360ms,已加载模块-Yi.Abp.Web
2024-04-25 10:42:19.243 +08:00 [INF] ==========【352】个模块初始化执行完毕，总耗时【2243ms】==========
2024-04-25 10:42:19.341 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-25 10:42:19.341 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-25 10:42:19.341 +08:00 [INF] Hosting environment: Development
2024-04-25 10:42:19.341 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-25 10:42:43.531 +08:00 [INF] CORS policy execution successful.
2024-04-25 10:42:43.611 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 10:42:43.618 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 10:42:43.648 +08:00 [INF] CORS policy execution successful.
2024-04-25 10:42:43.650 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 10:42:43.733 +08:00 [INF] 2024/4/25 10:42:43：cc,9X-D6qnsX308SjkAYpKrKA连接服务端success，当前已连接0个
2024-04-25 11:08:42.975 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:08:43.029 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature Void GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 11:08:43.069 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 35.7598ms
2024-04-25 11:08:43.069 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:09:25.717 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:09:25.718 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature Void GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 11:09:25.719 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 1.1878ms
2024-04-25 11:09:25.719 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:10:40.398 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-25 11:10:40.413 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-25 11:10:46.097 +08:00 [INF] Loaded ABP modules:
2024-04-25 11:10:46.097 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-25 11:10:46.097 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-25 11:10:46.097 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-25 11:10:46.097 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-25 11:10:46.097 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-25 11:10:46.097 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-25 11:10:46.097 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-25 11:10:46.097 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-25 11:10:46.097 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-25 11:10:46.097 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-25 11:10:46.097 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-25 11:10:46.097 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-25 11:10:46.097 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-25 11:10:46.097 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-25 11:10:46.097 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-25 11:10:46.097 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-25 11:10:46.097 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-25 11:10:46.097 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-25 11:10:46.097 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-25 11:10:46.097 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-25 11:10:46.097 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-25 11:10:46.098 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-25 11:10:46.098 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-25 11:10:46.098 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-25 11:10:46.098 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-25 11:10:46.098 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-25 11:10:46.098 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-25 11:10:46.098 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-25 11:10:46.098 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-25 11:10:46.098 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-25 11:10:46.098 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-25 11:10:46.098 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-25 11:10:46.098 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-25 11:10:46.098 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-25 11:10:46.098 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-25 11:10:46.098 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-25 11:10:46.098 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-25 11:10:46.098 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-25 11:10:46.098 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-25 11:10:46.098 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-25 11:10:46.098 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-25 11:10:46.098 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-25 11:10:46.098 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-25 11:10:46.098 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-25 11:10:46.098 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-25 11:10:46.098 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-25 11:10:46.098 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-25 11:10:46.098 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-25 11:10:46.098 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-25 11:10:46.098 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-25 11:10:46.098 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-25 11:10:46.098 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-25 11:10:46.098 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-25 11:10:46.098 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-25 11:10:46.098 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-25 11:10:46.098 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-25 11:10:46.098 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-25 11:10:46.098 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-25 11:10:46.098 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-25 11:10:46.098 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-25 11:10:46.098 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-25 11:10:46.098 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-25 11:10:46.098 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-25 11:10:46.098 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-25 11:10:46.098 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-25 11:10:46.098 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-25 11:10:46.098 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-25 11:10:46.098 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-25 11:10:46.098 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-25 11:10:46.098 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-25 11:10:46.098 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-25 11:10:46.098 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-25 11:10:46.098 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-25 11:10:46.098 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-25 11:10:46.098 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-25 11:10:46.098 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-25 11:10:46.098 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-25 11:10:46.098 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-25 11:10:46.098 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-25 11:10:46.098 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-25 11:10:46.098 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-25 11:10:46.098 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-25 11:10:46.098 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-25 11:10:46.098 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-25 11:10:46.098 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-25 11:10:46.098 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-25 11:10:46.098 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-25 11:10:46.098 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-25 11:10:46.105 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-25 11:10:46.111 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-25 11:10:46.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:46.862 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:46.893 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 11:10:46.902 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:46.919 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.920 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 11:10:46.923 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:46.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:46.944 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.945 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 11:10:46.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-25 11:10:46.953 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.953 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-25 11:10:46.953 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.953 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-25 11:10:46.953 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.953 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-25 11:10:46.953 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.953 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-25 11:10:46.954 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.954 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-25 11:10:46.954 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.954 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-25 11:10:46.954 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.954 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-25 11:10:46.954 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.954 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-25 11:10:46.954 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-25 11:10:46.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:46.961 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 11:10:46.964 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:46.971 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:46.977 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 11:10:46.979 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.979 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-25 11:10:46.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-25 11:10:46.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-25 11:10:46.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-25 11:10:46.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-25 11:10:46.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-25 11:10:46.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-25 11:10:46.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.981 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:46.986 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 11:10:46.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:46.994 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:46.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.000 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.000 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 11:10:47.002 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.003 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-25 11:10:47.003 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.003 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:10:47.003 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.003 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-25 11:10:47.003 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-25 11:10:47.004 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:10:47.004 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:10:47.004 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-25 11:10:47.004 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-25 11:10:47.004 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-25 11:10:47.004 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-25 11:10:47.004 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-25 11:10:47.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-25 11:10:47.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-25 11:10:47.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-25 11:10:47.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.011 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 11:10:47.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:47.019 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.019 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.025 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 11:10:47.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-25 11:10:47.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:10:47.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-25 11:10:47.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-25 11:10:47.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-25 11:10:47.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-25 11:10:47.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-25 11:10:47.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-25 11:10:47.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-25 11:10:47.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-25 11:10:47.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-25 11:10:47.030 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 11:10:47.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.042 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:47.044 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.044 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.050 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 11:10:47.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-25 11:10:47.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:10:47.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-25 11:10:47.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-25 11:10:47.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-25 11:10:47.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-25 11:10:47.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-25 11:10:47.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.060 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 11:10:47.062 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.066 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:47.068 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.068 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.074 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.074 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 11:10:47.076 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.076 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-25 11:10:47.076 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.076 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-25 11:10:47.076 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-25 11:10:47.077 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.082 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.082 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 11:10:47.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:47.092 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.093 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.098 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.098 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 11:10:47.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-25 11:10:47.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-25 11:10:47.101 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-25 11:10:47.101 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-25 11:10:47.101 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-25 11:10:47.101 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-25 11:10:47.101 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.102 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:10:47.109 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.115 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.115 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 11:10:47.117 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:47.125 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.125 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 11:10:47.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-25 11:10:47.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:10:47.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-25 11:10:47.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-25 11:10:47.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:10:47.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:10:47.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-25 11:10:47.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-25 11:10:47.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-25 11:10:47.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-25 11:10:47.135 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-25 11:10:47.135 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-25 11:10:47.135 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-25 11:10:47.135 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-25 11:10:47.135 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-25 11:10:47.135 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-25 11:10:47.136 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-25 11:10:47.136 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-25 11:10:47.136 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 11:10:47.147 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:47.157 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.162 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.163 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 11:10:47.165 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-25 11:10:47.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-25 11:10:47.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-25 11:10:47.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 11:10:47.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.177 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:47.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 11:10:47.187 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-25 11:10:47.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:10:47.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-25 11:10:47.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-25 11:10:47.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:10:47.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:10:47.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-25 11:10:47.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-25 11:10:47.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-25 11:10:47.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-25 11:10:47.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-25 11:10:47.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-25 11:10:47.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 11:10:47.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:47.202 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.202 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.208 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.208 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 11:10:47.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-25 11:10:47.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-25 11:10:47.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-25 11:10:47.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-25 11:10:47.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 11:10:47.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.224 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:47.225 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.226 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.232 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 11:10:47.234 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.235 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-25 11:10:47.235 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.235 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:10:47.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-25 11:10:47.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-25 11:10:47.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:10:47.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:10:47.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-25 11:10:47.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-25 11:10:47.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-25 11:10:47.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-25 11:10:47.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-25 11:10:47.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-25 11:10:47.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-25 11:10:47.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 11:10:47.246 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.249 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:47.250 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.250 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.256 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 11:10:47.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-25 11:10:47.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-25 11:10:47.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 11:10:47.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.272 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:47.273 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.273 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.279 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.280 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 11:10:47.282 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-25 11:10:47.282 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:10:47.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-25 11:10:47.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-25 11:10:47.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-25 11:10:47.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-25 11:10:47.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-25 11:10:47.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-25 11:10:47.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-25 11:10:47.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-25 11:10:47.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-25 11:10:47.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-25 11:10:47.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-25 11:10:47.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-25 11:10:47.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-25 11:10:47.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-25 11:10:47.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-25 11:10:47.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-25 11:10:47.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-25 11:10:47.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:10:47.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:10:47.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-25 11:10:47.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-25 11:10:47.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-25 11:10:47.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:10:47.287 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.287 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.293 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.293 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 11:10:47.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:47.299 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.300 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.305 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.306 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 11:10:47.308 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-25 11:10:47.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-25 11:10:47.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-25 11:10:47.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-25 11:10:47.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.314 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.314 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 11:10:47.316 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:47.322 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.322 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.327 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.327 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 11:10:47.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-25 11:10:47.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-25 11:10:47.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-25 11:10:47.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-25 11:10:47.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.335 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.335 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 11:10:47.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:47.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.350 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.350 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 11:10:47.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-25 11:10:47.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.363 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 11:10:47.368 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:47.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.390 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 11:10:47.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:10:47.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:10:47.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.408 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 11:10:47.411 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:47.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.430 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 11:10:47.432 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:10:47.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:10:47.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.440 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 11:10:47.443 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:47.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.453 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 11:10:47.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:10:47.457 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.457 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:10:47.458 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.458 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.463 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.463 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 11:10:47.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:47.470 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.471 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.477 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.477 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 11:10:47.479 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.479 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:10:47.480 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.480 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.485 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 11:10:47.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:47.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.500 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.500 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 11:10:47.502 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-25 11:10:47.503 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.503 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-25 11:10:47.503 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.503 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-25 11:10:47.503 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.503 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.509 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.509 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 11:10:47.511 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.515 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:10:47.516 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.517 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:10:47.523 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.523 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 11:10:47.525 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:10:47.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
ALTER TABLE "question" ADD COLUMN "create_name" varchar(255) NOT NULL  
===============================

2024-04-25 11:10:47.634 +08:00 [FTL] Yi框架-Abp.vNext，爆炸！
Volo.Abp.AbpInitializationException: An error occurred during the initialize Volo.Abp.Modularity.OnPreApplicationInitializationModuleLifecycleContributor phase of the module Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule, Yi.Framework.SqlSugarCore, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null: QuestionEntity 创建失败,请认真检查 1、属性需要get set 2、特殊类型需要加Ignore 具体错误内容： 23502: column "create_name" of relation "question" contains null values. See the inner exception for details.
 ---> System.Exception: QuestionEntity 创建失败,请认真检查 1、属性需要get set 2、特殊类型需要加Ignore 具体错误内容： 23502: column "create_name" of relation "question" contains null values
   at SqlSugar.CodeFirstProvider.InitTables(Type[] entityTypes)
   at Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule.CodeFirst(IServiceProvider service) in D:\vs_space\Yi\Yi.Abp.Net8\framework\Yi.Framework.SqlSugarCore\YiFrameworkSqlSugarCoreModule.cs:line 100
   at Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule.OnPreApplicationInitializationAsync(ApplicationInitializationContext context) in D:\vs_space\Yi\Yi.Abp.Net8\framework\Yi.Framework.SqlSugarCore\YiFrameworkSqlSugarCoreModule.cs:line 73
   at Volo.Abp.Modularity.OnPreApplicationInitializationModuleLifecycleContributor.InitializeAsync(ApplicationInitializationContext context, IAbpModule module)
   at Yi.Framework.Core.Modularity.YiModuleManager.InitializeModulesAsync(ApplicationInitializationContext context) in D:\vs_space\Yi\Yi.Abp.Net8\framework\Yi.Framework.Core\Modularity\YiModuleManager.cs:line 39
   --- End of inner exception stack trace ---
   at Yi.Framework.Core.Modularity.YiModuleManager.InitializeModulesAsync(ApplicationInitializationContext context) in D:\vs_space\Yi\Yi.Abp.Net8\framework\Yi.Framework.Core\Modularity\YiModuleManager.cs:line 51
   at Volo.Abp.AbpApplicationBase.InitializeModulesAsync()
   at Volo.Abp.AbpApplicationWithExternalServiceProvider.InitializeAsync(IServiceProvider serviceProvider)
   at Microsoft.AspNetCore.Builder.AbpApplicationBuilderExtensions.InitializeApplicationAsync(IApplicationBuilder app)
   at Program.<Main>$(String[] args) in D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web\Program.cs:line 37
2024-04-25 11:11:43.083 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-25 11:11:43.096 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-25 11:11:47.604 +08:00 [INF] Loaded ABP modules:
2024-04-25 11:11:47.604 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-25 11:11:47.604 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-25 11:11:47.604 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-25 11:11:47.604 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-25 11:11:47.604 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-25 11:11:47.604 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-25 11:11:47.604 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-25 11:11:47.604 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-25 11:11:47.604 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-25 11:11:47.604 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-25 11:11:47.604 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-25 11:11:47.604 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-25 11:11:47.604 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-25 11:11:47.604 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-25 11:11:47.604 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-25 11:11:47.604 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-25 11:11:47.604 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-25 11:11:47.604 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-25 11:11:47.604 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-25 11:11:47.605 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-25 11:11:47.605 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-25 11:11:47.605 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-25 11:11:47.605 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-25 11:11:47.605 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-25 11:11:47.605 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-25 11:11:47.605 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-25 11:11:47.605 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-25 11:11:47.605 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-25 11:11:47.605 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-25 11:11:47.605 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-25 11:11:47.605 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-25 11:11:47.605 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-25 11:11:47.605 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-25 11:11:47.605 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-25 11:11:47.605 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-25 11:11:47.605 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-25 11:11:47.605 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-25 11:11:47.605 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-25 11:11:47.605 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-25 11:11:47.605 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-25 11:11:47.605 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-25 11:11:47.605 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-25 11:11:47.605 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-25 11:11:47.605 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-25 11:11:47.605 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-25 11:11:47.605 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-25 11:11:47.605 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-25 11:11:47.605 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-25 11:11:47.605 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-25 11:11:47.605 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-25 11:11:47.605 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-25 11:11:47.605 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-25 11:11:47.605 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-25 11:11:47.605 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-25 11:11:47.605 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-25 11:11:47.605 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-25 11:11:47.605 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-25 11:11:47.605 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-25 11:11:47.605 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-25 11:11:47.605 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-25 11:11:47.605 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-25 11:11:47.605 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-25 11:11:47.605 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-25 11:11:47.605 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-25 11:11:47.605 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-25 11:11:47.605 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-25 11:11:47.605 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-25 11:11:47.605 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-25 11:11:47.605 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-25 11:11:47.605 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-25 11:11:47.605 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-25 11:11:47.605 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-25 11:11:47.605 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-25 11:11:47.605 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-25 11:11:47.605 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-25 11:11:47.605 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-25 11:11:47.605 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-25 11:11:47.605 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-25 11:11:47.605 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-25 11:11:47.605 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-25 11:11:47.605 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-25 11:11:47.605 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-25 11:11:47.605 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-25 11:11:47.605 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-25 11:11:47.605 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-25 11:11:47.605 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-25 11:11:47.605 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-25 11:11:47.605 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-25 11:11:47.610 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-25 11:11:47.615 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-25 11:11:48.292 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.299 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.326 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 11:11:48.334 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.350 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.350 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 11:11:48.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.363 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.365 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.372 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.373 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 11:11:48.375 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-25 11:11:48.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-25 11:11:48.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-25 11:11:48.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-25 11:11:48.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-25 11:11:48.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-25 11:11:48.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-25 11:11:48.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-25 11:11:48.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-25 11:11:48.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-25 11:11:48.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.386 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.386 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 11:11:48.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.401 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.401 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 11:11:48.403 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.403 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-25 11:11:48.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-25 11:11:48.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-25 11:11:48.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-25 11:11:48.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-25 11:11:48.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-25 11:11:48.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-25 11:11:48.405 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.405 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.410 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 11:11:48.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 11:11:48.426 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-25 11:11:48.426 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:11:48.426 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-25 11:11:48.426 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-25 11:11:48.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:11:48.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:11:48.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-25 11:11:48.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-25 11:11:48.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-25 11:11:48.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-25 11:11:48.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-25 11:11:48.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-25 11:11:48.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-25 11:11:48.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-25 11:11:48.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 11:11:48.436 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.442 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.442 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 11:11:48.449 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-25 11:11:48.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:11:48.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-25 11:11:48.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-25 11:11:48.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-25 11:11:48.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-25 11:11:48.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-25 11:11:48.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-25 11:11:48.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-25 11:11:48.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-25 11:11:48.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-25 11:11:48.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.452 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.458 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.458 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 11:11:48.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.466 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.466 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.474 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.474 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 11:11:48.476 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.476 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-25 11:11:48.477 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.477 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:11:48.477 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.477 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-25 11:11:48.477 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.477 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-25 11:11:48.477 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.477 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-25 11:11:48.477 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.477 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-25 11:11:48.477 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.477 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-25 11:11:48.478 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.484 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.484 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 11:11:48.486 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.490 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.492 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.497 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.498 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 11:11:48.500 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.500 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-25 11:11:48.500 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.500 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-25 11:11:48.500 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.500 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-25 11:11:48.500 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.500 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.506 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 11:11:48.508 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.514 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.515 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.521 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 11:11:48.523 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-25 11:11:48.524 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-25 11:11:48.524 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-25 11:11:48.524 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-25 11:11:48.524 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-25 11:11:48.525 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.525 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-25 11:11:48.525 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:11:48.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.540 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 11:11:48.542 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.551 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.559 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 11:11:48.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-25 11:11:48.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:11:48.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-25 11:11:48.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-25 11:11:48.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:11:48.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:11:48.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-25 11:11:48.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-25 11:11:48.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-25 11:11:48.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-25 11:11:48.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-25 11:11:48.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-25 11:11:48.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-25 11:11:48.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-25 11:11:48.564 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-25 11:11:48.564 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-25 11:11:48.564 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-25 11:11:48.564 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-25 11:11:48.564 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.570 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 11:11:48.572 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.579 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.581 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.581 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.587 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 11:11:48.589 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.589 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-25 11:11:48.590 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.590 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-25 11:11:48.590 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.590 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-25 11:11:48.590 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.590 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.596 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 11:11:48.598 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.603 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.609 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 11:11:48.611 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.611 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-25 11:11:48.611 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.611 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:11:48.611 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.611 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-25 11:11:48.612 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-25 11:11:48.612 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:11:48.612 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:11:48.612 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-25 11:11:48.612 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-25 11:11:48.612 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-25 11:11:48.612 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-25 11:11:48.613 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.613 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-25 11:11:48.613 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.613 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-25 11:11:48.613 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.613 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.618 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.618 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 11:11:48.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.625 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.630 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.631 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 11:11:48.632 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.632 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-25 11:11:48.633 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.633 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-25 11:11:48.633 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.633 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-25 11:11:48.633 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.633 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-25 11:11:48.633 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.633 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 11:11:48.640 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.645 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 11:11:48.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-25 11:11:48.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:11:48.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-25 11:11:48.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-25 11:11:48.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:11:48.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:11:48.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-25 11:11:48.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-25 11:11:48.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-25 11:11:48.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-25 11:11:48.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-25 11:11:48.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-25 11:11:48.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-25 11:11:48.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.662 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 11:11:48.664 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.667 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 11:11:48.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-25 11:11:48.677 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.677 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-25 11:11:48.677 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.677 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.682 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 11:11:48.684 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.690 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.691 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.696 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 11:11:48.699 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.699 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-25 11:11:48.699 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.699 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:11:48.699 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-25 11:11:48.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-25 11:11:48.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-25 11:11:48.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-25 11:11:48.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-25 11:11:48.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-25 11:11:48.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-25 11:11:48.701 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-25 11:11:48.701 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-25 11:11:48.701 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-25 11:11:48.701 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-25 11:11:48.701 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-25 11:11:48.701 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-25 11:11:48.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-25 11:11:48.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-25 11:11:48.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-25 11:11:48.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-25 11:11:48.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:11:48.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:11:48.703 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-25 11:11:48.703 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-25 11:11:48.703 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-25 11:11:48.703 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:11:48.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.710 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 11:11:48.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 11:11:48.725 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.725 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-25 11:11:48.725 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.725 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-25 11:11:48.726 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.726 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-25 11:11:48.726 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.726 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-25 11:11:48.726 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.726 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.731 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 11:11:48.733 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.739 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.742 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.742 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.748 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.748 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 11:11:48.752 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.753 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-25 11:11:48.754 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.754 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-25 11:11:48.754 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.754 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-25 11:11:48.755 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.755 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-25 11:11:48.755 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.755 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.763 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 11:11:48.766 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.771 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.773 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.773 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 11:11:48.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-25 11:11:48.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 11:11:48.789 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.793 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.795 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.795 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 11:11:48.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:11:48.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:11:48.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.805 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 11:11:48.812 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.820 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.826 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.827 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 11:11:48.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:11:48.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:11:48.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 11:11:48.839 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.844 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.845 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 11:11:48.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:11:48.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.854 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:11:48.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.855 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.860 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.860 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 11:11:48.862 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.867 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.867 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.872 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.872 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 11:11:48.874 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:11:48.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.883 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.883 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 11:11:48.885 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.890 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.891 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 11:11:48.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-25 11:11:48.900 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.900 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-25 11:11:48.900 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.900 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-25 11:11:48.900 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.900 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.905 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 11:11:48.908 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.912 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:11:48.913 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.914 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:11:48.919 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.919 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 11:11:48.921 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
alter table "question" ALTER COLUMN "create_name"  type varchar(255)   
===============================

2024-04-25 11:11:48.944 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:11:48.944 +08:00 [DBG] 
==========Yi-SQL执行:==========
alter table "question" alter "create_name"  SET NOT NULL 
===============================

2024-04-25 11:11:49.019 +08:00 [FTL] Yi框架-Abp.vNext，爆炸！
Volo.Abp.AbpInitializationException: An error occurred during the initialize Volo.Abp.Modularity.OnPreApplicationInitializationModuleLifecycleContributor phase of the module Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule, Yi.Framework.SqlSugarCore, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null: QuestionEntity 创建失败,请认真检查 1、属性需要get set 2、特殊类型需要加Ignore 具体错误内容： 23502: column "create_name" of relation "question" contains null values. See the inner exception for details.
 ---> System.Exception: QuestionEntity 创建失败,请认真检查 1、属性需要get set 2、特殊类型需要加Ignore 具体错误内容： 23502: column "create_name" of relation "question" contains null values
   at SqlSugar.CodeFirstProvider.InitTables(Type[] entityTypes)
   at Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule.CodeFirst(IServiceProvider service) in D:\vs_space\Yi\Yi.Abp.Net8\framework\Yi.Framework.SqlSugarCore\YiFrameworkSqlSugarCoreModule.cs:line 100
   at Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule.OnPreApplicationInitializationAsync(ApplicationInitializationContext context) in D:\vs_space\Yi\Yi.Abp.Net8\framework\Yi.Framework.SqlSugarCore\YiFrameworkSqlSugarCoreModule.cs:line 73
   at Volo.Abp.Modularity.OnPreApplicationInitializationModuleLifecycleContributor.InitializeAsync(ApplicationInitializationContext context, IAbpModule module)
   at Yi.Framework.Core.Modularity.YiModuleManager.InitializeModulesAsync(ApplicationInitializationContext context) in D:\vs_space\Yi\Yi.Abp.Net8\framework\Yi.Framework.Core\Modularity\YiModuleManager.cs:line 39
   --- End of inner exception stack trace ---
   at Yi.Framework.Core.Modularity.YiModuleManager.InitializeModulesAsync(ApplicationInitializationContext context) in D:\vs_space\Yi\Yi.Abp.Net8\framework\Yi.Framework.Core\Modularity\YiModuleManager.cs:line 51
   at Volo.Abp.AbpApplicationBase.InitializeModulesAsync()
   at Volo.Abp.AbpApplicationWithExternalServiceProvider.InitializeAsync(IServiceProvider serviceProvider)
   at Microsoft.AspNetCore.Builder.AbpApplicationBuilderExtensions.InitializeApplicationAsync(IApplicationBuilder app)
   at Program.<Main>$(String[] args) in D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web\Program.cs:line 37
2024-04-25 11:12:32.252 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-25 11:12:32.281 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-25 11:12:36.631 +08:00 [INF] Loaded ABP modules:
2024-04-25 11:12:36.631 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-25 11:12:36.631 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-25 11:12:36.631 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-25 11:12:36.631 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-25 11:12:36.631 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-25 11:12:36.631 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-25 11:12:36.631 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-25 11:12:36.631 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-25 11:12:36.631 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-25 11:12:36.631 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-25 11:12:36.631 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-25 11:12:36.631 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-25 11:12:36.631 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-25 11:12:36.631 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-25 11:12:36.631 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-25 11:12:36.631 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-25 11:12:36.631 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-25 11:12:36.631 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-25 11:12:36.631 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-25 11:12:36.631 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-25 11:12:36.631 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-25 11:12:36.631 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-25 11:12:36.631 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-25 11:12:36.631 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-25 11:12:36.631 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-25 11:12:36.631 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-25 11:12:36.631 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-25 11:12:36.631 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-25 11:12:36.631 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-25 11:12:36.631 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-25 11:12:36.631 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-25 11:12:36.631 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-25 11:12:36.631 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-25 11:12:36.631 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-25 11:12:36.631 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-25 11:12:36.631 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-25 11:12:36.631 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-25 11:12:36.631 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-25 11:12:36.631 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-25 11:12:36.631 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-25 11:12:36.631 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-25 11:12:36.631 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-25 11:12:36.632 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-25 11:12:36.632 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-25 11:12:36.632 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-25 11:12:36.632 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-25 11:12:36.632 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-25 11:12:36.632 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-25 11:12:36.632 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-25 11:12:36.632 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-25 11:12:36.632 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-25 11:12:36.632 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-25 11:12:36.632 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-25 11:12:36.632 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-25 11:12:36.632 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-25 11:12:36.632 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-25 11:12:36.632 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-25 11:12:36.632 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-25 11:12:36.632 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-25 11:12:36.632 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-25 11:12:36.632 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-25 11:12:36.632 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-25 11:12:36.632 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-25 11:12:36.632 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-25 11:12:36.632 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-25 11:12:36.632 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-25 11:12:36.632 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-25 11:12:36.632 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-25 11:12:36.632 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-25 11:12:36.632 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-25 11:12:36.632 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-25 11:12:36.632 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-25 11:12:36.632 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-25 11:12:36.632 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-25 11:12:36.632 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-25 11:12:36.632 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-25 11:12:36.632 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-25 11:12:36.632 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-25 11:12:36.632 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-25 11:12:36.632 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-25 11:12:36.632 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-25 11:12:36.632 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-25 11:12:36.632 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-25 11:12:36.632 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-25 11:12:36.632 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-25 11:12:36.632 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-25 11:12:36.632 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-25 11:12:36.632 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-25 11:12:36.639 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-25 11:12:36.644 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-25 11:12:37.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:37.315 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.341 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 11:12:37.349 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 11:12:37.366 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:37.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.386 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.387 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 11:12:37.391 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-25 11:12:37.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-25 11:12:37.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-25 11:12:37.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-25 11:12:37.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-25 11:12:37.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-25 11:12:37.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-25 11:12:37.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-25 11:12:37.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.396 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-25 11:12:37.396 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.396 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-25 11:12:37.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.405 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.406 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 11:12:37.408 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:37.414 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.414 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.424 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 11:12:37.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-25 11:12:37.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-25 11:12:37.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-25 11:12:37.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-25 11:12:37.429 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.429 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-25 11:12:37.429 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.429 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-25 11:12:37.429 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.429 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-25 11:12:37.429 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.429 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 11:12:37.442 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:37.449 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 11:12:37.458 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.458 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-25 11:12:37.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:12:37.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-25 11:12:37.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-25 11:12:37.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:12:37.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:12:37.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-25 11:12:37.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-25 11:12:37.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-25 11:12:37.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-25 11:12:37.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-25 11:12:37.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-25 11:12:37.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-25 11:12:37.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-25 11:12:37.461 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.466 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.467 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 11:12:37.469 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.476 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:37.478 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.484 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.484 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 11:12:37.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-25 11:12:37.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:12:37.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-25 11:12:37.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-25 11:12:37.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-25 11:12:37.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-25 11:12:37.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-25 11:12:37.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-25 11:12:37.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-25 11:12:37.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-25 11:12:37.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-25 11:12:37.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.540 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 11:12:37.543 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.551 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:37.553 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.553 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.559 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.560 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 11:12:37.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-25 11:12:37.569 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:12:37.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-25 11:12:37.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-25 11:12:37.637 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-25 11:12:37.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-25 11:12:37.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-25 11:12:37.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.703 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 11:12:37.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:37.732 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.733 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.742 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 11:12:37.745 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.745 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-25 11:12:37.746 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-25 11:12:37.746 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-25 11:12:37.746 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.747 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.755 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.755 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 11:12:37.759 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.767 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:37.769 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 11:12:37.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-25 11:12:37.782 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.782 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-25 11:12:37.782 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.782 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-25 11:12:37.782 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.782 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-25 11:12:37.782 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.782 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-25 11:12:37.782 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.782 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-25 11:12:37.783 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.783 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:12:37.793 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.794 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.801 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 11:12:37.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:37.812 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 11:12:37.823 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-25 11:12:37.823 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:12:37.824 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-25 11:12:37.824 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-25 11:12:37.824 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:12:37.824 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:12:37.824 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-25 11:12:37.825 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-25 11:12:37.825 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-25 11:12:37.825 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-25 11:12:37.825 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-25 11:12:37.825 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-25 11:12:37.825 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-25 11:12:37.825 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-25 11:12:37.825 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-25 11:12:37.826 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.826 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-25 11:12:37.826 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.826 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-25 11:12:37.826 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.826 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-25 11:12:37.826 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.826 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.833 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 11:12:37.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.845 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:37.848 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.848 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.854 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 11:12:37.856 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.856 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-25 11:12:37.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-25 11:12:37.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-25 11:12:37.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.862 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.863 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 11:12:37.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.868 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:37.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.875 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 11:12:37.878 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-25 11:12:37.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:12:37.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-25 11:12:37.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-25 11:12:37.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:12:37.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:12:37.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-25 11:12:37.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-25 11:12:37.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-25 11:12:37.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-25 11:12:37.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-25 11:12:37.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-25 11:12:37.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.887 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.887 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 11:12:37.889 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.893 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:37.895 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.900 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 11:12:37.903 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.903 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-25 11:12:37.903 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.903 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-25 11:12:37.904 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-25 11:12:37.904 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-25 11:12:37.904 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.910 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.910 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 11:12:37.913 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.921 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:37.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.931 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.931 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 11:12:37.933 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.933 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-25 11:12:37.933 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.933 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:12:37.933 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.933 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-25 11:12:37.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-25 11:12:37.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:12:37.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:12:37.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-25 11:12:37.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-25 11:12:37.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-25 11:12:37.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-25 11:12:37.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-25 11:12:37.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-25 11:12:37.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-25 11:12:37.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.940 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 11:12:37.942 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:37.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.952 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.952 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 11:12:37.954 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.954 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-25 11:12:37.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-25 11:12:37.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.960 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 11:12:37.962 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.967 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:37.968 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.968 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.974 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.974 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 11:12:37.976 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-25 11:12:37.977 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:12:37.977 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-25 11:12:37.977 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-25 11:12:37.977 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-25 11:12:37.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.978 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-25 11:12:37.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.978 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-25 11:12:37.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.978 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-25 11:12:37.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.978 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-25 11:12:37.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.978 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-25 11:12:37.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.978 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-25 11:12:37.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.978 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-25 11:12:37.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.978 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-25 11:12:37.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.979 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-25 11:12:37.979 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.979 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-25 11:12:37.979 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.979 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-25 11:12:37.979 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.979 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-25 11:12:37.979 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.979 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-25 11:12:37.979 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.979 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-25 11:12:37.979 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.979 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:12:37.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:12:37.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-25 11:12:37.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-25 11:12:37.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-25 11:12:37.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:12:37.981 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.981 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.987 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 11:12:37.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:37.993 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:37.998 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:37.999 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 11:12:38.000 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.000 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-25 11:12:38.001 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-25 11:12:38.001 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-25 11:12:38.001 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-25 11:12:38.001 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.007 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 11:12:38.009 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:38.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.018 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 11:12:38.020 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-25 11:12:38.020 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-25 11:12:38.020 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-25 11:12:38.020 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-25 11:12:38.021 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.021 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.025 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 11:12:38.027 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.031 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:38.032 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.033 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.038 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.038 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 11:12:38.041 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.041 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-25 11:12:38.041 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.041 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.046 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.046 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 11:12:38.048 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:38.054 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.054 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.059 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.059 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 11:12:38.061 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:12:38.062 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:12:38.063 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.063 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.068 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.069 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 11:12:38.070 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.076 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:38.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 11:12:38.086 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:12:38.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:12:38.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.095 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 11:12:38.097 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:38.102 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.102 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.107 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.107 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 11:12:38.109 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.109 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:12:38.111 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.111 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:12:38.111 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.117 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 11:12:38.119 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:38.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.130 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 11:12:38.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:12:38.136 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.143 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 11:12:38.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:38.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.156 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.156 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 11:12:38.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-25 11:12:38.160 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-25 11:12:38.160 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-25 11:12:38.160 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.165 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.165 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 11:12:38.167 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:38.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 11:12:38.182 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.183 +08:00 [DBG] 
==========Yi-SQL执行:==========
alter table "question" ALTER COLUMN "create_name"  type varchar(255)   
===============================

2024-04-25 11:12:38.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
alter table "question" alter "create_name"  DROP NOT NULL 
===============================

2024-04-25 11:12:38.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-25 11:12:38.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.205 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.205 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 11:12:38.207 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:38.214 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.214 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 11:12:38.221 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-25 11:12:38.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-25 11:12:38.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-25 11:12:38.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-25 11:12:38.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-25 11:12:38.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 11:12:38.229 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.233 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:38.234 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.234 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 11:12:38.242 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.242 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-25 11:12:38.242 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.242 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-25 11:12:38.242 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.242 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.247 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.247 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 11:12:38.249 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:12:38.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 11:12:38.261 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-25 11:12:38.261 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-25 11:12:38.261 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-25 11:12:38.262 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-25 11:12:38.262 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:12:38.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 11:12:38.269 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:12:38.367 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:12:38.376 +08:00 [DBG] =========Yi-SQL耗时9.3998毫秒=====
2024-04-25 11:12:38.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:12:38.391 +08:00 [DBG] =========Yi-SQL耗时0.8469毫秒=====
2024-04-25 11:12:38.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:12:38.396 +08:00 [DBG] =========Yi-SQL耗时0.7285毫秒=====
2024-04-25 11:12:38.401 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:12:38.403 +08:00 [DBG] =========Yi-SQL耗时2.0403毫秒=====
2024-04-25 11:12:38.405 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:12:38.407 +08:00 [DBG] =========Yi-SQL耗时1.2361毫秒=====
2024-04-25 11:12:38.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:12:38.410 +08:00 [DBG] =========Yi-SQL耗时0.9474毫秒=====
2024-04-25 11:12:38.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:12:38.417 +08:00 [DBG] =========Yi-SQL耗时1.5071毫秒=====
2024-04-25 11:12:38.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-25 11:12:38.448 +08:00 [DBG] =========Yi-SQL耗时0.9361毫秒=====
2024-04-25 11:12:38.457 +08:00 [DBG] 耗时-1817ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-25 11:12:38.522 +08:00 [DBG] 耗时-62ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-25 11:12:38.525 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-25 11:12:38.541 +08:00 [DBG] 耗时-15ms,已加载模块-Volo.Abp.AspNetCore
2024-04-25 11:12:38.547 +08:00 [DBG] 耗时-6ms,已加载模块-Volo.Abp.Quartz
2024-04-25 11:12:38.572 +08:00 [DBG] 耗时-24ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-25 11:12:38.575 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-25 11:12:38.858 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-25 11:12:38.925 +08:00 [DBG] 耗时-349ms,已加载模块-Yi.Abp.Web
2024-04-25 11:12:38.926 +08:00 [INF] ==========【352】个模块初始化执行完毕，总耗时【2279ms】==========
2024-04-25 11:12:39.020 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-25 11:12:39.020 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-25 11:12:39.020 +08:00 [INF] Hosting environment: Development
2024-04-25 11:12:39.020 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-25 11:12:50.679 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:12:50.695 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 11:12:50.723 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-04-25 11:12:50.726 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 29.3584ms
2024-04-25 11:12:50.726 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:13:05.591 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:13:05.630 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 11:13:05.634 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 11:13:05.659 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:13:05.660 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 11:13:05.743 +08:00 [INF] 2024/4/25 11:13:05：cc,LuuXpbHRQPCviqgmQa2_ww连接服务端success，当前已连接0个
2024-04-25 11:13:18.173 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:13:18.174 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 11:13:18.177 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-04-25 11:13:18.178 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 3.6807ms
2024-04-25 11:13:18.178 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:13:21.214 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:13:21.214 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 11:13:21.215 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-04-25 11:13:21.215 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 0.6553ms
2024-04-25 11:13:21.215 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:13:22.314 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:13:22.315 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 11:13:22.315 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-04-25 11:13:22.315 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 0.431ms
2024-04-25 11:13:22.315 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:13:38.152 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:13:38.152 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 11:14:23.302 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-04-25 11:14:24.685 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 46531.8019ms
2024-04-25 11:14:24.685 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:16:30.210 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:16:30.210 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 11:16:30.211 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-04-25 11:16:30.211 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 0.9399ms
2024-04-25 11:16:30.211 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:17:45.671 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:17:45.672 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 11:17:45.677 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-04-25 11:17:45.677 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 5.3144ms
2024-04-25 11:17:45.677 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:18:03.954 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:18:03.958 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 11:18:37.308 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-25 11:18:37.322 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-25 11:18:42.456 +08:00 [INF] Loaded ABP modules:
2024-04-25 11:18:42.456 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-25 11:18:42.456 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-25 11:18:42.456 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-25 11:18:42.456 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-25 11:18:42.456 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-25 11:18:42.456 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-25 11:18:42.456 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-25 11:18:42.456 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-25 11:18:42.456 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-25 11:18:42.456 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-25 11:18:42.456 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-25 11:18:42.456 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-25 11:18:42.456 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-25 11:18:42.456 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-25 11:18:42.456 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-25 11:18:42.456 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-25 11:18:42.456 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-25 11:18:42.456 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-25 11:18:42.456 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-25 11:18:42.456 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-25 11:18:42.456 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-25 11:18:42.456 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-25 11:18:42.456 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-25 11:18:42.456 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-25 11:18:42.456 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-25 11:18:42.456 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-25 11:18:42.456 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-25 11:18:42.456 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-25 11:18:42.456 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-25 11:18:42.456 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-25 11:18:42.456 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-25 11:18:42.456 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-25 11:18:42.456 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-25 11:18:42.456 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-25 11:18:42.456 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-25 11:18:42.456 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-25 11:18:42.456 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-25 11:18:42.456 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-25 11:18:42.456 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-25 11:18:42.457 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-25 11:18:42.457 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-25 11:18:42.457 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-25 11:18:42.457 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-25 11:18:42.457 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-25 11:18:42.457 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-25 11:18:42.457 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-25 11:18:42.457 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-25 11:18:42.457 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-25 11:18:42.457 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-25 11:18:42.457 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-25 11:18:42.457 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-25 11:18:42.457 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-25 11:18:42.457 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-25 11:18:42.457 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-25 11:18:42.457 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-25 11:18:42.457 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-25 11:18:42.457 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-25 11:18:42.457 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-25 11:18:42.457 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-25 11:18:42.457 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-25 11:18:42.457 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-25 11:18:42.457 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-25 11:18:42.457 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-25 11:18:42.457 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-25 11:18:42.457 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-25 11:18:42.457 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-25 11:18:42.457 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-25 11:18:42.457 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-25 11:18:42.457 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-25 11:18:42.457 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-25 11:18:42.457 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-25 11:18:42.457 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-25 11:18:42.457 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-25 11:18:42.457 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-25 11:18:42.457 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-25 11:18:42.457 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-25 11:18:42.457 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-25 11:18:42.457 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-25 11:18:42.457 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-25 11:18:42.457 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-25 11:18:42.457 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-25 11:18:42.457 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-25 11:18:42.457 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-25 11:18:42.457 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-25 11:18:42.457 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-25 11:18:42.457 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-25 11:18:42.457 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-25 11:18:42.457 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-25 11:18:42.467 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-25 11:18:42.471 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-25 11:18:43.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.293 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.297 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 11:18:43.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.307 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 11:18:43.320 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.337 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 11:18:43.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.341 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-25 11:18:43.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-25 11:18:43.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-25 11:18:43.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-25 11:18:43.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-25 11:18:43.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-25 11:18:43.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-25 11:18:43.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-25 11:18:43.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-25 11:18:43.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-25 11:18:43.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.352 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 11:18:43.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.362 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.367 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 11:18:43.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-25 11:18:43.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-25 11:18:43.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-25 11:18:43.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-25 11:18:43.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-25 11:18:43.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-25 11:18:43.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-25 11:18:43.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.377 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 11:18:43.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.384 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.384 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.390 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 11:18:43.392 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-25 11:18:43.393 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:18:43.393 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-25 11:18:43.393 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-25 11:18:43.393 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:18:43.393 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:18:43.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-25 11:18:43.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-25 11:18:43.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-25 11:18:43.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-25 11:18:43.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-25 11:18:43.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-25 11:18:43.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-25 11:18:43.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-25 11:18:43.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.400 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.400 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 11:18:43.402 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.407 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 11:18:43.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-25 11:18:43.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:18:43.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-25 11:18:43.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-25 11:18:43.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-25 11:18:43.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-25 11:18:43.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-25 11:18:43.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-25 11:18:43.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-25 11:18:43.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-25 11:18:43.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-25 11:18:43.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 11:18:43.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.440 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 11:18:43.444 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.444 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-25 11:18:43.444 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.444 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:18:43.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-25 11:18:43.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-25 11:18:43.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-25 11:18:43.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-25 11:18:43.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-25 11:18:43.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.452 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.452 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 11:18:43.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.466 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.466 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 11:18:43.468 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-25 11:18:43.469 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-25 11:18:43.469 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-25 11:18:43.470 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.476 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.476 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 11:18:43.478 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.485 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.485 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 11:18:43.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-25 11:18:43.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-25 11:18:43.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-25 11:18:43.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-25 11:18:43.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-25 11:18:43.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-25 11:18:43.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:18:43.502 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.508 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.508 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 11:18:43.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.515 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.516 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.517 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.523 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.523 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 11:18:43.525 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.525 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-25 11:18:43.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:18:43.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-25 11:18:43.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-25 11:18:43.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:18:43.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:18:43.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-25 11:18:43.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-25 11:18:43.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-25 11:18:43.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-25 11:18:43.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-25 11:18:43.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-25 11:18:43.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-25 11:18:43.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-25 11:18:43.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-25 11:18:43.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-25 11:18:43.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-25 11:18:43.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-25 11:18:43.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 11:18:43.536 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.544 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.550 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 11:18:43.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-25 11:18:43.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-25 11:18:43.553 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.553 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-25 11:18:43.553 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.553 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 11:18:43.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.565 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.566 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.566 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.571 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.572 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 11:18:43.574 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-25 11:18:43.574 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:18:43.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-25 11:18:43.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-25 11:18:43.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:18:43.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:18:43.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-25 11:18:43.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-25 11:18:43.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-25 11:18:43.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-25 11:18:43.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-25 11:18:43.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-25 11:18:43.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 11:18:43.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.588 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.594 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.595 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 11:18:43.597 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.597 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-25 11:18:43.597 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.597 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-25 11:18:43.597 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.597 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-25 11:18:43.597 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.597 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-25 11:18:43.597 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.597 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 11:18:43.604 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.610 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.611 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.617 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.617 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 11:18:43.619 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.619 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-25 11:18:43.619 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:18:43.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-25 11:18:43.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-25 11:18:43.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:18:43.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:18:43.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-25 11:18:43.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-25 11:18:43.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-25 11:18:43.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-25 11:18:43.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-25 11:18:43.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-25 11:18:43.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-25 11:18:43.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.627 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 11:18:43.629 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.632 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.634 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.634 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.639 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.640 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 11:18:43.642 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-25 11:18:43.642 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-25 11:18:43.642 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.647 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.647 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 11:18:43.649 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.658 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.659 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.665 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.665 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 11:18:43.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-25 11:18:43.669 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:18:43.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-25 11:18:43.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-25 11:18:43.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-25 11:18:43.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-25 11:18:43.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-25 11:18:43.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-25 11:18:43.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-25 11:18:43.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-25 11:18:43.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-25 11:18:43.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-25 11:18:43.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-25 11:18:43.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-25 11:18:43.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-25 11:18:43.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-25 11:18:43.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-25 11:18:43.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-25 11:18:43.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-25 11:18:43.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:18:43.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:18:43.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-25 11:18:43.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-25 11:18:43.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-25 11:18:43.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:18:43.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.681 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.681 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 11:18:43.683 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.686 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.688 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.688 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.693 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.694 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 11:18:43.695 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-25 11:18:43.696 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-25 11:18:43.696 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-25 11:18:43.696 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-25 11:18:43.696 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 11:18:43.704 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.709 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.714 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.714 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 11:18:43.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-25 11:18:43.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-25 11:18:43.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-25 11:18:43.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-25 11:18:43.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.722 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.722 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 11:18:43.724 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.730 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.730 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.736 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 11:18:43.738 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.738 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-25 11:18:43.739 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.739 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.746 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 11:18:43.749 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.753 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.755 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.756 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.761 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 11:18:43.764 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.764 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:18:43.765 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.765 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:18:43.766 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.766 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.771 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.771 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 11:18:43.773 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.782 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 11:18:43.789 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.790 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:18:43.791 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.791 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:18:43.792 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.792 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 11:18:43.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.805 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.811 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 11:18:43.813 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:18:43.814 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.814 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:18:43.815 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.820 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 11:18:43.823 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.827 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.834 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 11:18:43.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:18:43.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 11:18:43.845 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.858 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.858 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 11:18:43.860 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-25 11:18:43.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-25 11:18:43.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-25 11:18:43.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.866 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.867 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 11:18:43.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.883 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.884 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 11:18:43.886 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.886 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-25 11:18:43.886 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.887 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.892 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 11:18:43.894 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.900 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.900 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.905 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 11:18:43.908 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-25 11:18:43.908 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-25 11:18:43.908 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.909 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-25 11:18:43.909 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.909 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-25 11:18:43.909 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.909 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-25 11:18:43.909 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.909 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.914 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.915 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 11:18:43.917 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.920 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.921 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.922 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 11:18:43.929 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.930 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-25 11:18:43.930 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.930 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-25 11:18:43.930 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.930 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 11:18:43.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:18:43.942 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.942 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 11:18:43.949 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-25 11:18:43.950 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-25 11:18:43.950 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-25 11:18:43.950 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-25 11:18:43.950 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:18:43.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:43.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 11:18:43.958 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:18:44.049 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:18:44.058 +08:00 [DBG] =========Yi-SQL耗时8.9238毫秒=====
2024-04-25 11:18:44.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:18:44.073 +08:00 [DBG] =========Yi-SQL耗时1.3253毫秒=====
2024-04-25 11:18:44.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:18:44.078 +08:00 [DBG] =========Yi-SQL耗时0.9139毫秒=====
2024-04-25 11:18:44.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:18:44.086 +08:00 [DBG] =========Yi-SQL耗时3.312毫秒=====
2024-04-25 11:18:44.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:18:44.092 +08:00 [DBG] =========Yi-SQL耗时1.8185毫秒=====
2024-04-25 11:18:44.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:18:44.097 +08:00 [DBG] =========Yi-SQL耗时1.1495毫秒=====
2024-04-25 11:18:44.103 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:18:44.104 +08:00 [DBG] =========Yi-SQL耗时1.2348毫秒=====
2024-04-25 11:18:44.107 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-25 11:18:44.108 +08:00 [DBG] =========Yi-SQL耗时1.0508毫秒=====
2024-04-25 11:18:44.118 +08:00 [DBG] 耗时-1650ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-25 11:18:44.176 +08:00 [DBG] 耗时-55ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-25 11:18:44.180 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-25 11:18:44.196 +08:00 [DBG] 耗时-16ms,已加载模块-Volo.Abp.AspNetCore
2024-04-25 11:18:44.201 +08:00 [DBG] 耗时-4ms,已加载模块-Volo.Abp.Quartz
2024-04-25 11:18:44.223 +08:00 [DBG] 耗时-21ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-25 11:18:44.226 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-25 11:18:44.480 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-25 11:18:44.569 +08:00 [DBG] 耗时-343ms,已加载模块-Yi.Abp.Web
2024-04-25 11:18:44.570 +08:00 [INF] ==========【352】个模块初始化执行完毕，总耗时【2095ms】==========
2024-04-25 11:18:44.656 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-25 11:18:44.656 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-25 11:18:44.656 +08:00 [INF] Hosting environment: Development
2024-04-25 11:18:44.656 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-25 11:19:07.471 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:19:07.488 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 11:19:15.433 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-04-25 11:19:15.436 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 7945.5549ms
2024-04-25 11:19:15.436 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:19:30.422 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:19:30.423 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 11:20:13.494 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:20:13.494 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-04-25 11:20:14.147 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 43722.937ms
2024-04-25 11:20:14.147 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:20:14.152 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 11:20:14.159 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 11:20:14.175 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:20:14.176 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 11:20:14.257 +08:00 [INF] 2024/4/25 11:20:14：cc,y3CyxSBDYw2pDf1YLEDfyg连接服务端success，当前已连接0个
2024-04-25 11:20:28.434 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:20:28.434 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 11:20:28.435 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-04-25 11:20:28.435 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 1.0284ms
2024-04-25 11:20:28.435 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:20:52.033 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:20:52.034 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 11:21:08.171 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-04-25 11:21:08.172 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 16137.9649ms
2024-04-25 11:21:08.172 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:23:24.926 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:23:24.926 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:23:24.926 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:23:25.204 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-25 11:23:25.204 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 11:23:25.205 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-25 11:23:25.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:23:25.480 +08:00 [DBG] =========Yi-SQL耗时110.2958毫秒=====
2024-04-25 11:23:25.560 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-25 11:23:25.566 +08:00 [DBG] =========Yi-SQL耗时6.8746毫秒=====
2024-04-25 11:23:25.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-25 11:23:25.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-25 11:23:25.605 +08:00 [DBG] =========Yi-SQL耗时37.1761毫秒=====
2024-04-25 11:23:25.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-25 11:23:25.613 +08:00 [DBG] =========Yi-SQL耗时3.5704毫秒=====
2024-04-25 11:23:25.641 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:23:25.678 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:23:25.695 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 490.892ms
2024-04-25 11:23:25.696 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:23:25.697 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 492.0124ms
2024-04-25 11:23:25.697 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:23:25.736 +08:00 [DBG] =========Yi-SQL耗时167.8179毫秒=====
2024-04-25 11:23:25.750 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:23:25.754 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 549.814ms
2024-04-25 11:23:25.754 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:23:27.315 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-25 11:23:27.319 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-25 11:23:27.687 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:23:27.693 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 11:23:27.700 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 11:23:27.735 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:23:27.738 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 11:23:27.741 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 11:23:27.747 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 11:23:27.963 +08:00 [INF] 2024/4/25 11:23:27：cc,L95PtrsOE9ekJZeWTIcGYg连接服务端success，当前已连接0个
2024-04-25 11:23:28.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:23:28.032 +08:00 [DBG] =========Yi-SQL耗时9.0818毫秒=====
2024-04-25 11:23:28.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-25 11:23:28.199 +08:00 [DBG] =========Yi-SQL耗时7.2019毫秒=====
2024-04-25 11:23:28.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-25 11:23:28.229 +08:00 [DBG] =========Yi-SQL耗时4.9046毫秒=====
2024-04-25 11:23:28.370 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-25 11:23:28.378 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 630.6367ms
2024-04-25 11:23:28.378 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 11:23:28.396 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-25 11:23:28.399 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 11:23:28.403 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:23:28.407 +08:00 [DBG] =========Yi-SQL耗时3.7861毫秒=====
2024-04-25 11:23:28.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-25 11:23:28.413 +08:00 [DBG] =========Yi-SQL耗时4.4281毫秒=====
2024-04-25 11:23:28.414 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-25 11:23:28.416 +08:00 [DBG] =========Yi-SQL耗时1.5263毫秒=====
2024-04-25 11:23:28.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:23:28.422 +08:00 [DBG] =========Yi-SQL耗时2.3411毫秒=====
2024-04-25 11:23:28.472 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:23:28.476 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 76.9683ms
2024-04-25 11:23:28.476 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-25 11:23:28.579 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 11:23:28.584 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-25 11:23:28.610 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-25 11:23:28.617 +08:00 [DBG] =========Yi-SQL耗时7.1567毫秒=====
2024-04-25 11:23:28.646 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-25 11:23:28.657 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 72.597ms
2024-04-25 11:23:28.657 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 11:23:28.750 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:23:28.750 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:23:28.751 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 11:23:28.751 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 11:23:28.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:23:28.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:23:28.752 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:23:28.752 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:23:28.759 +08:00 [DBG] =========Yi-SQL耗时5.9087毫秒=====
2024-04-25 11:23:28.760 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-25 11:23:28.760 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-25 11:23:28.761 +08:00 [DBG] =========Yi-SQL耗时8.4404毫秒=====
2024-04-25 11:23:28.763 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:23:28.763 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.7668ms
2024-04-25 11:23:28.763 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:23:28.765 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-25 11:23:28.767 +08:00 [DBG] =========Yi-SQL耗时1.4481毫秒=====
2024-04-25 11:23:28.770 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:23:28.770 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 19.6328ms
2024-04-25 11:23:28.770 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:23:28.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-25 11:23:28.774 +08:00 [DBG] =========Yi-SQL耗时4.084毫秒=====
2024-04-25 11:23:28.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-25 11:23:28.799 +08:00 [DBG] =========Yi-SQL耗时16.3902毫秒=====
2024-04-25 11:23:28.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-25 11:23:28.806 +08:00 [DBG] =========Yi-SQL耗时2.1774毫秒=====
2024-04-25 11:23:28.807 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:23:28.834 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 74.0913ms
2024-04-25 11:23:28.834 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:23:28.836 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:23:28.836 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 76.5681ms
2024-04-25 11:23:28.836 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:13.548 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-25 11:25:13.550 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-25 11:25:13.791 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:25:13.805 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 11:25:13.806 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 11:25:13.815 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:13.816 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:13.822 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:25:13.823 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 11:25:13.851 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-25 11:25:13.852 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 35.8438ms
2024-04-25 11:25:13.852 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:13.863 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:13.863 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:13.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:13.866 +08:00 [DBG] =========Yi-SQL耗时1.7193毫秒=====
2024-04-25 11:25:13.872 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-25 11:25:13.872 +08:00 [DBG] =========Yi-SQL耗时0.5948毫秒=====
2024-04-25 11:25:13.873 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-25 11:25:13.875 +08:00 [DBG] =========Yi-SQL耗时1.5276毫秒=====
2024-04-25 11:25:13.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:13.881 +08:00 [DBG] =========Yi-SQL耗时3.359毫秒=====
2024-04-25 11:25:13.881 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:13.882 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 19.4056ms
2024-04-25 11:25:13.882 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:13.890 +08:00 [INF] 2024/4/25 11:25:13：cc,K7u9CoN7it8ESOMxeB7iBw连接服务端success，当前已连接0个
2024-04-25 11:25:14.000 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:14.000 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:14.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-25 11:25:14.008 +08:00 [DBG] =========Yi-SQL耗时3.3953毫秒=====
2024-04-25 11:25:14.012 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-25 11:25:14.012 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 11.8401ms
2024-04-25 11:25:14.012 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:14.230 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:14.230 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:14.230 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:14.231 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:14.231 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:14.231 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:14.232 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:14.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:14.233 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:14.233 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:14.234 +08:00 [DBG] =========Yi-SQL耗时1.1572毫秒=====
2024-04-25 11:25:14.305 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-25 11:25:14.325 +08:00 [DBG] =========Yi-SQL耗时19.9721毫秒=====
2024-04-25 11:25:14.327 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:14.329 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 98.4556ms
2024-04-25 11:25:14.329 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:14.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-25 11:25:14.331 +08:00 [DBG] =========Yi-SQL耗时2.0009毫秒=====
2024-04-25 11:25:14.335 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-25 11:25:14.351 +08:00 [DBG] =========Yi-SQL耗时16.6859毫秒=====
2024-04-25 11:25:14.418 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:14.419 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 187.6301ms
2024-04-25 11:25:14.419 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:14.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-25 11:25:14.422 +08:00 [DBG] =========Yi-SQL耗时1.7062毫秒=====
2024-04-25 11:25:14.423 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:14.423 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 190.5219ms
2024-04-25 11:25:14.423 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:14.471 +08:00 [DBG] =========Yi-SQL耗时238.4943毫秒=====
2024-04-25 11:25:14.479 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:14.480 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 249.4382ms
2024-04-25 11:25:14.480 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:16.017 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-25 11:25:16.022 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-25 11:25:16.048 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:16.050 +08:00 [DBG] =========Yi-SQL耗时1.7787毫秒=====
2024-04-25 11:25:16.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 11:25:16.063 +08:00 [DBG] =========Yi-SQL耗时3.9524毫秒=====
2024-04-25 11:25:16.067 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:16.068 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 46.4935ms
2024-04-25 11:25:16.068 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-25 11:25:17.830 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-25 11:25:17.830 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-25 11:25:18.125 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:25:18.142 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 11:25:18.143 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 11:25:18.152 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:18.153 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:18.163 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-25 11:25:18.164 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 10.6192ms
2024-04-25 11:25:18.164 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:18.181 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:25:18.184 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 11:25:18.186 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:18.191 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:18.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:18.199 +08:00 [DBG] =========Yi-SQL耗时2.0451毫秒=====
2024-04-25 11:25:18.202 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-25 11:25:18.204 +08:00 [DBG] =========Yi-SQL耗时2.0968毫秒=====
2024-04-25 11:25:18.205 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-25 11:25:18.208 +08:00 [DBG] =========Yi-SQL耗时2.0818毫秒=====
2024-04-25 11:25:18.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:18.214 +08:00 [DBG] =========Yi-SQL耗时3.4572毫秒=====
2024-04-25 11:25:18.216 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:18.220 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 28.6371ms
2024-04-25 11:25:18.220 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:18.318 +08:00 [INF] 2024/4/25 11:25:18：cc,YLsWPJUPsda9wirmCHVUSg连接服务端success，当前已连接0个
2024-04-25 11:25:18.402 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:18.402 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:18.405 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-25 11:25:18.407 +08:00 [DBG] =========Yi-SQL耗时1.4672毫秒=====
2024-04-25 11:25:18.410 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-25 11:25:18.411 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 8.4652ms
2024-04-25 11:25:18.411 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:18.553 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:18.553 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-25 11:25:18.553 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-25 11:25:18.554 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:18.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:18.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:18.560 +08:00 [DBG] =========Yi-SQL耗时1.4497毫秒=====
2024-04-25 11:25:18.560 +08:00 [DBG] =========Yi-SQL耗时1.542毫秒=====
2024-04-25 11:25:18.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 11:25:18.565 +08:00 [DBG] =========Yi-SQL耗时1.3486毫秒=====
2024-04-25 11:25:18.566 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:18.566 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:18.566 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 12.9365ms
2024-04-25 11:25:18.566 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 11.4542ms
2024-04-25 11:25:18.566 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-25 11:25:18.566 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:20.798 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:20.803 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:20.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:20.818 +08:00 [DBG] =========Yi-SQL耗时0.8772毫秒=====
2024-04-25 11:25:20.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 11:25:20.822 +08:00 [DBG] =========Yi-SQL耗时1.3638毫秒=====
2024-04-25 11:25:20.833 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:20.836 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 32.888ms
2024-04-25 11:25:20.836 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:21.705 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-25 11:25:21.705 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-25 11:25:22.035 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:25:22.041 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 11:25:22.043 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 11:25:22.047 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:22.047 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:22.052 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-25 11:25:22.053 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 5.1064ms
2024-04-25 11:25:22.053 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:22.084 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:25:22.087 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 11:25:22.125 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:22.126 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:22.130 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:22.132 +08:00 [DBG] =========Yi-SQL耗时1.6871毫秒=====
2024-04-25 11:25:22.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-25 11:25:22.135 +08:00 [DBG] =========Yi-SQL耗时1.0716毫秒=====
2024-04-25 11:25:22.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-25 11:25:22.137 +08:00 [DBG] =========Yi-SQL耗时0.6736毫秒=====
2024-04-25 11:25:22.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:22.140 +08:00 [DBG] =========Yi-SQL耗时1.7899毫秒=====
2024-04-25 11:25:22.142 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:22.143 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 16.7441ms
2024-04-25 11:25:22.143 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:22.159 +08:00 [INF] 2024/4/25 11:25:22：cc,q_7JLEEGnm8e4bxhrBueIQ连接服务端success，当前已连接0个
2024-04-25 11:25:22.311 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:22.311 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:22.314 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-25 11:25:22.315 +08:00 [DBG] =========Yi-SQL耗时1.1507毫秒=====
2024-04-25 11:25:22.319 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-25 11:25:22.319 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 8.3275ms
2024-04-25 11:25:22.320 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:22.455 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:22.455 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:22.456 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:22.456 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:22.458 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:22.461 +08:00 [DBG] =========Yi-SQL耗时2.2437毫秒=====
2024-04-25 11:25:22.463 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:22.464 +08:00 [DBG] =========Yi-SQL耗时0.9598毫秒=====
2024-04-25 11:25:22.467 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 11:25:22.468 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:22.469 +08:00 [DBG] =========Yi-SQL耗时1.6585毫秒=====
2024-04-25 11:25:22.469 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 13.4882ms
2024-04-25 11:25:22.469 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:22.473 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:22.474 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 17.9692ms
2024-04-25 11:25:22.474 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:23.692 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:23.692 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:23.692 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:23.692 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:23.692 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:23.693 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:23.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:23.698 +08:00 [DBG] =========Yi-SQL耗时2.5755毫秒=====
2024-04-25 11:25:23.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-25 11:25:23.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-25 11:25:23.702 +08:00 [DBG] =========Yi-SQL耗时1.2049毫秒=====
2024-04-25 11:25:23.702 +08:00 [DBG] =========Yi-SQL耗时1.8836毫秒=====
2024-04-25 11:25:23.704 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:23.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-25 11:25:23.709 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 15.8217ms
2024-04-25 11:25:23.710 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:23.710 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-25 11:25:23.711 +08:00 [DBG] =========Yi-SQL耗时5.5903毫秒=====
2024-04-25 11:25:23.715 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:23.716 +08:00 [DBG] =========Yi-SQL耗时7.3076毫秒=====
2024-04-25 11:25:23.717 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 24.0612ms
2024-04-25 11:25:23.717 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:23.719 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:23.719 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 26.9805ms
2024-04-25 11:25:23.719 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:25.900 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:25.900 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:25.900 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:25.903 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:25.907 +08:00 [DBG] =========Yi-SQL耗时4.7859毫秒=====
2024-04-25 11:25:25.909 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:25.910 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 9.3691ms
2024-04-25 11:25:25.910 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:25.919 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:25.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-25 11:25:25.938 +08:00 [DBG] =========Yi-SQL耗时2.0617毫秒=====
2024-04-25 11:25:25.973 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:25.981 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 61.318ms
2024-04-25 11:25:25.981 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:27.153 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:27.153 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:27.163 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-25 11:25:27.165 +08:00 [DBG] =========Yi-SQL耗时1.711毫秒=====
2024-04-25 11:25:27.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-25 11:25:27.167 +08:00 [DBG] =========Yi-SQL耗时0.7505毫秒=====
2024-04-25 11:25:27.169 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:27.170 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 17.2177ms
2024-04-25 11:25:27.170 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:28.234 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:28.236 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:28.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "post"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:28.248 +08:00 [DBG] =========Yi-SQL耗时3.7509毫秒=====
2024-04-25 11:25:28.250 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 11:25:28.252 +08:00 [DBG] =========Yi-SQL耗时1.361毫秒=====
2024-04-25 11:25:28.260 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:28.266 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 30.3705ms
2024-04-25 11:25:28.266 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:29.669 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:29.672 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:29.688 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:29.691 +08:00 [DBG] =========Yi-SQL耗时2.2762毫秒=====
2024-04-25 11:25:29.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 11:25:29.697 +08:00 [DBG] =========Yi-SQL耗时2.655毫秒=====
2024-04-25 11:25:29.707 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:29.712 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 39.1897ms
2024-04-25 11:25:29.712 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:31.042 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:31.046 +08:00 [INF] Route matched with {action = "GetList", controller = "Notice", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListInput) on controller Yi.Framework.Rbac.Application.Services.NoticeService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:31.067 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "notice"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:31.069 +08:00 [DBG] =========Yi-SQL耗时1.891毫秒=====
2024-04-25 11:25:31.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","title","type","content","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "notice"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 11:25:31.073 +08:00 [DBG] =========Yi-SQL耗时1.1433毫秒=====
2024-04-25 11:25:31.076 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:31.081 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application) in 34.6615ms
2024-04-25 11:25:31.081 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:31.898 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:31.898 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:31.898 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:31.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:31.900 +08:00 [DBG] =========Yi-SQL耗时1.0072毫秒=====
2024-04-25 11:25:31.902 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:31.903 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:31.904 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 5.7064ms
2024-04-25 11:25:31.904 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:31.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:31.918 +08:00 [DBG] =========Yi-SQL耗时1.6815毫秒=====
2024-04-25 11:25:31.921 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 11:25:31.923 +08:00 [DBG] =========Yi-SQL耗时2.1196毫秒=====
2024-04-25 11:25:31.933 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:31.938 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 35.9295ms
2024-04-25 11:25:31.938 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:34.220 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:34.220 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:34.220 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:34.223 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:34.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:34.224 +08:00 [DBG] =========Yi-SQL耗时1.0226毫秒=====
2024-04-25 11:25:34.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 50 offset 0
===============================

2024-04-25 11:25:34.231 +08:00 [DBG] =========Yi-SQL耗时1.1466毫秒=====
2024-04-25 11:25:34.236 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:34.236 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 16.5541ms
2024-04-25 11:25:34.237 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:34.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:34.241 +08:00 [DBG] =========Yi-SQL耗时0.8627毫秒=====
2024-04-25 11:25:34.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 11:25:34.245 +08:00 [DBG] =========Yi-SQL耗时1.0504毫秒=====
2024-04-25 11:25:34.248 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:34.249 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 25.8977ms
2024-04-25 11:25:34.249 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:35.965 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:35.965 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.RecordLog.LoginLogService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:35.966 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:35.968 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_common_status' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:35.971 +08:00 [DBG] =========Yi-SQL耗时1.4821毫秒=====
2024-04-25 11:25:35.972 +08:00 [INF] Route matched with {action = "GetList", controller = "LoginLog", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.LoginLog.LoginLogGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.LoginLog.LoginLogGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.RecordLog.LoginLogService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:35.976 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:35.977 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 10.7406ms
2024-04-25 11:25:35.977 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:35.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "loginlog"  
===============================

2024-04-25 11:25:35.996 +08:00 [DBG] =========Yi-SQL耗时3.4413毫秒=====
2024-04-25 11:25:35.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","loginuser","loginlocation","loginip","browser","os","logmsg","creatorid" FROM "loginlog"     LIMIT 10 offset 0
===============================

2024-04-25 11:25:35.999 +08:00 [DBG] =========Yi-SQL耗时1.0314毫秒=====
2024-04-25 11:25:36.007 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.LoginLog.LoginLogGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:36.009 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.RecordLog.LoginLogService.GetListAsync (Yi.Framework.Rbac.Application) in 36.8728ms
2024-04-25 11:25:36.009 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.RecordLog.LoginLogService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:36.782 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:36.782 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.RecordLog.OperationLogService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:36.782 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:36.783 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_oper_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:36.784 +08:00 [DBG] =========Yi-SQL耗时1.0075毫秒=====
2024-04-25 11:25:36.787 +08:00 [INF] Route matched with {action = "GetList", controller = "OperationLog", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.OperLog.OperationLogGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.OperLog.OperationLogGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.RecordLog.OperationLogService (Yi.Framework.Rbac.Application).
2024-04-25 11:25:36.787 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:36.788 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 5.5162ms
2024-04-25 11:25:36.788 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:36.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "operationlog"  
===============================

2024-04-25 11:25:36.804 +08:00 [DBG] =========Yi-SQL耗时2.2937毫秒=====
2024-04-25 11:25:36.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","title","opertype","requestmethod","operuser","operip","operlocation","method","requestparam","requestresult","creationtime","creatorid" FROM "operationlog"     LIMIT 10 offset 0
===============================

2024-04-25 11:25:36.807 +08:00 [DBG] =========Yi-SQL耗时0.8406毫秒=====
2024-04-25 11:25:36.838 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.OperLog.OperationLogGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:36.850 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.RecordLog.OperationLogService.GetListAsync (Yi.Framework.Rbac.Application) in 62.4755ms
2024-04-25 11:25:36.850 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.RecordLog.OperationLogService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:25:41.447 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-25 11:25:41.447 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-25 11:25:41.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:25:41.449 +08:00 [DBG] =========Yi-SQL耗时0.8778毫秒=====
2024-04-25 11:25:41.453 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-25 11:25:41.454 +08:00 [DBG] =========Yi-SQL耗时0.8253毫秒=====
2024-04-25 11:25:41.455 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:25:41.455 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 8.0544ms
2024-04-25 11:25:41.455 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-25 11:28:20.186 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-25 11:28:20.204 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-25 11:28:25.644 +08:00 [INF] Loaded ABP modules:
2024-04-25 11:28:25.644 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-25 11:28:25.644 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-25 11:28:25.644 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-25 11:28:25.644 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-25 11:28:25.644 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-25 11:28:25.644 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-25 11:28:25.644 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-25 11:28:25.644 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-25 11:28:25.644 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-25 11:28:25.644 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-25 11:28:25.644 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-25 11:28:25.644 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-25 11:28:25.644 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-25 11:28:25.644 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-25 11:28:25.644 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-25 11:28:25.644 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-25 11:28:25.644 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-25 11:28:25.644 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-25 11:28:25.644 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-25 11:28:25.644 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-25 11:28:25.644 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-25 11:28:25.644 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-25 11:28:25.644 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-25 11:28:25.644 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-25 11:28:25.644 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-25 11:28:25.644 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-25 11:28:25.644 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-25 11:28:25.644 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-25 11:28:25.644 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-25 11:28:25.644 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-25 11:28:25.644 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-25 11:28:25.644 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-25 11:28:25.644 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-25 11:28:25.644 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-25 11:28:25.644 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-25 11:28:25.644 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-25 11:28:25.644 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-25 11:28:25.644 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-25 11:28:25.644 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-25 11:28:25.644 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-25 11:28:25.644 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-25 11:28:25.644 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-25 11:28:25.644 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-25 11:28:25.644 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-25 11:28:25.644 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-25 11:28:25.644 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-25 11:28:25.644 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-25 11:28:25.644 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-25 11:28:25.644 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-25 11:28:25.644 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-25 11:28:25.644 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-25 11:28:25.644 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-25 11:28:25.644 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-25 11:28:25.644 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-25 11:28:25.644 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-25 11:28:25.645 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-25 11:28:25.645 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-25 11:28:25.645 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-25 11:28:25.645 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-25 11:28:25.645 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-25 11:28:25.645 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-25 11:28:25.645 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-25 11:28:25.645 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-25 11:28:25.645 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-25 11:28:25.645 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-25 11:28:25.645 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-25 11:28:25.645 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-25 11:28:25.645 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-25 11:28:25.645 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-25 11:28:25.645 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-25 11:28:25.645 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-25 11:28:25.645 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-25 11:28:25.645 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-25 11:28:25.645 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-25 11:28:25.645 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-25 11:28:25.645 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-25 11:28:25.645 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-25 11:28:25.645 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-25 11:28:25.645 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-25 11:28:25.645 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-25 11:28:25.645 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-25 11:28:25.645 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-25 11:28:25.645 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-25 11:28:25.645 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-25 11:28:25.645 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-25 11:28:25.645 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-25 11:28:25.645 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-25 11:28:25.645 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-25 11:28:25.652 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-25 11:28:25.657 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-25 11:28:26.357 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.367 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.400 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 11:28:26.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.414 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 11:28:26.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 11:28:26.449 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.452 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-25 11:28:26.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-25 11:28:26.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-25 11:28:26.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-25 11:28:26.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-25 11:28:26.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-25 11:28:26.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-25 11:28:26.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-25 11:28:26.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-25 11:28:26.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-25 11:28:26.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.462 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.462 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 11:28:26.464 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.472 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.479 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.479 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 11:28:26.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-25 11:28:26.483 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-25 11:28:26.483 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-25 11:28:26.483 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-25 11:28:26.483 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-25 11:28:26.483 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-25 11:28:26.484 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.484 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-25 11:28:26.484 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.484 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.490 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 11:28:26.492 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.497 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.497 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.503 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.504 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 11:28:26.506 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-25 11:28:26.506 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:28:26.506 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-25 11:28:26.506 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-25 11:28:26.506 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:28:26.507 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.507 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:28:26.507 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.507 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-25 11:28:26.507 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.507 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-25 11:28:26.507 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.507 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-25 11:28:26.507 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.507 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-25 11:28:26.507 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.507 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-25 11:28:26.507 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.507 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-25 11:28:26.507 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.507 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-25 11:28:26.508 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.508 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-25 11:28:26.508 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.508 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.514 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 11:28:26.516 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.520 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.521 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 11:28:26.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-25 11:28:26.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:28:26.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-25 11:28:26.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-25 11:28:26.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-25 11:28:26.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-25 11:28:26.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-25 11:28:26.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-25 11:28:26.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-25 11:28:26.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-25 11:28:26.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-25 11:28:26.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.537 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 11:28:26.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.546 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.546 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 11:28:26.554 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-25 11:28:26.554 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:28:26.554 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-25 11:28:26.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-25 11:28:26.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-25 11:28:26.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-25 11:28:26.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-25 11:28:26.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 11:28:26.565 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.572 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.572 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.581 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.581 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 11:28:26.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-25 11:28:26.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-25 11:28:26.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-25 11:28:26.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.590 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 11:28:26.594 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.614 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.615 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 11:28:26.617 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.617 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-25 11:28:26.617 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.617 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-25 11:28:26.617 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.617 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-25 11:28:26.617 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.618 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-25 11:28:26.618 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.618 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-25 11:28:26.618 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.618 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-25 11:28:26.618 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.619 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:28:26.628 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.628 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.634 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.634 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 11:28:26.636 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.642 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.643 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.649 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 11:28:26.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-25 11:28:26.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:28:26.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-25 11:28:26.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-25 11:28:26.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:28:26.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:28:26.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-25 11:28:26.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-25 11:28:26.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-25 11:28:26.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-25 11:28:26.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-25 11:28:26.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-25 11:28:26.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-25 11:28:26.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-25 11:28:26.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-25 11:28:26.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-25 11:28:26.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-25 11:28:26.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-25 11:28:26.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.661 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.661 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 11:28:26.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.679 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.680 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 11:28:26.683 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.683 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-25 11:28:26.683 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.683 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-25 11:28:26.684 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-25 11:28:26.684 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.689 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 11:28:26.692 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.703 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 11:28:26.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-25 11:28:26.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:28:26.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-25 11:28:26.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-25 11:28:26.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:28:26.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:28:26.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-25 11:28:26.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-25 11:28:26.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-25 11:28:26.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-25 11:28:26.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-25 11:28:26.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-25 11:28:26.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 11:28:26.715 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.718 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.719 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.719 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.724 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.724 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 11:28:26.726 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-25 11:28:26.727 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-25 11:28:26.727 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-25 11:28:26.727 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-25 11:28:26.727 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.734 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.734 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 11:28:26.736 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.741 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.741 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.747 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.748 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 11:28:26.750 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.750 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-25 11:28:26.750 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.750 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:28:26.750 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.750 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-25 11:28:26.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-25 11:28:26.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:28:26.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:28:26.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-25 11:28:26.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-25 11:28:26.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-25 11:28:26.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-25 11:28:26.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-25 11:28:26.752 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-25 11:28:26.752 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-25 11:28:26.752 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.757 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.757 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 11:28:26.759 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.764 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.764 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.769 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 11:28:26.772 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.772 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-25 11:28:26.772 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.772 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-25 11:28:26.772 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.772 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.779 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 11:28:26.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.786 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.794 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 11:28:26.796 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.797 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-25 11:28:26.797 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.797 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:28:26.797 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.797 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-25 11:28:26.797 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.797 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-25 11:28:26.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-25 11:28:26.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-25 11:28:26.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-25 11:28:26.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-25 11:28:26.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-25 11:28:26.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-25 11:28:26.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-25 11:28:26.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-25 11:28:26.799 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-25 11:28:26.799 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-25 11:28:26.799 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-25 11:28:26.799 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-25 11:28:26.799 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-25 11:28:26.799 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-25 11:28:26.799 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-25 11:28:26.799 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:28:26.799 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:28:26.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-25 11:28:26.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-25 11:28:26.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-25 11:28:26.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:28:26.801 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.806 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.807 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 11:28:26.809 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.814 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.814 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 11:28:26.821 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-25 11:28:26.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-25 11:28:26.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-25 11:28:26.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-25 11:28:26.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 11:28:26.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.833 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.840 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.840 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 11:28:26.842 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-25 11:28:26.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-25 11:28:26.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-25 11:28:26.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-25 11:28:26.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.848 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.848 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 11:28:26.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.855 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.856 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.856 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.863 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.863 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 11:28:26.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-25 11:28:26.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.866 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 11:28:26.873 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.879 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.885 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.885 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 11:28:26.887 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.887 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:28:26.889 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:28:26.890 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.890 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.896 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.896 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 11:28:26.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.906 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.906 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.912 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.913 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 11:28:26.915 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.915 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:28:26.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:28:26.917 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.917 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.923 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 11:28:26.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.929 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.930 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.931 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 11:28:26.939 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.939 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:28:26.940 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.940 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:28:26.941 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 11:28:26.949 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.953 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.954 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.954 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.960 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 11:28:26.962 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.962 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:28:26.963 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 11:28:26.972 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:26.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.978 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.985 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 11:28:26.987 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-25 11:28:26.987 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-25 11:28:26.987 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-25 11:28:26.988 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.988 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:26.993 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:26.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 11:28:26.995 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:27.003 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.003 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:27.008 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 11:28:27.010 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-25 11:28:27.011 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:27.017 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 11:28:27.019 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:27.025 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:27.032 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.033 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 11:28:27.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-25 11:28:27.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-25 11:28:27.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-25 11:28:27.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-25 11:28:27.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-25 11:28:27.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:27.042 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.042 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 11:28:27.044 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.049 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:27.050 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:27.056 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.056 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 11:28:27.058 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.059 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-25 11:28:27.059 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.059 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-25 11:28:27.060 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:27.066 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.066 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 11:28:27.068 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.071 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:27.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:27.080 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.080 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 11:28:27.082 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.082 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-25 11:28:27.082 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.082 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-25 11:28:27.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-25 11:28:27.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-25 11:28:27.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:27.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 11:28:27.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:27.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:28:27.198 +08:00 [DBG] =========Yi-SQL耗时9.582毫秒=====
2024-04-25 11:28:27.213 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:28:27.214 +08:00 [DBG] =========Yi-SQL耗时1.2693毫秒=====
2024-04-25 11:28:27.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:28:27.222 +08:00 [DBG] =========Yi-SQL耗时1.0053毫秒=====
2024-04-25 11:28:27.227 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:28:27.229 +08:00 [DBG] =========Yi-SQL耗时2.5567毫秒=====
2024-04-25 11:28:27.233 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:28:27.234 +08:00 [DBG] =========Yi-SQL耗时1.2554毫秒=====
2024-04-25 11:28:27.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:28:27.238 +08:00 [DBG] =========Yi-SQL耗时0.8834毫秒=====
2024-04-25 11:28:27.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:28:27.244 +08:00 [DBG] =========Yi-SQL耗时0.7688毫秒=====
2024-04-25 11:28:27.246 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-25 11:28:27.248 +08:00 [DBG] =========Yi-SQL耗时1.7723毫秒=====
2024-04-25 11:28:27.257 +08:00 [DBG] 耗时-1604ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-25 11:28:27.323 +08:00 [DBG] 耗时-63ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-25 11:28:27.327 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-25 11:28:27.343 +08:00 [DBG] 耗时-16ms,已加载模块-Volo.Abp.AspNetCore
2024-04-25 11:28:27.349 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-04-25 11:28:27.371 +08:00 [DBG] 耗时-22ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-25 11:28:27.375 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-25 11:28:27.669 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-25 11:28:27.740 +08:00 [DBG] 耗时-364ms,已加载模块-Yi.Abp.Web
2024-04-25 11:28:27.741 +08:00 [INF] ==========【352】个模块初始化执行完毕，总耗时【2081ms】==========
2024-04-25 11:28:27.837 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-25 11:28:27.837 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-25 11:28:27.837 +08:00 [INF] Hosting environment: Development
2024-04-25 11:28:27.837 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-25 11:28:31.051 +08:00 [ERR] An unhandled exception has occurred while executing the request.
Swashbuckle.AspNetCore.SwaggerGen.SwaggerGeneratorException: Conflicting method/path combination "GET api/app/hello-world" for actions - Yi.Abp.Application.Services.TestService.GetHelloWorld (Yi.Abp.Application),Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application). Actions require a unique method/path combination for Swagger/OpenAPI 3.0. Use ConflictingActionsResolver as a workaround
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GenerateOperations(IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GeneratePaths(IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GetSwaggerDocumentWithoutFilters(String documentName, String host, String basePath)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GetSwaggerAsync(String documentName, String host, String basePath)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Volo.Abp.AspNetCore.MultiTenancy.MultiTenancyMiddleware.InvokeAsync(HttpContext context, RequestDelegate next)
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.InterfaceMiddlewareBinder.<>c__DisplayClass2_0.<<CreateMiddleware>b__0>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Yi.Framework.Rbac.Domain.Authorization.RefreshTokenMiddleware.InvokeAsync(HttpContext context, RequestDelegate next) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Domain\Authorization\RefreshTokenMiddleware.cs:line 47
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.InterfaceMiddlewareBinder.<>c__DisplayClass2_0.<<CreateMiddleware>b__0>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-04-25 11:28:54.751 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-25 11:28:54.764 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-25 11:28:58.467 +08:00 [INF] Loaded ABP modules:
2024-04-25 11:28:58.468 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-25 11:28:58.468 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-25 11:28:58.468 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-25 11:28:58.468 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-25 11:28:58.468 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-25 11:28:58.468 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-25 11:28:58.468 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-25 11:28:58.468 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-25 11:28:58.468 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-25 11:28:58.468 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-25 11:28:58.468 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-25 11:28:58.468 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-25 11:28:58.468 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-25 11:28:58.468 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-25 11:28:58.468 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-25 11:28:58.468 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-25 11:28:58.468 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-25 11:28:58.468 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-25 11:28:58.468 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-25 11:28:58.468 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-25 11:28:58.468 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-25 11:28:58.468 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-25 11:28:58.468 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-25 11:28:58.468 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-25 11:28:58.468 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-25 11:28:58.468 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-25 11:28:58.468 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-25 11:28:58.468 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-25 11:28:58.468 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-25 11:28:58.468 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-25 11:28:58.468 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-25 11:28:58.468 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-25 11:28:58.468 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-25 11:28:58.468 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-25 11:28:58.468 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-25 11:28:58.468 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-25 11:28:58.468 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-25 11:28:58.468 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-25 11:28:58.468 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-25 11:28:58.468 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-25 11:28:58.468 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-25 11:28:58.468 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-25 11:28:58.468 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-25 11:28:58.468 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-25 11:28:58.468 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-25 11:28:58.468 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-25 11:28:58.468 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-25 11:28:58.468 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-25 11:28:58.468 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-25 11:28:58.468 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-25 11:28:58.468 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-25 11:28:58.468 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-25 11:28:58.468 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-25 11:28:58.468 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-25 11:28:58.468 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-25 11:28:58.468 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-25 11:28:58.468 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-25 11:28:58.468 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-25 11:28:58.468 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-25 11:28:58.468 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-25 11:28:58.468 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-25 11:28:58.468 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-25 11:28:58.468 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-25 11:28:58.468 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-25 11:28:58.468 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-25 11:28:58.468 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-25 11:28:58.468 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-25 11:28:58.468 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-25 11:28:58.468 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-25 11:28:58.468 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-25 11:28:58.468 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-25 11:28:58.468 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-25 11:28:58.468 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-25 11:28:58.468 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-25 11:28:58.468 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-25 11:28:58.468 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-25 11:28:58.468 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-25 11:28:58.468 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-25 11:28:58.468 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-25 11:28:58.468 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-25 11:28:58.468 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-25 11:28:58.468 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-25 11:28:58.468 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-25 11:28:58.468 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-25 11:28:58.468 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-25 11:28:58.468 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-25 11:28:58.468 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-25 11:28:58.468 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-25 11:28:58.477 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-25 11:28:58.482 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-25 11:28:59.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.092 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.107 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.114 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 11:28:59.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.126 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.135 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 11:28:59.138 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.148 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.155 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 11:28:59.157 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.158 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-25 11:28:59.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-25 11:28:59.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-25 11:28:59.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-25 11:28:59.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-25 11:28:59.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-25 11:28:59.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-25 11:28:59.160 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-25 11:28:59.160 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-25 11:28:59.160 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-25 11:28:59.160 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.161 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.167 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 11:28:59.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.175 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.182 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 11:28:59.186 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.186 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-25 11:28:59.187 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-25 11:28:59.187 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-25 11:28:59.187 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-25 11:28:59.187 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-25 11:28:59.187 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-25 11:28:59.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-25 11:28:59.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 11:28:59.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.202 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.203 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.208 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.209 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 11:28:59.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-25 11:28:59.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:28:59.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-25 11:28:59.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-25 11:28:59.212 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:28:59.212 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:28:59.212 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-25 11:28:59.212 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-25 11:28:59.212 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-25 11:28:59.212 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-25 11:28:59.212 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-25 11:28:59.212 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-25 11:28:59.212 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-25 11:28:59.213 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.213 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-25 11:28:59.213 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.213 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 11:28:59.221 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.226 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.227 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.233 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.234 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 11:28:59.235 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-25 11:28:59.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:28:59.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-25 11:28:59.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-25 11:28:59.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-25 11:28:59.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-25 11:28:59.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-25 11:28:59.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-25 11:28:59.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-25 11:28:59.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-25 11:28:59.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-25 11:28:59.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 11:28:59.247 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 11:28:59.261 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-25 11:28:59.262 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:28:59.262 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-25 11:28:59.262 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-25 11:28:59.263 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-25 11:28:59.263 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-25 11:28:59.263 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-25 11:28:59.263 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.271 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.271 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 11:28:59.274 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.279 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.280 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.280 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.286 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.286 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 11:28:59.288 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.288 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-25 11:28:59.288 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.288 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-25 11:28:59.288 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.288 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-25 11:28:59.288 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.288 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.294 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.294 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 11:28:59.296 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.303 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.304 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 11:28:59.311 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.312 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-25 11:28:59.312 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.312 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-25 11:28:59.312 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.312 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-25 11:28:59.312 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.312 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-25 11:28:59.312 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.312 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-25 11:28:59.312 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.312 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-25 11:28:59.313 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:28:59.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.324 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.324 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 11:28:59.326 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.332 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.333 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 11:28:59.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-25 11:28:59.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:28:59.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-25 11:28:59.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-25 11:28:59.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:28:59.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:28:59.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-25 11:28:59.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-25 11:28:59.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-25 11:28:59.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-25 11:28:59.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-25 11:28:59.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-25 11:28:59.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-25 11:28:59.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-25 11:28:59.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-25 11:28:59.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-25 11:28:59.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-25 11:28:59.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.346 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-25 11:28:59.346 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.346 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.352 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 11:28:59.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.363 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.365 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 11:28:59.373 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.373 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-25 11:28:59.373 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.373 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-25 11:28:59.373 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.373 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-25 11:28:59.373 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.374 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 11:28:59.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.386 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.386 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.391 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.392 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 11:28:59.393 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-25 11:28:59.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:28:59.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-25 11:28:59.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-25 11:28:59.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:28:59.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:28:59.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-25 11:28:59.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-25 11:28:59.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-25 11:28:59.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-25 11:28:59.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-25 11:28:59.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-25 11:28:59.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.396 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.401 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.402 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 11:28:59.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.407 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.414 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.414 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 11:28:59.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-25 11:28:59.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-25 11:28:59.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-25 11:28:59.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-25 11:28:59.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 11:28:59.426 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.431 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.431 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.437 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.437 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 11:28:59.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-25 11:28:59.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:28:59.440 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-25 11:28:59.440 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-25 11:28:59.440 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:28:59.440 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:28:59.440 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-25 11:28:59.440 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-25 11:28:59.440 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-25 11:28:59.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-25 11:28:59.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-25 11:28:59.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-25 11:28:59.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-25 11:28:59.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 11:28:59.449 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.452 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 11:28:59.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-25 11:28:59.461 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-25 11:28:59.461 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.467 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.467 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 11:28:59.469 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.473 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.474 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.474 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 11:28:59.486 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-25 11:28:59.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:28:59.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-25 11:28:59.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-25 11:28:59.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-25 11:28:59.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-25 11:28:59.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-25 11:28:59.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-25 11:28:59.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-25 11:28:59.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-25 11:28:59.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-25 11:28:59.490 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.490 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-25 11:28:59.490 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.490 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-25 11:28:59.490 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.490 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-25 11:28:59.490 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.490 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-25 11:28:59.490 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.490 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-25 11:28:59.490 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.490 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-25 11:28:59.490 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-25 11:28:59.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-25 11:28:59.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:28:59.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:28:59.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-25 11:28:59.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-25 11:28:59.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-25 11:28:59.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:28:59.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.499 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.499 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 11:28:59.501 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.505 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.506 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.512 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.512 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 11:28:59.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.515 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-25 11:28:59.515 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.515 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-25 11:28:59.515 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.515 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-25 11:28:59.515 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.515 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-25 11:28:59.515 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.515 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.520 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.520 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 11:28:59.522 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.535 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 11:28:59.536 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-25 11:28:59.537 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-25 11:28:59.537 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-25 11:28:59.537 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-25 11:28:59.537 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.544 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 11:28:59.546 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 11:28:59.560 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.560 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-25 11:28:59.560 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.560 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.566 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.566 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 11:28:59.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.572 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.573 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.578 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.579 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 11:28:59.580 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.581 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:28:59.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:28:59.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.587 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 11:28:59.590 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.597 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.604 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.604 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 11:28:59.606 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:28:59.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:28:59.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.614 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.614 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 11:28:59.616 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.619 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.627 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 11:28:59.629 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.629 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:28:59.630 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.630 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:28:59.631 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.631 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.636 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 11:28:59.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.642 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.647 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.647 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 11:28:59.649 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:28:59.650 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 11:28:59.658 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.664 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.665 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 11:28:59.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-25 11:28:59.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-25 11:28:59.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-25 11:28:59.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.679 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.679 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 11:28:59.681 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.686 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.687 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.688 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.694 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.694 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 11:28:59.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-25 11:28:59.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.704 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.704 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 11:28:59.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.710 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 11:28:59.719 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.720 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-25 11:28:59.720 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.720 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-25 11:28:59.720 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.720 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-25 11:28:59.720 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.720 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-25 11:28:59.720 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.720 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-25 11:28:59.721 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.721 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.726 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.726 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 11:28:59.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.732 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.733 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.734 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.739 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.739 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 11:28:59.741 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.741 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-25 11:28:59.741 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.741 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-25 11:28:59.741 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.742 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.747 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.747 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 11:28:59.749 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:28:59.754 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.754 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.759 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.759 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 11:28:59.760 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.761 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-25 11:28:59.761 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.761 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-25 11:28:59.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-25 11:28:59.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-25 11:28:59.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:28:59.767 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.767 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 11:28:59.769 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:28:59.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:28:59.855 +08:00 [DBG] =========Yi-SQL耗时9.3337毫秒=====
2024-04-25 11:28:59.890 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:28:59.891 +08:00 [DBG] =========Yi-SQL耗时1.2774毫秒=====
2024-04-25 11:28:59.896 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:28:59.897 +08:00 [DBG] =========Yi-SQL耗时1.0131毫秒=====
2024-04-25 11:28:59.903 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:28:59.904 +08:00 [DBG] =========Yi-SQL耗时1.8659毫秒=====
2024-04-25 11:28:59.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:28:59.908 +08:00 [DBG] =========Yi-SQL耗时0.6264毫秒=====
2024-04-25 11:28:59.910 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:28:59.911 +08:00 [DBG] =========Yi-SQL耗时0.8296毫秒=====
2024-04-25 11:28:59.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:28:59.917 +08:00 [DBG] =========Yi-SQL耗时0.8267毫秒=====
2024-04-25 11:28:59.920 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-25 11:28:59.920 +08:00 [DBG] =========Yi-SQL耗时0.7203毫秒=====
2024-04-25 11:28:59.929 +08:00 [DBG] 耗时-1451ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-25 11:28:59.984 +08:00 [DBG] 耗时-53ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-25 11:28:59.988 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-25 11:29:00.001 +08:00 [DBG] 耗时-13ms,已加载模块-Volo.Abp.AspNetCore
2024-04-25 11:29:00.006 +08:00 [DBG] 耗时-4ms,已加载模块-Volo.Abp.Quartz
2024-04-25 11:29:00.028 +08:00 [DBG] 耗时-22ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-25 11:29:00.032 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-25 11:29:00.244 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-25 11:29:00.312 +08:00 [DBG] 耗时-279ms,已加载模块-Yi.Abp.Web
2024-04-25 11:29:00.313 +08:00 [INF] ==========【352】个模块初始化执行完毕，总耗时【1829ms】==========
2024-04-25 11:29:00.392 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-25 11:29:00.392 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-25 11:29:00.392 +08:00 [INF] Hosting environment: Development
2024-04-25 11:29:00.392 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-25 11:29:18.505 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:29:18.522 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "User", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.UserService (Yi.Abp.Application).
2024-04-25 11:29:18.550 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-04-25 11:29:18.553 +08:00 [INF] Executed action Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application) in 29.0171ms
2024-04-25 11:29:18.553 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:29:48.227 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:29:48.228 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "User", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.UserService (Yi.Abp.Application).
2024-04-25 11:29:48.230 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-04-25 11:29:48.230 +08:00 [INF] Executed action Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application) in 2.5772ms
2024-04-25 11:29:48.230 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:29:50.554 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:29:50.558 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 11:29:50.562 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 11:29:50.609 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:29:50.611 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 11:29:50.703 +08:00 [INF] 2024/4/25 11:29:50：cc,7VmcOMUR3R2QX9VOYwi0xw连接服务端success，当前已连接0个
2024-04-25 11:30:48.999 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:30:49.000 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 11:30:49.001 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-04-25 11:30:49.002 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 1.6973ms
2024-04-25 11:30:49.002 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:30:51.981 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:30:51.982 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 11:30:51.982 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-04-25 11:30:51.982 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 0.6117ms
2024-04-25 11:30:51.982 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:31:08.465 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:31:08.465 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 11:31:08.466 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-04-25 11:31:08.466 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 0.7984ms
2024-04-25 11:31:08.466 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:31:10.709 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:31:10.709 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 11:31:10.710 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-04-25 11:31:10.710 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 0.5566ms
2024-04-25 11:31:10.710 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:31:11.558 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:31:11.558 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 11:31:11.558 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-04-25 11:31:11.559 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 0.5209ms
2024-04-25 11:31:11.559 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:31:23.914 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:31:23.915 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "User", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.UserService (Yi.Abp.Application).
2024-04-25 11:32:09.172 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:32:12.336 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 11:32:12.349 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 11:33:01.579 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:33:02.640 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 11:33:03.558 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-25 11:33:05.621 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-25 11:33:08.827 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-04-25 11:33:12.703 +08:00 [INF] Executed action Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application) in 108787.3554ms
2024-04-25 11:33:12.703 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:33:12.712 +08:00 [INF] 2024/4/25 11:33:12：cc,ufEuq2D9Di0Fr1PhE0HbGg连接服务端success，当前已连接0个
2024-04-25 11:33:32.198 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:33:32.198 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "User", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.UserService (Yi.Abp.Application).
2024-04-25 11:33:32.199 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-04-25 11:33:32.199 +08:00 [INF] Executed action Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application) in 0.8803ms
2024-04-25 11:33:32.199 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:33:43.959 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:33:43.961 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "User", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.UserService (Yi.Abp.Application).
2024-04-25 11:33:43.962 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-04-25 11:33:43.962 +08:00 [INF] Executed action Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application) in 0.9937ms
2024-04-25 11:33:43.962 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:48:40.247 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:48:40.258 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "User", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.UserService (Yi.Abp.Application).
2024-04-25 11:49:30.564 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-25 11:49:30.584 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-25 11:49:37.397 +08:00 [INF] Loaded ABP modules:
2024-04-25 11:49:37.397 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-25 11:49:37.397 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-25 11:49:37.397 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-25 11:49:37.397 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-25 11:49:37.397 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-25 11:49:37.397 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-25 11:49:37.397 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-25 11:49:37.397 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-25 11:49:37.397 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-25 11:49:37.397 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-25 11:49:37.397 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-25 11:49:37.397 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-25 11:49:37.397 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-25 11:49:37.397 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-25 11:49:37.397 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-25 11:49:37.397 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-25 11:49:37.397 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-25 11:49:37.397 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-25 11:49:37.397 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-25 11:49:37.397 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-25 11:49:37.397 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-25 11:49:37.397 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-25 11:49:37.397 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-25 11:49:37.397 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-25 11:49:37.397 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-25 11:49:37.398 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-25 11:49:37.398 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-25 11:49:37.398 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-25 11:49:37.398 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-25 11:49:37.398 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-25 11:49:37.398 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-25 11:49:37.398 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-25 11:49:37.398 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-25 11:49:37.398 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-25 11:49:37.398 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-25 11:49:37.398 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-25 11:49:37.398 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-25 11:49:37.398 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-25 11:49:37.398 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-25 11:49:37.398 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-25 11:49:37.398 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-25 11:49:37.398 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-25 11:49:37.398 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-25 11:49:37.398 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-25 11:49:37.398 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-25 11:49:37.398 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-25 11:49:37.398 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-25 11:49:37.398 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-25 11:49:37.398 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-25 11:49:37.398 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-25 11:49:37.398 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-25 11:49:37.398 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-25 11:49:37.398 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-25 11:49:37.398 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-25 11:49:37.398 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-25 11:49:37.398 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-25 11:49:37.398 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-25 11:49:37.398 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-25 11:49:37.398 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-25 11:49:37.398 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-25 11:49:37.398 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-25 11:49:37.398 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-25 11:49:37.398 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-25 11:49:37.398 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-25 11:49:37.398 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-25 11:49:37.398 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-25 11:49:37.398 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-25 11:49:37.398 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-25 11:49:37.398 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-25 11:49:37.398 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-25 11:49:37.398 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-25 11:49:37.398 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-25 11:49:37.398 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-25 11:49:37.398 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-25 11:49:37.398 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-25 11:49:37.398 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-25 11:49:37.398 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-25 11:49:37.398 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-25 11:49:37.398 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-25 11:49:37.398 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-25 11:49:37.398 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-25 11:49:37.398 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-25 11:49:37.398 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-25 11:49:37.398 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-25 11:49:37.398 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-25 11:49:37.398 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-25 11:49:37.398 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-25 11:49:37.398 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-25 11:49:37.405 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-25 11:49:37.410 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-25 11:49:38.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.233 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 11:49:38.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 11:49:38.256 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 11:49:38.280 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-25 11:49:38.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-25 11:49:38.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-25 11:49:38.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-25 11:49:38.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-25 11:49:38.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-25 11:49:38.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-25 11:49:38.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-25 11:49:38.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-25 11:49:38.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-25 11:49:38.286 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.286 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.294 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.294 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 11:49:38.296 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 11:49:38.312 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-25 11:49:38.313 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-25 11:49:38.313 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-25 11:49:38.313 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-25 11:49:38.313 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-25 11:49:38.314 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.314 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-25 11:49:38.314 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.314 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-25 11:49:38.314 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.314 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.320 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.321 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 11:49:38.324 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.328 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.336 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.336 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 11:49:38.338 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-25 11:49:38.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:49:38.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-25 11:49:38.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-25 11:49:38.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:49:38.340 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:49:38.340 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-25 11:49:38.340 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-25 11:49:38.340 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-25 11:49:38.340 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-25 11:49:38.340 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-25 11:49:38.340 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-25 11:49:38.340 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-25 11:49:38.341 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.341 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-25 11:49:38.341 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.341 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.346 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.346 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 11:49:38.348 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 11:49:38.363 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.363 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-25 11:49:38.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:49:38.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-25 11:49:38.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-25 11:49:38.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-25 11:49:38.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-25 11:49:38.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-25 11:49:38.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-25 11:49:38.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-25 11:49:38.365 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-25 11:49:38.365 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-25 11:49:38.365 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 11:49:38.374 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.386 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.386 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 11:49:38.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-25 11:49:38.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:49:38.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-25 11:49:38.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-25 11:49:38.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-25 11:49:38.390 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-25 11:49:38.390 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-25 11:49:38.390 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 11:49:38.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.406 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.408 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 11:49:38.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-25 11:49:38.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-25 11:49:38.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-25 11:49:38.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.426 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 11:49:38.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.436 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.438 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.444 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 11:49:38.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-25 11:49:38.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-25 11:49:38.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-25 11:49:38.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-25 11:49:38.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-25 11:49:38.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-25 11:49:38.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:49:38.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.462 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.462 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 11:49:38.464 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.470 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.477 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 11:49:38.480 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-25 11:49:38.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:49:38.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-25 11:49:38.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-25 11:49:38.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:49:38.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:49:38.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-25 11:49:38.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-25 11:49:38.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-25 11:49:38.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-25 11:49:38.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-25 11:49:38.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-25 11:49:38.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-25 11:49:38.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-25 11:49:38.483 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-25 11:49:38.483 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-25 11:49:38.483 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-25 11:49:38.483 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-25 11:49:38.483 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 11:49:38.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.498 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.500 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.500 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.505 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 11:49:38.508 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.508 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-25 11:49:38.509 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.509 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-25 11:49:38.509 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.509 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-25 11:49:38.509 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.509 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.515 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 11:49:38.517 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.520 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.522 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.522 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 11:49:38.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-25 11:49:38.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:49:38.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-25 11:49:38.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-25 11:49:38.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:49:38.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:49:38.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-25 11:49:38.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-25 11:49:38.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-25 11:49:38.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-25 11:49:38.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-25 11:49:38.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-25 11:49:38.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.537 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 11:49:38.540 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.545 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.545 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.550 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 11:49:38.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-25 11:49:38.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-25 11:49:38.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-25 11:49:38.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-25 11:49:38.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 11:49:38.560 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.566 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.566 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.571 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.572 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 11:49:38.574 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-25 11:49:38.574 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:49:38.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-25 11:49:38.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-25 11:49:38.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:49:38.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:49:38.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-25 11:49:38.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-25 11:49:38.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-25 11:49:38.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-25 11:49:38.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-25 11:49:38.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-25 11:49:38.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-25 11:49:38.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.581 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.581 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 11:49:38.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.589 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.589 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.594 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.594 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 11:49:38.596 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-25 11:49:38.596 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-25 11:49:38.596 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 11:49:38.604 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.610 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.610 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.616 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.617 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 11:49:38.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-25 11:49:38.622 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-25 11:49:38.622 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-25 11:49:38.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-25 11:49:38.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-25 11:49:38.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-25 11:49:38.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-25 11:49:38.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-25 11:49:38.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-25 11:49:38.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-25 11:49:38.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-25 11:49:38.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-25 11:49:38.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-25 11:49:38.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-25 11:49:38.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-25 11:49:38.625 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-25 11:49:38.625 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-25 11:49:38.625 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-25 11:49:38.625 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-25 11:49:38.625 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 11:49:38.625 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 11:49:38.625 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-25 11:49:38.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-25 11:49:38.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-25 11:49:38.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:49:38.627 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.634 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.634 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 11:49:38.636 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.640 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.642 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.648 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.648 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 11:49:38.650 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-25 11:49:38.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-25 11:49:38.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-25 11:49:38.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-25 11:49:38.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 11:49:38.659 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.665 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.665 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 11:49:38.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-25 11:49:38.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-25 11:49:38.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-25 11:49:38.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-25 11:49:38.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.679 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.679 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 11:49:38.681 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.686 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.686 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.692 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.692 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 11:49:38.694 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-25 11:49:38.695 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 11:49:38.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.708 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.708 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.714 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.714 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 11:49:38.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:49:38.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:49:38.718 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.718 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 11:49:38.725 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.733 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.733 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.739 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.739 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 11:49:38.742 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:49:38.744 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.744 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:49:38.745 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.745 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.750 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 11:49:38.752 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.756 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.757 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.763 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 11:49:38.765 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.766 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:49:38.767 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.767 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:49:38.767 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.767 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.773 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.773 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 11:49:38.775 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.779 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 11:49:38.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 11:49:38.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.795 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 11:49:38.797 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.809 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 11:49:38.811 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.812 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-25 11:49:38.812 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.812 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-25 11:49:38.812 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.812 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-25 11:49:38.812 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.812 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.818 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 11:49:38.820 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.826 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.836 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 11:49:38.839 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.840 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-25 11:49:38.840 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.841 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.846 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 11:49:38.848 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.855 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.855 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.860 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.860 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 11:49:38.862 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.863 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-25 11:49:38.863 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.863 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-25 11:49:38.863 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.863 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-25 11:49:38.863 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.863 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-25 11:49:38.863 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.863 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-25 11:49:38.863 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 11:49:38.873 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.887 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.887 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 11:49:38.890 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.891 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-25 11:49:38.891 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.891 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-25 11:49:38.891 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.891 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 11:49:38.900 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 11:49:38.906 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.906 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.913 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.913 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 11:49:38.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-25 11:49:38.917 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.917 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-25 11:49:38.917 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.917 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-25 11:49:38.917 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.917 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-25 11:49:38.917 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.917 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 11:49:38.923 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:38.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 11:49:38.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 11:49:39.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:49:39.040 +08:00 [DBG] =========Yi-SQL耗时10.8458毫秒=====
2024-04-25 11:49:39.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:49:39.064 +08:00 [DBG] =========Yi-SQL耗时2.565毫秒=====
2024-04-25 11:49:39.068 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:49:39.069 +08:00 [DBG] =========Yi-SQL耗时1.692毫秒=====
2024-04-25 11:49:39.076 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:49:39.078 +08:00 [DBG] =========Yi-SQL耗时2.8028毫秒=====
2024-04-25 11:49:39.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:49:39.082 +08:00 [DBG] =========Yi-SQL耗时1.0682毫秒=====
2024-04-25 11:49:39.084 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:49:39.086 +08:00 [DBG] =========Yi-SQL耗时1.3523毫秒=====
2024-04-25 11:49:39.092 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:49:39.094 +08:00 [DBG] =========Yi-SQL耗时1.5207毫秒=====
2024-04-25 11:49:39.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-25 11:49:39.097 +08:00 [DBG] =========Yi-SQL耗时0.8349毫秒=====
2024-04-25 11:49:39.107 +08:00 [DBG] 耗时-1701ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-25 11:49:39.169 +08:00 [DBG] 耗时-59ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-25 11:49:39.172 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-25 11:49:39.187 +08:00 [DBG] 耗时-14ms,已加载模块-Volo.Abp.AspNetCore
2024-04-25 11:49:39.193 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-04-25 11:49:39.217 +08:00 [DBG] 耗时-23ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-25 11:49:39.219 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-25 11:49:39.522 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-25 11:49:39.589 +08:00 [DBG] 耗时-369ms,已加载模块-Yi.Abp.Web
2024-04-25 11:49:39.590 +08:00 [INF] ==========【352】个模块初始化执行完毕，总耗时【2177ms】==========
2024-04-25 11:49:39.681 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-25 11:49:39.682 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-25 11:49:39.682 +08:00 [INF] Hosting environment: Development
2024-04-25 11:49:39.682 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-25 11:49:50.803 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:49:50.819 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "User", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.UserService (Yi.Abp.Application).
2024-04-25 11:52:38.695 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:52:38.704 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-04-25 11:52:38.707 +08:00 [INF] Executed action Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application) in 167885.6555ms
2024-04-25 11:52:38.708 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:52:38.740 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 11:52:38.744 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 11:53:00.566 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:53:00.570 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 11:53:00.571 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 11:53:00.648 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:53:00.649 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 11:53:00.730 +08:00 [INF] 2024/4/25 11:53:00：cc,ppfmfAQj-1BWWxq7FMiwcA连接服务端success，当前已连接0个
2024-04-25 11:53:37.142 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:53:37.142 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "User", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.UserService (Yi.Abp.Application).
2024-04-25 11:57:20.352 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:57:20.394 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:57:21.536 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 11:57:21.536 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 11:57:21.538 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 11:57:21.538 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 11:57:25.590 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:58:00.008 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 11:58:04.226 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-04-25 11:58:05.462 +08:00 [INF] Executed action Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application) in 268313.0787ms
2024-04-25 11:58:05.462 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:58:05.497 +08:00 [INF] 2024/4/25 11:58:05：cc,TzDjXoIlAhiQ_szCgTuS2A连接服务端success，当前已连接0个
2024-04-25 11:58:05.498 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-25 11:58:05.502 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-25 11:58:37.174 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:58:37.180 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "User", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.UserService (Yi.Abp.Application).
2024-04-25 11:58:37.181 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-04-25 11:58:37.182 +08:00 [INF] Executed action Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application) in 2.1907ms
2024-04-25 11:58:37.182 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:58:39.970 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:58:39.971 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "User", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.UserService (Yi.Abp.Application).
2024-04-25 11:58:39.971 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-04-25 11:58:39.971 +08:00 [INF] Executed action Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application) in 0.4774ms
2024-04-25 11:58:39.971 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:59:05.643 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:59:05.644 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-04-25 11:59:05.654 +08:00 [INF] Route matched with {action = "PostLogout", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] PostLogout() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 11:59:05.753 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-04-25 11:59:05.785 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application) in 131.5052ms
2024-04-25 11:59:05.786 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-04-25 11:59:05.794 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:59:05.797 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-25 11:59:05.798 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-25 11:59:05.799 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 11:59:05.799 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 11:59:06.104 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:59:06.105 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-25 11:59:06.105 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-25 11:59:06.105 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 11:59:06.291 +08:00 [INF] 用户cc离开了，当前已连接1个
2024-04-25 11:59:06.307 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-25 11:59:06.307 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-25 11:59:06.588 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:59:06.591 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-25 11:59:06.591 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-25 11:59:06.592 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 11:59:06.592 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 11:59:06.820 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:59:06.821 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-25 11:59:06.821 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-25 11:59:06.822 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 11:59:06.854 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-04-25 11:59:06.864 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:59:06.872 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 11:59:06.877 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-25 11:59:06.965 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:59:06.998 +08:00 [DBG] =========Yi-SQL耗时34.5519毫秒=====
2024-04-25 11:59:07.034 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:59:07.038 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-04-25 11:59:07.066 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 188.5735ms
2024-04-25 11:59:07.066 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-04-25 11:59:07.073 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 200.8929ms
2024-04-25 11:59:07.073 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:59:10.566 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:59:10.568 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:59:10.581 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 11:59:10.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"   WHERE (( "username" = N'006238' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 11:59:10.643 +08:00 [DBG] =========Yi-SQL耗时6.4163毫秒=====
2024-04-25 11:59:10.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'14034830-d11c-db5d-ea3e-3a11a05c01b1'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-25 11:59:10.678 +08:00 [DBG] =========Yi-SQL耗时5.902毫秒=====
2024-04-25 11:59:10.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-25 11:59:10.701 +08:00 [DBG] =========Yi-SQL耗时1.5976毫秒=====
2024-04-25 11:59:10.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'     AND  ( "isdeleted" = 0 )  
===============================

2024-04-25 11:59:10.711 +08:00 [DBG] =========Yi-SQL耗时0.8631毫秒=====
2024-04-25 11:59:10.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "roleid" as aid,"menuid" as bid FROM "rolemenu"  WHERE   "roleid" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-04-25 11:59:10.718 +08:00 [DBG] =========Yi-SQL耗时3.3185毫秒=====
2024-04-25 11:59:10.719 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","menuname" AS "menuname","menutype" AS "menutype","permissioncode" AS "permissioncode","parentid" AS "parentid","menuicon" AS "menuicon","router" AS "router","islink" AS "islink","iscache" AS "iscache","isshow" AS "isshow","remark" AS "remark","component" AS "component","query" AS "query" FROM "menu"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN ('7e4f4c22-9927-da88-9330-3a11cdb2f701','6799560e-c779-66bf-d6aa-3a11ce1e28dd','da046a5f-e94d-adec-43c8-3a11d32f463e','35bbc251-5003-8302-93dd-3a11d33132d3')     AND  ( "isdeleted" = 0 )  
===============================

2024-04-25 11:59:10.723 +08:00 [DBG] =========Yi-SQL耗时4.0063毫秒=====
2024-04-25 11:59:10.839 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-04-25 11:59:10.842 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 261.3983ms
2024-04-25 11:59:10.842 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-25 11:59:10.850 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:59:10.855 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 11:59:10.856 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 11:59:10.869 +08:00 [INF] CORS policy execution successful.
2024-04-25 11:59:10.871 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 11:59:10.872 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 11:59:10.875 +08:00 [INF] 用户【14034830-d11c-db5d-ea3e-3a11a05c01b1:006238】登入系统
2024-04-25 11:59:10.876 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 11:59:10.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'14034830-d11c-db5d-ea3e-3a11a05c01b1'    AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  
===============================

2024-04-25 11:59:10.901 +08:00 [INF] 2024/4/25 11:59:10：006238,07P5GYeuYsuJNUoV-AhiuA连接服务端success，当前已连接1个
2024-04-25 11:59:10.933 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "loginlog"  
           ("id","creationtime","loginuser","loginlocation","loginip","browser","os","logmsg","creatorid")
     VALUES
           (N'b005348c-3002-88d8-54de-3a1225951a2c',CAST('2024-04-25 11:59:10.915' AS DATETIME),N'006238',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'006238登录系统',N'14034830-d11c-db5d-ea3e-3a11a05c01b1') ;
===============================

2024-04-25 11:59:10.942 +08:00 [DBG] =========Yi-SQL耗时9.9492毫秒=====
2024-04-25 11:59:10.987 +08:00 [DBG] =========Yi-SQL耗时91.752毫秒=====
2024-04-25 11:59:10.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-25 11:59:10.988 +08:00 [DBG] =========Yi-SQL耗时0.3165毫秒=====
2024-04-25 11:59:10.988 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 ) AND ( 1 = 1 )    AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'     AND  ( "isdeleted" = 0 )  
===============================

2024-04-25 11:59:10.989 +08:00 [DBG] =========Yi-SQL耗时1.2841毫秒=====
2024-04-25 11:59:10.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "roleid" as aid,"menuid" as bid FROM "rolemenu"  WHERE   "roleid" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-04-25 11:59:10.990 +08:00 [DBG] =========Yi-SQL耗时0.2765毫秒=====
2024-04-25 11:59:10.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","menuname" AS "menuname","menutype" AS "menutype","permissioncode" AS "permissioncode","parentid" AS "parentid","menuicon" AS "menuicon","router" AS "router","islink" AS "islink","iscache" AS "iscache","isshow" AS "isshow","remark" AS "remark","component" AS "component","query" AS "query" FROM "menu"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN ('7e4f4c22-9927-da88-9330-3a11cdb2f701','6799560e-c779-66bf-d6aa-3a11ce1e28dd','da046a5f-e94d-adec-43c8-3a11d32f463e','35bbc251-5003-8302-93dd-3a11d33132d3')     AND  ( "isdeleted" = 0 )  
===============================

2024-04-25 11:59:10.992 +08:00 [DBG] =========Yi-SQL耗时1.5424毫秒=====
2024-04-25 11:59:11.035 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-25 11:59:11.043 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 167.1015ms
2024-04-25 11:59:11.043 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-25 11:59:11.052 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-25 11:59:11.055 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-25 11:59:11.059 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'14034830-d11c-db5d-ea3e-3a11a05c01b1'    AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  
===============================

2024-04-25 11:59:11.060 +08:00 [DBG] =========Yi-SQL耗时1.3086毫秒=====
2024-04-25 11:59:11.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-25 11:59:11.062 +08:00 [DBG] =========Yi-SQL耗时0.6997毫秒=====
2024-04-25 11:59:11.063 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 ) AND ( 1 = 1 )    AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'     AND  ( "isdeleted" = 0 )  
===============================

2024-04-25 11:59:11.063 +08:00 [DBG] =========Yi-SQL耗时0.331毫秒=====
2024-04-25 11:59:11.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "roleid" as aid,"menuid" as bid FROM "rolemenu"  WHERE   "roleid" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-04-25 11:59:11.064 +08:00 [DBG] =========Yi-SQL耗时0.4973毫秒=====
2024-04-25 11:59:11.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","menuname" AS "menuname","menutype" AS "menutype","permissioncode" AS "permissioncode","parentid" AS "parentid","menuicon" AS "menuicon","router" AS "router","islink" AS "islink","iscache" AS "iscache","isshow" AS "isshow","remark" AS "remark","component" AS "component","query" AS "query" FROM "menu"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN ('7e4f4c22-9927-da88-9330-3a11cdb2f701','6799560e-c779-66bf-d6aa-3a11ce1e28dd','da046a5f-e94d-adec-43c8-3a11d32f463e','35bbc251-5003-8302-93dd-3a11d33132d3')     AND  ( "isdeleted" = 0 )  
===============================

2024-04-25 11:59:11.065 +08:00 [DBG] =========Yi-SQL耗时0.3811毫秒=====
2024-04-25 11:59:11.091 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 11:59:11.094 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 39.5881ms
2024-04-25 11:59:11.094 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-25 11:59:47.713 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 11:59:47.713 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "User", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.UserService (Yi.Abp.Application).
2024-04-25 11:59:47.713 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-04-25 11:59:47.713 +08:00 [INF] Executed action Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application) in 0.6121ms
2024-04-25 11:59:47.713 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 12:06:38.612 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 12:06:38.616 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "User", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.UserService (Yi.Abp.Application).
2024-04-25 12:06:38.620 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-04-25 12:06:38.620 +08:00 [INF] Executed action Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application) in 4.1139ms
2024-04-25 12:06:38.620 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 12:06:49.558 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 12:06:49.559 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "User", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.UserService (Yi.Abp.Application).
2024-04-25 12:06:49.566 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-04-25 12:06:49.567 +08:00 [INF] Executed action Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application) in 7.8361ms
2024-04-25 12:06:49.567 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 12:07:31.775 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 12:07:31.775 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "User", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.UserService (Yi.Abp.Application).
2024-04-25 12:08:11.175 +08:00 [INF] CORS policy execution successful.
2024-04-25 12:08:13.987 +08:00 [INF] CORS policy execution successful.
2024-04-25 12:08:13.987 +08:00 [INF] Executing ObjectResult, writing value of type 'System.String'.
2024-04-25 12:08:14.458 +08:00 [INF] 用户006238离开了，当前已连接0个
2024-04-25 12:08:14.458 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 12:08:15.450 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-25 12:08:15.450 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-25 12:08:15.489 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-25 12:08:15.489 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-25 12:08:15.499 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 12:08:15.614 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 12:08:15.966 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 12:08:15.976 +08:00 [INF] CORS policy execution successful.
2024-04-25 12:08:16.339 +08:00 [INF] CORS policy execution successful.
2024-04-25 12:08:16.593 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 12:08:16.593 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 12:08:18.128 +08:00 [INF] Executed action Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application) in 46351.5238ms
2024-04-25 12:08:18.128 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 12:08:18.148 +08:00 [INF] 2024/4/25 12:08:18：006238,Nv8mBeTYeoBbwy5VBISJKg连接服务端success，当前已连接0个
2024-04-25 12:08:18.165 +08:00 [INF] 2024/4/25 12:08:18：006238,PtiS-8AwRiSWQX7L9yOqQw连接服务端success，当前已连接0个
2024-04-25 12:10:34.334 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 12:10:34.335 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "User", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.UserService (Yi.Abp.Application).
2024-04-25 12:10:54.395 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-04-25 12:10:54.395 +08:00 [INF] Executed action Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application) in 20059.7442ms
2024-04-25 12:10:54.395 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 12:10:58.140 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 12:10:58.141 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "User", area = ""}. Executing controller action with signature System.String GetCurrentUser() on controller Yi.Abp.Application.Services.UserService (Yi.Abp.Application).
2024-04-25 12:14:29.164 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-04-25 12:14:29.165 +08:00 [INF] Executed action Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application) in 211019.5967ms
2024-04-25 12:14:29.165 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.UserService.GetCurrentUser (Yi.Abp.Application)'
2024-04-25 12:14:29.210 +08:00 [INF] CORS policy execution successful.
2024-04-25 12:14:29.210 +08:00 [INF] CORS policy execution successful.
2024-04-25 12:14:29.210 +08:00 [INF] CORS policy execution successful.
2024-04-25 12:14:29.242 +08:00 [INF] CORS policy execution successful.
2024-04-25 12:14:29.273 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-25 12:14:29.273 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-25 12:14:29.274 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-25 12:14:29.274 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-25 12:14:29.276 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 12:14:29.276 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 12:14:29.276 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 12:14:29.277 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 12:14:29.280 +08:00 [INF] 用户006238离开了，当前已连接0个
2024-04-25 12:14:29.280 +08:00 [INF] 用户006238离开了，当前已连接0个
2024-04-25 12:14:29.282 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-25 12:14:29.282 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-25 12:14:29.283 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 12:14:29.283 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 12:14:29.283 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 12:14:29.283 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 12:14:29.308 +08:00 [INF] CORS policy execution successful.
2024-04-25 12:14:29.310 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 12:14:29.333 +08:00 [INF] CORS policy execution successful.
2024-04-25 12:14:29.335 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 12:14:29.351 +08:00 [INF] 2024/4/25 12:14:29：006238,RbAV7YfSrdI4n0BcalJJdw连接服务端success，当前已连接0个
2024-04-25 12:14:29.372 +08:00 [INF] 2024/4/25 12:14:29：006238,XqbmAWKJpuLoj89RqFsLlg连接服务端success，当前已连接0个
2024-04-25 12:14:53.821 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-25 12:14:53.842 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-25 12:14:59.625 +08:00 [INF] Loaded ABP modules:
2024-04-25 12:14:59.626 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-25 12:14:59.626 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-25 12:14:59.626 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-25 12:14:59.626 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-25 12:14:59.626 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-25 12:14:59.626 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-25 12:14:59.626 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-25 12:14:59.626 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-25 12:14:59.626 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-25 12:14:59.626 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-25 12:14:59.626 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-25 12:14:59.626 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-25 12:14:59.626 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-25 12:14:59.626 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-25 12:14:59.626 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-25 12:14:59.626 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-25 12:14:59.626 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-25 12:14:59.626 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-25 12:14:59.626 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-25 12:14:59.626 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-25 12:14:59.626 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-25 12:14:59.626 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-25 12:14:59.626 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-25 12:14:59.626 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-25 12:14:59.626 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-25 12:14:59.626 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-25 12:14:59.626 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-25 12:14:59.626 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-25 12:14:59.626 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-25 12:14:59.626 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-25 12:14:59.626 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-25 12:14:59.626 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-25 12:14:59.626 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-25 12:14:59.626 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-25 12:14:59.626 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-25 12:14:59.626 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-25 12:14:59.626 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-25 12:14:59.626 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-25 12:14:59.626 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-25 12:14:59.626 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-25 12:14:59.626 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-25 12:14:59.626 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-25 12:14:59.626 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-25 12:14:59.626 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-25 12:14:59.626 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-25 12:14:59.626 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-25 12:14:59.626 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-25 12:14:59.626 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-25 12:14:59.626 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-25 12:14:59.626 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-25 12:14:59.626 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-25 12:14:59.626 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-25 12:14:59.626 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-25 12:14:59.626 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-25 12:14:59.626 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-25 12:14:59.626 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-25 12:14:59.626 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-25 12:14:59.626 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-25 12:14:59.626 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-25 12:14:59.626 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-25 12:14:59.626 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-25 12:14:59.626 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-25 12:14:59.626 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-25 12:14:59.626 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-25 12:14:59.626 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-25 12:14:59.626 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-25 12:14:59.626 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-25 12:14:59.626 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-25 12:14:59.626 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-25 12:14:59.626 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-25 12:14:59.626 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-25 12:14:59.626 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-25 12:14:59.626 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-25 12:14:59.626 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-25 12:14:59.626 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-25 12:14:59.626 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-25 12:14:59.626 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-25 12:14:59.626 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-25 12:14:59.626 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-25 12:14:59.626 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-25 12:14:59.626 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-25 12:14:59.626 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-25 12:14:59.626 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-25 12:14:59.626 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-25 12:14:59.626 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-25 12:14:59.626 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-25 12:14:59.626 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-25 12:14:59.626 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-25 12:14:59.633 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-25 12:14:59.638 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-25 12:15:00.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.359 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.392 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 12:15:00.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.402 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 12:15:00.414 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.424 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.432 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 12:15:00.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.436 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-25 12:15:00.437 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-25 12:15:00.438 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-25 12:15:00.438 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-25 12:15:00.438 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-25 12:15:00.438 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-25 12:15:00.438 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-25 12:15:00.438 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-25 12:15:00.438 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-25 12:15:00.438 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-25 12:15:00.438 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 12:15:00.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.453 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.464 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 12:15:00.468 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.468 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-25 12:15:00.469 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-25 12:15:00.469 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-25 12:15:00.470 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-25 12:15:00.470 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-25 12:15:00.470 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-25 12:15:00.470 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.471 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-25 12:15:00.471 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.471 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.478 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 12:15:00.480 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.485 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.485 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 12:15:00.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-25 12:15:00.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-25 12:15:00.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-25 12:15:00.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-25 12:15:00.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 12:15:00.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 12:15:00.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-25 12:15:00.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-25 12:15:00.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-25 12:15:00.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-25 12:15:00.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-25 12:15:00.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-25 12:15:00.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-25 12:15:00.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-25 12:15:00.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.500 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.500 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 12:15:00.502 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.508 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.508 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 12:15:00.515 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-25 12:15:00.516 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-25 12:15:00.516 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-25 12:15:00.516 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-25 12:15:00.516 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-25 12:15:00.516 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-25 12:15:00.516 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-25 12:15:00.516 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-25 12:15:00.517 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.517 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-25 12:15:00.517 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.517 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-25 12:15:00.517 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.517 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-25 12:15:00.517 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.517 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.522 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.523 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 12:15:00.524 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.536 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.536 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 12:15:00.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-25 12:15:00.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-25 12:15:00.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-25 12:15:00.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-25 12:15:00.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-25 12:15:00.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-25 12:15:00.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-25 12:15:00.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.544 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 12:15:00.546 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.553 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.553 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 12:15:00.560 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-25 12:15:00.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-25 12:15:00.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-25 12:15:00.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.567 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.567 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 12:15:00.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.580 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 12:15:00.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-25 12:15:00.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-25 12:15:00.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-25 12:15:00.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-25 12:15:00.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-25 12:15:00.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-25 12:15:00.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 12:15:00.594 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.594 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 12:15:00.603 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.609 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.617 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.617 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 12:15:00.619 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-25 12:15:00.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-25 12:15:00.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-25 12:15:00.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-25 12:15:00.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 12:15:00.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 12:15:00.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-25 12:15:00.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-25 12:15:00.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-25 12:15:00.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-25 12:15:00.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-25 12:15:00.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-25 12:15:00.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-25 12:15:00.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-25 12:15:00.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-25 12:15:00.622 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-25 12:15:00.622 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-25 12:15:00.622 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-25 12:15:00.622 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.630 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.630 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 12:15:00.635 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.643 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.644 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.645 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.650 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.650 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 12:15:00.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-25 12:15:00.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-25 12:15:00.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-25 12:15:00.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.658 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.658 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 12:15:00.660 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.664 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.665 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.666 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 12:15:00.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-25 12:15:00.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-25 12:15:00.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-25 12:15:00.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-25 12:15:00.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 12:15:00.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 12:15:00.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-25 12:15:00.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-25 12:15:00.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-25 12:15:00.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-25 12:15:00.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-25 12:15:00.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-25 12:15:00.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.684 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 12:15:00.689 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.694 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.696 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 12:15:00.704 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.704 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-25 12:15:00.704 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.704 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-25 12:15:00.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-25 12:15:00.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-25 12:15:00.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.710 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 12:15:00.713 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.718 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.720 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.721 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 12:15:00.731 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-25 12:15:00.732 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.732 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-25 12:15:00.732 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.732 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-25 12:15:00.732 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.732 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-25 12:15:00.732 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.732 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 12:15:00.732 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.732 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 12:15:00.732 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.732 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-25 12:15:00.733 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.733 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-25 12:15:00.733 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.733 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-25 12:15:00.733 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.733 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-25 12:15:00.733 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.733 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-25 12:15:00.733 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.733 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-25 12:15:00.733 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.733 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-25 12:15:00.733 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.733 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.740 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 12:15:00.742 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.745 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.747 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.748 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.755 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.755 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 12:15:00.758 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-25 12:15:00.758 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-25 12:15:00.758 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.764 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.764 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 12:15:00.766 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.772 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.772 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.777 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 12:15:00.779 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-25 12:15:00.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-25 12:15:00.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-25 12:15:00.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-25 12:15:00.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-25 12:15:00.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-25 12:15:00.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-25 12:15:00.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-25 12:15:00.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-25 12:15:00.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-25 12:15:00.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-25 12:15:00.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-25 12:15:00.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-25 12:15:00.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-25 12:15:00.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-25 12:15:00.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-25 12:15:00.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-25 12:15:00.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-25 12:15:00.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-25 12:15:00.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 12:15:00.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 12:15:00.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-25 12:15:00.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-25 12:15:00.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-25 12:15:00.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 12:15:00.783 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.783 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.789 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 12:15:00.790 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.793 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.795 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.795 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.801 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 12:15:00.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-25 12:15:00.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-25 12:15:00.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.805 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-25 12:15:00.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.805 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-25 12:15:00.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.805 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 12:15:00.812 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.816 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.817 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.817 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 12:15:00.824 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-25 12:15:00.824 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-25 12:15:00.824 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-25 12:15:00.824 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-25 12:15:00.825 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 12:15:00.832 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.842 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 12:15:00.844 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-25 12:15:00.845 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.845 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 12:15:00.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.856 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.863 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 12:15:00.866 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.866 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 12:15:00.867 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.867 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 12:15:00.868 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.868 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.875 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 12:15:00.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.883 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.884 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.885 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.890 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.890 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 12:15:00.894 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 12:15:00.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 12:15:00.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.908 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 12:15:00.911 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.914 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.915 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.921 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.921 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 12:15:00.923 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 12:15:00.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 12:15:00.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.930 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.930 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 12:15:00.932 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.936 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.941 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 12:15:00.943 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 12:15:00.944 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.944 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.949 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.949 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 12:15:00.950 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.962 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.962 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 12:15:00.964 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-25 12:15:00.964 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-25 12:15:00.964 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-25 12:15:00.964 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 12:15:00.972 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.976 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.977 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 12:15:00.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-25 12:15:00.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.985 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:00.990 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 12:15:00.992 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.997 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:00.998 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:00.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:01.003 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 12:15:01.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-25 12:15:01.006 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-25 12:15:01.006 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-25 12:15:01.006 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-25 12:15:01.006 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-25 12:15:01.007 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:01.012 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.012 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 12:15:01.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:01.019 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.019 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:01.024 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 12:15:01.026 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-25 12:15:01.026 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-25 12:15:01.026 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:01.031 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.031 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 12:15:01.033 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 12:15:01.038 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.038 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:01.043 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.043 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 12:15:01.045 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-25 12:15:01.045 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-25 12:15:01.045 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-25 12:15:01.045 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-25 12:15:01.045 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 12:15:01.050 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 12:15:01.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 12:15:01.153 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 12:15:01.162 +08:00 [DBG] =========Yi-SQL耗时9.7906毫秒=====
2024-04-25 12:15:01.177 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 12:15:01.178 +08:00 [DBG] =========Yi-SQL耗时1.5189毫秒=====
2024-04-25 12:15:01.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 12:15:01.182 +08:00 [DBG] =========Yi-SQL耗时0.755毫秒=====
2024-04-25 12:15:01.186 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 12:15:01.188 +08:00 [DBG] =========Yi-SQL耗时2.3645毫秒=====
2024-04-25 12:15:01.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 12:15:01.192 +08:00 [DBG] =========Yi-SQL耗时1.3797毫秒=====
2024-04-25 12:15:01.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 12:15:01.196 +08:00 [DBG] =========Yi-SQL耗时0.858毫秒=====
2024-04-25 12:15:01.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 12:15:01.202 +08:00 [DBG] =========Yi-SQL耗时1.3556毫秒=====
2024-04-25 12:15:01.204 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-25 12:15:01.206 +08:00 [DBG] =========Yi-SQL耗时1.5554毫秒=====
2024-04-25 12:15:01.215 +08:00 [DBG] 耗时-1580ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-25 12:15:01.276 +08:00 [DBG] 耗时-58ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-25 12:15:01.279 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-25 12:15:01.295 +08:00 [DBG] 耗时-15ms,已加载模块-Volo.Abp.AspNetCore
2024-04-25 12:15:01.300 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-04-25 12:15:01.325 +08:00 [DBG] 耗时-24ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-25 12:15:01.328 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-25 12:15:01.623 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-25 12:15:01.730 +08:00 [DBG] 耗时-402ms,已加载模块-Yi.Abp.Web
2024-04-25 12:15:01.731 +08:00 [INF] ==========【352】个模块初始化执行完毕，总耗时【2090ms】==========
2024-04-25 12:15:01.833 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-25 12:15:01.833 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-25 12:15:01.833 +08:00 [INF] Hosting environment: Development
2024-04-25 12:15:01.833 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-25 12:15:11.474 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetUserDbAsync (Yi.Abp.Application)'
2024-04-25 12:15:11.493 +08:00 [INF] Route matched with {action = "GetUserDb", controller = "Test", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] GetUserDbAsync() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-25 12:15:11.514 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-25 12:15:11.515 +08:00 [DBG] =========Yi-SQL耗时1.0921毫秒=====
2024-04-25 12:15:11.539 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Entities.UserEntity, Yi.Framework.Rbac.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-25 12:15:11.604 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetUserDbAsync (Yi.Abp.Application) in 108.6075ms
2024-04-25 12:15:11.605 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetUserDbAsync (Yi.Abp.Application)'
2024-04-25 12:16:25.656 +08:00 [INF] CORS policy execution successful.
2024-04-25 12:16:25.656 +08:00 [INF] CORS policy execution successful.
2024-04-25 12:16:25.712 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-25 12:16:25.713 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-25 12:16:25.714 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 12:16:25.916 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 12:16:25.939 +08:00 [INF] CORS policy execution successful.
2024-04-25 12:16:25.954 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 12:16:25.954 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-25 12:16:25.954 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-25 12:16:25.988 +08:00 [INF] CORS policy execution successful.
2024-04-25 12:16:26.018 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-25 12:16:26.098 +08:00 [INF] 2024/4/25 12:16:26：006238,1uwzFjuf2ZuegdheDHjoZw连接服务端success，当前已连接0个
2024-04-25 12:16:26.130 +08:00 [INF] 2024/4/25 12:16:26：006238,-xijSN840pDJlD3IF8_Ptg连接服务端success，当前已连接0个
2024-04-25 14:38:28.403 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-25 14:38:28.422 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-25 14:38:36.650 +08:00 [INF] Loaded ABP modules:
2024-04-25 14:38:36.651 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-25 14:38:36.651 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-25 14:38:36.651 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-25 14:38:36.651 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-25 14:38:36.651 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-25 14:38:36.651 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-25 14:38:36.651 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-25 14:38:36.651 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-25 14:38:36.651 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-25 14:38:36.651 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-25 14:38:36.651 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-25 14:38:36.651 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-25 14:38:36.651 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-25 14:38:36.651 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-25 14:38:36.651 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-25 14:38:36.651 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-25 14:38:36.651 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-25 14:38:36.651 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-25 14:38:36.651 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-25 14:38:36.651 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-25 14:38:36.651 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-25 14:38:36.651 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-25 14:38:36.651 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-25 14:38:36.651 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-25 14:38:36.651 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-25 14:38:36.651 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-25 14:38:36.651 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-25 14:38:36.651 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-25 14:38:36.651 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-25 14:38:36.651 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-25 14:38:36.651 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-25 14:38:36.651 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-25 14:38:36.651 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-25 14:38:36.651 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-25 14:38:36.651 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-25 14:38:36.651 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-25 14:38:36.651 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-25 14:38:36.651 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-25 14:38:36.651 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-25 14:38:36.651 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-25 14:38:36.651 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-25 14:38:36.651 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-25 14:38:36.651 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-25 14:38:36.651 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-25 14:38:36.651 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-25 14:38:36.651 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-25 14:38:36.651 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-25 14:38:36.651 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-25 14:38:36.651 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-25 14:38:36.651 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-25 14:38:36.651 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-25 14:38:36.651 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-25 14:38:36.651 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-25 14:38:36.651 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-25 14:38:36.651 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-25 14:38:36.651 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-25 14:38:36.651 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-25 14:38:36.651 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-25 14:38:36.651 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-25 14:38:36.651 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-25 14:38:36.651 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-25 14:38:36.651 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-25 14:38:36.651 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-25 14:38:36.651 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-25 14:38:36.651 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-25 14:38:36.651 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-25 14:38:36.651 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-25 14:38:36.651 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-25 14:38:36.651 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-25 14:38:36.651 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-25 14:38:36.651 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-25 14:38:36.651 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-25 14:38:36.651 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-25 14:38:36.651 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-25 14:38:36.651 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-25 14:38:36.651 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-25 14:38:36.651 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-25 14:38:36.651 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-25 14:38:36.651 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-25 14:38:36.651 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-25 14:38:36.651 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-25 14:38:36.651 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-25 14:38:36.651 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-25 14:38:36.651 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-25 14:38:36.651 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-25 14:38:36.651 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-25 14:38:36.651 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-25 14:38:36.651 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-25 14:38:36.660 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-25 14:38:36.666 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-25 14:38:37.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 14:38:37.458 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.463 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.473 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.473 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-25 14:38:37.476 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.496 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.496 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 14:38:37.498 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.501 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-25 14:38:37.502 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-25 14:38:37.502 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.503 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-25 14:38:37.503 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.503 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-25 14:38:37.503 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.503 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-25 14:38:37.503 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.503 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-25 14:38:37.503 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.503 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-25 14:38:37.503 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.503 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-25 14:38:37.503 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.503 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-25 14:38:37.504 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.504 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-25 14:38:37.505 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.505 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.511 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.512 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-25 14:38:37.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.519 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.521 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.522 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 14:38:37.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-25 14:38:37.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-25 14:38:37.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-25 14:38:37.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-25 14:38:37.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-25 14:38:37.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-25 14:38:37.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-25 14:38:37.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-25 14:38:37.540 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.545 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.545 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.551 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.551 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 14:38:37.553 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-25 14:38:37.554 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-25 14:38:37.554 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-25 14:38:37.554 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-25 14:38:37.554 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 14:38:37.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 14:38:37.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-25 14:38:37.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-25 14:38:37.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-25 14:38:37.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-25 14:38:37.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-25 14:38:37.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-25 14:38:37.556 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.556 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-25 14:38:37.556 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.556 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-25 14:38:37.556 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.556 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-25 14:38:37.564 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.570 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 14:38:37.577 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-25 14:38:37.578 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-25 14:38:37.578 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-25 14:38:37.578 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-25 14:38:37.578 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-25 14:38:37.579 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.579 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-25 14:38:37.579 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.579 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-25 14:38:37.579 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.579 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-25 14:38:37.579 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.579 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-25 14:38:37.579 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.579 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-25 14:38:37.579 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.579 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-25 14:38:37.579 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.585 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-25 14:38:37.587 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.593 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.593 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.598 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 14:38:37.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-25 14:38:37.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-25 14:38:37.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-25 14:38:37.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-25 14:38:37.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-25 14:38:37.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-25 14:38:37.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-25 14:38:37.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.607 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.607 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-25 14:38:37.609 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.613 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.614 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.614 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.619 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 14:38:37.622 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-25 14:38:37.622 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-25 14:38:37.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-25 14:38:37.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.628 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.628 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-25 14:38:37.630 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.635 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.637 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.643 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.643 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 14:38:37.645 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-25 14:38:37.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-25 14:38:37.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-25 14:38:37.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-25 14:38:37.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.647 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-25 14:38:37.647 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.647 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-25 14:38:37.647 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.648 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 14:38:37.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-25 14:38:37.665 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.679 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.679 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 14:38:37.681 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.681 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-25 14:38:37.682 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-25 14:38:37.682 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-25 14:38:37.682 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-25 14:38:37.682 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 14:38:37.683 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.683 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 14:38:37.683 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.683 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-25 14:38:37.683 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.683 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-25 14:38:37.683 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.683 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-25 14:38:37.683 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-25 14:38:37.684 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-25 14:38:37.684 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-25 14:38:37.684 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-25 14:38:37.684 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-25 14:38:37.685 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-25 14:38:37.685 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-25 14:38:37.685 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-25 14:38:37.685 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-25 14:38:37.685 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.693 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.693 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-25 14:38:37.696 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.704 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.711 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 14:38:37.713 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.714 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-25 14:38:37.714 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.714 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-25 14:38:37.714 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.714 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-25 14:38:37.714 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.714 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-25 14:38:37.725 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.730 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.730 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.737 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.737 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 14:38:37.739 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.739 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-25 14:38:37.739 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.739 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-25 14:38:37.739 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-25 14:38:37.740 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-25 14:38:37.740 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 14:38:37.740 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 14:38:37.740 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-25 14:38:37.740 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-25 14:38:37.741 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.741 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-25 14:38:37.741 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.741 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-25 14:38:37.741 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.741 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-25 14:38:37.741 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.741 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-25 14:38:37.741 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.741 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.749 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.749 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-25 14:38:37.752 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.755 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.757 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.757 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 14:38:37.765 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.765 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-25 14:38:37.765 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.765 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-25 14:38:37.765 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.765 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-25 14:38:37.765 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.765 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-25 14:38:37.765 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.766 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.771 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.771 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-25 14:38:37.773 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.779 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.779 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.784 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 14:38:37.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-25 14:38:37.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-25 14:38:37.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-25 14:38:37.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-25 14:38:37.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 14:38:37.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 14:38:37.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-25 14:38:37.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-25 14:38:37.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-25 14:38:37.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-25 14:38:37.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-25 14:38:37.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-25 14:38:37.789 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.789 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-25 14:38:37.789 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.789 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.795 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-25 14:38:37.797 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.801 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.806 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.807 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 14:38:37.809 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-25 14:38:37.809 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-25 14:38:37.809 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.815 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-25 14:38:37.817 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.823 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 14:38:37.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-25 14:38:37.832 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-25 14:38:37.832 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-25 14:38:37.833 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.833 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-25 14:38:37.833 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.833 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-25 14:38:37.833 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.833 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-25 14:38:37.833 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.833 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-25 14:38:37.833 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.833 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-25 14:38:37.833 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.833 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-25 14:38:37.834 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-25 14:38:37.834 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-25 14:38:37.834 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-25 14:38:37.834 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-25 14:38:37.834 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-25 14:38:37.834 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-25 14:38:37.834 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-25 14:38:37.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-25 14:38:37.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-25 14:38:37.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-25 14:38:37.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-25 14:38:37.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-25 14:38:37.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-25 14:38:37.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-25 14:38:37.836 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-25 14:38:37.836 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 14:38:37.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.844 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-25 14:38:37.846 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.851 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.851 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.856 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.856 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 14:38:37.859 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.859 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-25 14:38:37.859 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.859 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-25 14:38:37.859 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.859 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-25 14:38:37.859 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.859 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-25 14:38:37.860 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.860 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-25 14:38:37.867 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 14:38:37.879 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-25 14:38:37.879 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-25 14:38:37.879 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-25 14:38:37.879 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-25 14:38:37.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.884 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.885 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-25 14:38:37.886 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.890 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.892 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 14:38:37.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-25 14:38:37.900 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.900 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.905 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-25 14:38:37.908 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.911 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.913 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.913 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.918 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.918 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 14:38:37.921 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.922 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 14:38:37.923 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 14:38:37.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.931 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.931 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-25 14:38:37.933 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.940 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.941 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 14:38:37.949 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 14:38:37.951 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 14:38:37.953 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.953 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.960 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-25 14:38:37.963 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.967 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.975 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.976 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 14:38:37.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.978 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 14:38:37.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 14:38:37.981 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.981 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:37.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-25 14:38:37.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:37.996 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:37.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:38.001 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 14:38:38.003 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.003 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-25 14:38:38.004 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:38.009 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.009 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-25 14:38:38.011 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:38.017 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:38.023 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 14:38:38.025 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.025 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-25 14:38:38.026 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-25 14:38:38.026 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-25 14:38:38.026 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:38.033 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.033 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-25 14:38:38.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:38.041 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.041 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:38.047 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.047 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 14:38:38.049 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.049 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-25 14:38:38.050 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:38.056 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.056 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-25 14:38:38.058 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.063 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:38.064 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:38.070 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.070 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 14:38:38.072 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-25 14:38:38.072 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-25 14:38:38.072 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-25 14:38:38.072 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-25 14:38:38.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-25 14:38:38.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:38.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-25 14:38:38.080 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:38.085 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:38.090 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 14:38:38.092 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.092 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-25 14:38:38.092 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.093 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-25 14:38:38.093 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.093 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:38.098 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-25 14:38:38.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.103 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-25 14:38:38.104 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.105 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:38.110 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 14:38:38.112 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-25 14:38:38.113 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-25 14:38:38.113 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-25 14:38:38.113 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-25 14:38:38.113 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-25 14:38:38.119 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-25 14:38:38.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-25 14:38:38.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 14:38:38.225 +08:00 [DBG] =========Yi-SQL耗时9.4451毫秒=====
2024-04-25 14:38:38.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 14:38:38.241 +08:00 [DBG] =========Yi-SQL耗时1.8353毫秒=====
2024-04-25 14:38:38.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 14:38:38.245 +08:00 [DBG] =========Yi-SQL耗时1.1231毫秒=====
2024-04-25 14:38:38.250 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 14:38:38.253 +08:00 [DBG] =========Yi-SQL耗时2.3189毫秒=====
2024-04-25 14:38:38.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 14:38:38.256 +08:00 [DBG] =========Yi-SQL耗时1.0753毫秒=====
2024-04-25 14:38:38.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 14:38:38.260 +08:00 [DBG] =========Yi-SQL耗时1.5715毫秒=====
2024-04-25 14:38:38.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-25 14:38:38.268 +08:00 [DBG] =========Yi-SQL耗时2.3843毫秒=====
2024-04-25 14:38:38.271 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-25 14:38:38.272 +08:00 [DBG] =========Yi-SQL耗时1.2199毫秒=====
2024-04-25 14:38:38.282 +08:00 [DBG] 耗时-1621ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-25 14:38:38.346 +08:00 [DBG] 耗时-61ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-25 14:38:38.350 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-25 14:38:38.365 +08:00 [DBG] 耗时-15ms,已加载模块-Volo.Abp.AspNetCore
2024-04-25 14:38:38.370 +08:00 [DBG] 耗时-4ms,已加载模块-Volo.Abp.Quartz
2024-04-25 14:38:38.393 +08:00 [DBG] 耗时-22ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-25 14:38:38.396 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-25 14:38:38.667 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-25 14:38:38.751 +08:00 [DBG] 耗时-355ms,已加载模块-Yi.Abp.Web
2024-04-25 14:38:38.752 +08:00 [INF] ==========【352】个模块初始化执行完毕，总耗时【2084ms】==========
2024-04-25 14:38:38.874 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-25 14:38:38.874 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-25 14:38:38.874 +08:00 [INF] Hosting environment: Development
2024-04-25 14:38:38.874 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
