2024-03-30 13:25:05.786 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-03-30 13:25:05.807 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-03-30 13:25:11.050 +08:00 [INF] Loaded ABP modules:
2024-03-30 13:25:11.051 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-03-30 13:25:11.051 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-03-30 13:25:11.051 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-03-30 13:25:11.051 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-03-30 13:25:11.051 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-03-30 13:25:11.051 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-03-30 13:25:11.051 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-03-30 13:25:11.051 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-03-30 13:25:11.051 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-03-30 13:25:11.051 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-03-30 13:25:11.052 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-03-30 13:25:11.052 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-03-30 13:25:11.052 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-03-30 13:25:11.052 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-03-30 13:25:11.052 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-03-30 13:25:11.052 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-03-30 13:25:11.052 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-03-30 13:25:11.052 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-03-30 13:25:11.052 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-03-30 13:25:11.052 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-03-30 13:25:11.052 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-03-30 13:25:11.052 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-03-30 13:25:11.052 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-03-30 13:25:11.052 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-03-30 13:25:11.052 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-03-30 13:25:11.052 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-03-30 13:25:11.052 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-03-30 13:25:11.052 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-03-30 13:25:11.052 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-03-30 13:25:11.052 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-03-30 13:25:11.052 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-03-30 13:25:11.052 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-03-30 13:25:11.052 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-03-30 13:25:11.052 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-03-30 13:25:11.052 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-03-30 13:25:11.052 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-03-30 13:25:11.052 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-03-30 13:25:11.052 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-03-30 13:25:11.052 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-03-30 13:25:11.052 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-03-30 13:25:11.052 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-03-30 13:25:11.052 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-03-30 13:25:11.052 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-03-30 13:25:11.052 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-03-30 13:25:11.052 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-03-30 13:25:11.052 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-03-30 13:25:11.052 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-03-30 13:25:11.052 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-03-30 13:25:11.052 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-03-30 13:25:11.052 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-03-30 13:25:11.052 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-03-30 13:25:11.052 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-03-30 13:25:11.052 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-03-30 13:25:11.052 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-03-30 13:25:11.052 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-03-30 13:25:11.052 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-03-30 13:25:11.052 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-03-30 13:25:11.052 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-03-30 13:25:11.052 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-03-30 13:25:11.052 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-03-30 13:25:11.052 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-03-30 13:25:11.052 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-03-30 13:25:11.052 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-03-30 13:25:11.052 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-03-30 13:25:11.052 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-03-30 13:25:11.052 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-03-30 13:25:11.052 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-03-30 13:25:11.052 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-03-30 13:25:11.052 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-03-30 13:25:11.052 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-03-30 13:25:11.052 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-03-30 13:25:11.052 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-03-30 13:25:11.052 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-03-30 13:25:11.052 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-03-30 13:25:11.052 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-03-30 13:25:11.052 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-03-30 13:25:11.052 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-03-30 13:25:11.052 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-03-30 13:25:11.052 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-03-30 13:25:11.052 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-03-30 13:25:11.052 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-03-30 13:25:11.052 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-03-30 13:25:11.052 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-03-30 13:25:11.052 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-03-30 13:25:11.052 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-03-30 13:25:11.052 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-03-30 13:25:11.052 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-03-30 13:25:11.052 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-03-30 13:25:11.052 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-03-30 13:25:11.052 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-03-30 13:25:11.052 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-03-30 13:25:11.052 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-03-30 13:25:11.052 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-03-30 13:25:11.064 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-03-30 13:25:11.073 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：DataSource=yi-abp-dev.db
数据库类型：Sqlite
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-03-30 13:25:11.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.382 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.383 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.383 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.385 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.387 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.387 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.392 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.392 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.392 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_LoginUser'
===============================

2024-03-30 13:25:11.392 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.400 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.400 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.401 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.401 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.403 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.403 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.406 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.406 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.406 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_UserName'
===============================

2024-03-30 13:25:11.406 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.407 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.407 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.408 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.410 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.413 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.413 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.413 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_UserId'
===============================

2024-03-30 13:25:11.413 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.414 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.414 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_CreatorId'
===============================

2024-03-30 13:25:11.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_CreatorId_DiscussId'
===============================

2024-03-30 13:25:11.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_Name'
===============================

2024-03-30 13:25:11.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_ParentId'
===============================

2024-03-30 13:25:11.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_DiscussId'
===============================

2024-03-30 13:25:11.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_DiscussId'
===============================

2024-03-30 13:25:11.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_ParentId'
===============================

2024-03-30 13:25:11.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_Title'
===============================

2024-03-30 13:25:11.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_PlateId'
===============================

2024-03-30 13:25:11.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_CreationTime'
===============================

2024-03-30 13:25:11.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.424 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.426 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.429 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.429 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.430 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.431 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_AuditLogId'
===============================

2024-03-30 13:25:11.431 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.431 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_TenantId_ExecutionTime'
===============================

2024-03-30 13:25:11.431 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.435 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_ExecutionTime'
===============================

2024-03-30 13:25:11.435 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_ExecutionTime_UserId'
===============================

2024-03-30 13:25:11.435 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.436 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.436 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.436 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_AuditLogId'
===============================

2024-03-30 13:25:11.436 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.436 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_TenantId_EntityId'
===============================

2024-03-30 13:25:11.436 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.437 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.437 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.437 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_EntityChangeId'
===============================

2024-03-30 13:25:11.437 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.440 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:25:11.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:25:11.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Dept`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:25:11.538 +08:00 [DBG] =========Yi-SQL耗时4.0023毫秒=====
2024-03-30 13:25:11.551 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Dictionary`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:25:11.551 +08:00 [DBG] =========Yi-SQL耗时0.4394毫秒=====
2024-03-30 13:25:11.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `DictionaryType`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:25:11.554 +08:00 [DBG] =========Yi-SQL耗时0.1209毫秒=====
2024-03-30 13:25:11.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Menu`   WHERE ( `MenuName` = N'系统管理' )  AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:25:11.560 +08:00 [DBG] =========Yi-SQL耗时1.0147毫秒=====
2024-03-30 13:25:11.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Post`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:25:11.562 +08:00 [DBG] =========Yi-SQL耗时0.0972毫秒=====
2024-03-30 13:25:11.565 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Role`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:25:11.566 +08:00 [DBG] =========Yi-SQL耗时0.2065毫秒=====
2024-03-30 13:25:11.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `User`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:25:11.570 +08:00 [DBG] =========Yi-SQL耗时0.1403毫秒=====
2024-03-30 13:25:11.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Banner`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:25:11.573 +08:00 [DBG] =========Yi-SQL耗时0.375毫秒=====
2024-03-30 13:25:11.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `DictionaryType`   WHERE ( `DictType` = N'bbs_type_lable' )  AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:25:11.575 +08:00 [DBG] =========Yi-SQL耗时0.0997毫秒=====
2024-03-30 13:25:11.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Menu`   WHERE ( `MenuName` = N'BBS' )  AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:25:11.577 +08:00 [DBG] =========Yi-SQL耗时0.4722毫秒=====
2024-03-30 13:25:11.579 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `BbsUserExtraInfo`   WHERE ( 1 = 1 )    LIMIT 0,1
===============================

2024-03-30 13:25:11.579 +08:00 [DBG] =========Yi-SQL耗时0.1236毫秒=====
2024-03-30 13:25:11.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Config`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:25:11.582 +08:00 [DBG] =========Yi-SQL耗时0.1575毫秒=====
2024-03-30 13:25:11.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Level`   WHERE ( 1 = 1 )    LIMIT 0,1
===============================

2024-03-30 13:25:11.584 +08:00 [DBG] =========Yi-SQL耗时0.2694毫秒=====
2024-03-30 13:25:11.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `YiTemplate`   WHERE ( 1 = 1 )    LIMIT 0,1
===============================

2024-03-30 13:25:11.587 +08:00 [DBG] =========Yi-SQL耗时0.2234毫秒=====
2024-03-30 13:25:11.609 +08:00 [DBG] 耗时-543ms,已加载模块-Yi.Framework.SqlSugarCore
2024-03-30 13:25:11.674 +08:00 [DBG] 耗时-61ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-03-30 13:25:11.677 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-03-30 13:25:11.692 +08:00 [DBG] 耗时-14ms,已加载模块-Volo.Abp.AspNetCore
2024-03-30 13:25:11.699 +08:00 [DBG] 耗时-6ms,已加载模块-Volo.Abp.Quartz
2024-03-30 13:25:11.726 +08:00 [DBG] 耗时-26ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-03-30 13:25:11.729 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-03-30 13:25:12.464 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-03-30 13:25:12.544 +08:00 [DBG] 耗时-815ms,已加载模块-Yi.Abp.Web
2024-03-30 13:25:12.644 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-03-30 13:25:12.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`CurrentLevel`,`MinExperience`,`Name`,`Nick`,`Logo` FROM `Level`  
===============================

2024-03-30 13:25:12.654 +08:00 [DBG] =========Yi-SQL耗时0.395毫秒=====
2024-03-30 13:25:12.724 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-03-30 13:25:12.724 +08:00 [DBG] 耗时-178ms,已加载模块-Yi.Framework.Bbs.Domain
2024-03-30 13:25:12.724 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【1649ms】==========
2024-03-30 13:25:12.846 +08:00 [INF] Now listening on: http://[::]:19001
2024-03-30 13:25:12.846 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-03-30 13:25:12.846 +08:00 [INF] Hosting environment: Development
2024-03-30 13:25:12.846 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-03-30 13:25:29.353 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:25:29.375 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 13:25:29.377 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 13:25:29.406 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 13:25:29.411 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 13:25:29.445 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:25:29.446 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 13:25:29.446 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 13:25:29.447 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 13:26:49.927 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 13:26:50.167 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:26:50.168 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 13:26:50.169 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 13:26:50.171 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 13:26:50.177 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 13:26:50.270 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:26:50.270 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 13:26:50.270 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 13:26:50.271 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 13:26:50.814 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:26:50.814 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 13:26:50.836 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 13:26:50.836 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-03-30 13:26:50.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`EntityVersion`,`TenantConnectionString`,`DbType`,`IsDeleted`,`DeleterId`,`DeletionTime`,`LastModificationTime`,`LastModifierId`,`CreationTime`,`CreatorId`,`ConcurrencyStamp` FROM `YiTenant`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:26:50.906 +08:00 [DBG] =========Yi-SQL耗时0.3724毫秒=====
2024-03-30 13:26:50.916 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:26:50.974 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 134.0559ms
2024-03-30 13:26:50.974 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 13:26:50.995 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-03-30 13:26:51.002 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 164.7017ms
2024-03-30 13:26:51.002 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:27:01.325 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:27:01.326 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:27:01.332 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 13:27:01.373 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`   WHERE (( `UserName` = N'cc' ) AND ( `State` = 1 ))  AND ( `IsDeleted` = 0 )  ORDER BY DATETIME('now')    LIMIT 0,1
===============================

2024-03-30 13:27:01.373 +08:00 [DBG] =========Yi-SQL耗时0.8363毫秒=====
2024-03-30 13:27:01.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'd1c28168-8d08-38a8-2758-3a119a14c17a'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:27:01.391 +08:00 [DBG] =========Yi-SQL耗时0.4148毫秒=====
2024-03-30 13:27:01.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = 'd1c28168-8d08-38a8-2758-3a119a14c17a'    
===============================

2024-03-30 13:27:01.409 +08:00 [DBG] =========Yi-SQL耗时0.1945毫秒=====
2024-03-30 13:27:01.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 13:27:01.417 +08:00 [DBG] =========Yi-SQL耗时0.1874毫秒=====
2024-03-30 13:27:01.464 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-03-30 13:27:01.468 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 135.1973ms
2024-03-30 13:27:01.468 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:27:01.474 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:27:01.484 +08:00 [INF] 用户【d1c28168-8d08-38a8-2758-3a119a14c17a:cc】登入系统
2024-03-30 13:27:01.495 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 13:27:01.495 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 13:27:01.499 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 13:27:01.501 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 13:27:01.504 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:27:01.505 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 13:27:01.509 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'd1c28168-8d08-38a8-2758-3a119a14c17a'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:27:01.510 +08:00 [DBG] =========Yi-SQL耗时1.7092毫秒=====
2024-03-30 13:27:01.512 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = 'd1c28168-8d08-38a8-2758-3a119a14c17a'    
===============================

2024-03-30 13:27:01.513 +08:00 [DBG] =========Yi-SQL耗时0.6854毫秒=====
2024-03-30 13:27:01.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 13:27:01.513 +08:00 [DBG] =========Yi-SQL耗时0.1588毫秒=====
2024-03-30 13:27:01.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO `LoginLog`  
           (`Id`,`CreationTime`,`LoginUser`,`LoginLocation`,`LoginIp`,`Browser`,`Os`,`LogMsg`,`CreatorId`)
     VALUES
           (N'c263e8f9-44a9-2d7b-1b61-3a11a0002e78',CAST('2024-03-30 13:27:01.501' AS DATETIME),N'cc',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'cc登录系统',N'd1c28168-8d08-38a8-2758-3a119a14c17a') ;
===============================

2024-03-30 13:27:01.523 +08:00 [DBG] =========Yi-SQL耗时2.3808毫秒=====
2024-03-30 13:27:01.532 +08:00 [INF] 2024/3/30 13:27:01：cc,n10-lxmIZq1FyjP6UX6elg连接服务端success，当前已连接1个
2024-03-30 13:27:01.544 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-03-30 13:27:01.554 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 52.639ms
2024-03-30 13:27:01.554 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 13:27:01.562 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 13:27:01.564 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 13:27:01.566 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'd1c28168-8d08-38a8-2758-3a119a14c17a'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:27:01.566 +08:00 [DBG] =========Yi-SQL耗时0.2573毫秒=====
2024-03-30 13:27:01.567 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = 'd1c28168-8d08-38a8-2758-3a119a14c17a'    
===============================

2024-03-30 13:27:01.568 +08:00 [DBG] =========Yi-SQL耗时0.7051毫秒=====
2024-03-30 13:27:01.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 13:27:01.569 +08:00 [DBG] =========Yi-SQL耗时0.2589毫秒=====
2024-03-30 13:27:01.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:27:01.571 +08:00 [DBG] =========Yi-SQL耗时0.1993毫秒=====
2024-03-30 13:27:01.593 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:27:01.596 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 32.0781ms
2024-03-30 13:27:01.596 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 13:27:47.105 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 13:27:47.105 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 13:27:47.112 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 13:27:47.124 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-03-30 13:27:47.126 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`OrderNum`,`State`,`Remark`,`ListClass`,`CssClass`,`DictType`,`DictLabel`,`DictValue`,`IsDefault`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime` FROM `Dictionary`  WHERE (( `DictType` = N'sys_normal_disable' ) AND ( `State` = 1 ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:27:47.127 +08:00 [DBG] =========Yi-SQL耗时0.328毫秒=====
2024-03-30 13:27:47.153 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:27:47.156 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 43.8831ms
2024-03-30 13:27:47.156 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 13:27:47.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTenant`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:27:47.175 +08:00 [DBG] =========Yi-SQL耗时0.3133毫秒=====
2024-03-30 13:27:47.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`EntityVersion`,`TenantConnectionString`,`DbType`,`IsDeleted`,`DeleterId`,`DeletionTime`,`LastModificationTime`,`LastModifierId`,`CreationTime`,`CreatorId`,`ConcurrencyStamp` FROM `YiTenant`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 13:27:47.180 +08:00 [DBG] =========Yi-SQL耗时0.2379毫秒=====
2024-03-30 13:27:47.183 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:27:47.187 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 62.4166ms
2024-03-30 13:27:47.187 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 13:27:49.622 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:27:49.623 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:27:49.624 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 13:27:49.625 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 13:27:49.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`OrderNum`,`State`,`Remark`,`ListClass`,`CssClass`,`DictType`,`DictLabel`,`DictValue`,`IsDefault`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime` FROM `Dictionary`  WHERE (( `DictType` = N'sys_user_sex' ) AND ( `State` = 1 ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:27:49.627 +08:00 [DBG] =========Yi-SQL耗时0.5043毫秒=====
2024-03-30 13:27:49.627 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:27:49.628 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-03-30 13:27:49.629 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:27:49.629 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 4.4434ms
2024-03-30 13:27:49.629 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 13:27:49.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:27:49.708 +08:00 [DBG] =========Yi-SQL耗时0.8817毫秒=====
2024-03-30 13:27:49.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`   WHERE ( `IsDeleted` = 0 )  ORDER BY `OrderNum` ASC LIMIT 0,10
===============================

2024-03-30 13:27:49.710 +08:00 [DBG] =========Yi-SQL耗时0.3624毫秒=====
2024-03-30 13:27:49.721 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:27:49.724 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 96.2912ms
2024-03-30 13:27:49.724 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:27:49.760 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:27:49.761 +08:00 [DBG] =========Yi-SQL耗时0.4672毫秒=====
2024-03-30 13:27:49.761 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:27:49.761 +08:00 [DBG] =========Yi-SQL耗时0.3026毫秒=====
2024-03-30 13:27:49.764 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:27:49.770 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 141.957ms
2024-03-30 13:27:49.770 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:27:58.722 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:27:58.722 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:27:58.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:27:58.729 +08:00 [DBG] =========Yi-SQL耗时0.2511毫秒=====
2024-03-30 13:27:58.766 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('23b716a6-10da-3fe5-7099-3a119a14c114','df545dd8-d352-627d-c128-3a119a14c114','4d6f0c6e-6e94-ee17-d74d-3a119a14c115','0e643cc6-5c04-de0a-86a0-3a119a14c115','f292acbd-1d93-d8fc-1d8b-3a119a14c115','42cc6024-4514-844e-2e22-3a119a14c115','087128ef-46b0-cbfc-c205-3a119a14c115','d645f28f-c84b-4a43-4b17-3a119a14c115','1f14df94-f9d6-54b5-4dcf-3a119a14c115','bfaee9a8-9c97-866b-4847-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:27:58.766 +08:00 [DBG] =========Yi-SQL耗时0.6639毫秒=====
2024-03-30 13:27:58.767 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('23b716a6-10da-3fe5-7099-3a119a14c114','df545dd8-d352-627d-c128-3a119a14c114','4d6f0c6e-6e94-ee17-d74d-3a119a14c115','0e643cc6-5c04-de0a-86a0-3a119a14c115','f292acbd-1d93-d8fc-1d8b-3a119a14c115','42cc6024-4514-844e-2e22-3a119a14c115','087128ef-46b0-cbfc-c205-3a119a14c115','d645f28f-c84b-4a43-4b17-3a119a14c115','1f14df94-f9d6-54b5-4dcf-3a119a14c115','bfaee9a8-9c97-866b-4847-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:27:58.767 +08:00 [DBG] =========Yi-SQL耗时0.356毫秒=====
2024-03-30 13:27:58.768 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:27:58.768 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 45.8358ms
2024-03-30 13:27:58.768 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:27:59.881 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:27:59.882 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:27:59.885 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:27:59.885 +08:00 [DBG] =========Yi-SQL耗时0.4788毫秒=====
2024-03-30 13:27:59.888 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('df545dd8-d352-627d-c128-3a119a14c114','0e643cc6-5c04-de0a-86a0-3a119a14c115','f292acbd-1d93-d8fc-1d8b-3a119a14c115','42cc6024-4514-844e-2e22-3a119a14c115','087128ef-46b0-cbfc-c205-3a119a14c115','d645f28f-c84b-4a43-4b17-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:27:59.888 +08:00 [DBG] =========Yi-SQL耗时0.5103毫秒=====
2024-03-30 13:27:59.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('df545dd8-d352-627d-c128-3a119a14c114','0e643cc6-5c04-de0a-86a0-3a119a14c115','f292acbd-1d93-d8fc-1d8b-3a119a14c115','42cc6024-4514-844e-2e22-3a119a14c115','087128ef-46b0-cbfc-c205-3a119a14c115','d645f28f-c84b-4a43-4b17-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:27:59.889 +08:00 [DBG] =========Yi-SQL耗时0.4531毫秒=====
2024-03-30 13:27:59.889 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:27:59.890 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 7.9043ms
2024-03-30 13:27:59.890 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:00.722 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:00.722 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:28:00.724 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:28:00.724 +08:00 [DBG] =========Yi-SQL耗时0.2654毫秒=====
2024-03-30 13:28:00.726 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('4d6f0c6e-6e94-ee17-d74d-3a119a14c115','1f14df94-f9d6-54b5-4dcf-3a119a14c115','bfaee9a8-9c97-866b-4847-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:28:00.726 +08:00 [DBG] =========Yi-SQL耗时0.4916毫秒=====
2024-03-30 13:28:00.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('4d6f0c6e-6e94-ee17-d74d-3a119a14c115','1f14df94-f9d6-54b5-4dcf-3a119a14c115','bfaee9a8-9c97-866b-4847-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:28:00.727 +08:00 [DBG] =========Yi-SQL耗时0.3364毫秒=====
2024-03-30 13:28:00.727 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:28:00.728 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 5.6576ms
2024-03-30 13:28:00.728 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:01.193 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:01.193 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:28:01.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:28:01.195 +08:00 [DBG] =========Yi-SQL耗时0.3991毫秒=====
2024-03-30 13:28:01.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('4d6f0c6e-6e94-ee17-d74d-3a119a14c115','1f14df94-f9d6-54b5-4dcf-3a119a14c115','bfaee9a8-9c97-866b-4847-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:28:01.196 +08:00 [DBG] =========Yi-SQL耗时0.3603毫秒=====
2024-03-30 13:28:01.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('4d6f0c6e-6e94-ee17-d74d-3a119a14c115','1f14df94-f9d6-54b5-4dcf-3a119a14c115','bfaee9a8-9c97-866b-4847-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:28:01.197 +08:00 [DBG] =========Yi-SQL耗时0.3116毫秒=====
2024-03-30 13:28:01.197 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:28:01.198 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 4.6904ms
2024-03-30 13:28:01.198 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:01.864 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:01.865 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:28:01.867 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:28:01.867 +08:00 [DBG] =========Yi-SQL耗时0.2577毫秒=====
2024-03-30 13:28:01.868 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('0e643cc6-5c04-de0a-86a0-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:28:01.869 +08:00 [DBG] =========Yi-SQL耗时0.4882毫秒=====
2024-03-30 13:28:01.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('0e643cc6-5c04-de0a-86a0-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:28:01.869 +08:00 [DBG] =========Yi-SQL耗时0.3222毫秒=====
2024-03-30 13:28:01.870 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:28:01.870 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 5.0786ms
2024-03-30 13:28:01.870 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:02.423 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:02.423 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:28:02.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:28:02.425 +08:00 [DBG] =========Yi-SQL耗时0.1953毫秒=====
2024-03-30 13:28:02.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('f292acbd-1d93-d8fc-1d8b-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:28:02.426 +08:00 [DBG] =========Yi-SQL耗时0.2949毫秒=====
2024-03-30 13:28:02.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('f292acbd-1d93-d8fc-1d8b-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:28:02.426 +08:00 [DBG] =========Yi-SQL耗时0.1997毫秒=====
2024-03-30 13:28:02.426 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:28:02.427 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 3.4822ms
2024-03-30 13:28:02.427 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:02.774 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:02.774 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:28:02.775 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:28:02.776 +08:00 [DBG] =========Yi-SQL耗时0.2023毫秒=====
2024-03-30 13:28:02.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('42cc6024-4514-844e-2e22-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:28:02.777 +08:00 [DBG] =========Yi-SQL耗时0.3084毫秒=====
2024-03-30 13:28:02.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('42cc6024-4514-844e-2e22-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:28:02.778 +08:00 [DBG] =========Yi-SQL耗时0.2815毫秒=====
2024-03-30 13:28:02.778 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:28:02.778 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 3.9471ms
2024-03-30 13:28:02.778 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:03.126 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:03.127 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:28:03.129 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:28:03.129 +08:00 [DBG] =========Yi-SQL耗时0.2751毫秒=====
2024-03-30 13:28:03.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('087128ef-46b0-cbfc-c205-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:28:03.131 +08:00 [DBG] =========Yi-SQL耗时0.4577毫秒=====
2024-03-30 13:28:03.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('087128ef-46b0-cbfc-c205-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:28:03.132 +08:00 [DBG] =========Yi-SQL耗时0.4098毫秒=====
2024-03-30 13:28:03.132 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:28:03.133 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 6.007ms
2024-03-30 13:28:03.133 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:03.439 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:03.439 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:28:03.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:28:03.441 +08:00 [DBG] =========Yi-SQL耗时0.2206毫秒=====
2024-03-30 13:28:03.442 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('d645f28f-c84b-4a43-4b17-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:28:03.443 +08:00 [DBG] =========Yi-SQL耗时0.3144毫秒=====
2024-03-30 13:28:03.443 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('d645f28f-c84b-4a43-4b17-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:28:03.443 +08:00 [DBG] =========Yi-SQL耗时0.2862毫秒=====
2024-03-30 13:28:03.443 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:28:03.444 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 3.9942ms
2024-03-30 13:28:03.444 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:03.846 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:03.847 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:28:03.848 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:28:03.848 +08:00 [DBG] =========Yi-SQL耗时0.2221毫秒=====
2024-03-30 13:28:03.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('1f14df94-f9d6-54b5-4dcf-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:28:03.850 +08:00 [DBG] =========Yi-SQL耗时0.3302毫秒=====
2024-03-30 13:28:03.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('1f14df94-f9d6-54b5-4dcf-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:28:03.850 +08:00 [DBG] =========Yi-SQL耗时0.2788毫秒=====
2024-03-30 13:28:03.851 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:28:03.851 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 4.1508ms
2024-03-30 13:28:03.851 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:04.222 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:04.222 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:28:04.224 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:28:04.224 +08:00 [DBG] =========Yi-SQL耗时0.2294毫秒=====
2024-03-30 13:28:04.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('bfaee9a8-9c97-866b-4847-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:28:04.225 +08:00 [DBG] =========Yi-SQL耗时0.3244毫秒=====
2024-03-30 13:28:04.226 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('bfaee9a8-9c97-866b-4847-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:28:04.226 +08:00 [DBG] =========Yi-SQL耗时0.2762毫秒=====
2024-03-30 13:28:04.226 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:28:04.226 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 4.2684ms
2024-03-30 13:28:04.226 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:04.888 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:04.888 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:28:04.890 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:28:04.890 +08:00 [DBG] =========Yi-SQL耗时0.1972毫秒=====
2024-03-30 13:28:04.891 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('23b716a6-10da-3fe5-7099-3a119a14c114','df545dd8-d352-627d-c128-3a119a14c114','4d6f0c6e-6e94-ee17-d74d-3a119a14c115','0e643cc6-5c04-de0a-86a0-3a119a14c115','f292acbd-1d93-d8fc-1d8b-3a119a14c115','42cc6024-4514-844e-2e22-3a119a14c115','087128ef-46b0-cbfc-c205-3a119a14c115','d645f28f-c84b-4a43-4b17-3a119a14c115','1f14df94-f9d6-54b5-4dcf-3a119a14c115','bfaee9a8-9c97-866b-4847-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:28:04.891 +08:00 [DBG] =========Yi-SQL耗时0.2807毫秒=====
2024-03-30 13:28:04.891 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('23b716a6-10da-3fe5-7099-3a119a14c114','df545dd8-d352-627d-c128-3a119a14c114','4d6f0c6e-6e94-ee17-d74d-3a119a14c115','0e643cc6-5c04-de0a-86a0-3a119a14c115','f292acbd-1d93-d8fc-1d8b-3a119a14c115','42cc6024-4514-844e-2e22-3a119a14c115','087128ef-46b0-cbfc-c205-3a119a14c115','d645f28f-c84b-4a43-4b17-3a119a14c115','1f14df94-f9d6-54b5-4dcf-3a119a14c115','bfaee9a8-9c97-866b-4847-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:28:04.892 +08:00 [DBG] =========Yi-SQL耗时0.2464毫秒=====
2024-03-30 13:28:04.892 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:28:04.892 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 3.5774ms
2024-03-30 13:28:04.892 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:09.224 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:09.224 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:28:09.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:28:09.225 +08:00 [DBG] =========Yi-SQL耗时0.2207毫秒=====
2024-03-30 13:28:09.226 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('23b716a6-10da-3fe5-7099-3a119a14c114','df545dd8-d352-627d-c128-3a119a14c114','4d6f0c6e-6e94-ee17-d74d-3a119a14c115','0e643cc6-5c04-de0a-86a0-3a119a14c115','f292acbd-1d93-d8fc-1d8b-3a119a14c115','42cc6024-4514-844e-2e22-3a119a14c115','087128ef-46b0-cbfc-c205-3a119a14c115','d645f28f-c84b-4a43-4b17-3a119a14c115','1f14df94-f9d6-54b5-4dcf-3a119a14c115','bfaee9a8-9c97-866b-4847-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:28:09.227 +08:00 [DBG] =========Yi-SQL耗时0.2923毫秒=====
2024-03-30 13:28:09.227 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('23b716a6-10da-3fe5-7099-3a119a14c114','df545dd8-d352-627d-c128-3a119a14c114','4d6f0c6e-6e94-ee17-d74d-3a119a14c115','0e643cc6-5c04-de0a-86a0-3a119a14c115','f292acbd-1d93-d8fc-1d8b-3a119a14c115','42cc6024-4514-844e-2e22-3a119a14c115','087128ef-46b0-cbfc-c205-3a119a14c115','d645f28f-c84b-4a43-4b17-3a119a14c115','1f14df94-f9d6-54b5-4dcf-3a119a14c115','bfaee9a8-9c97-866b-4847-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:28:09.227 +08:00 [DBG] =========Yi-SQL耗时0.2421毫秒=====
2024-03-30 13:28:09.227 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:28:09.227 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 3.4592ms
2024-03-30 13:28:09.227 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:13.209 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:13.212 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 13:28:13.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `Role`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:28:13.222 +08:00 [DBG] =========Yi-SQL耗时0.2745毫秒=====
2024-03-30 13:28:13.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 13:28:13.222 +08:00 [DBG] =========Yi-SQL耗时0.1825毫秒=====
2024-03-30 13:28:13.237 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:28:13.243 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 30.3377ms
2024-03-30 13:28:13.243 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:22.502 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:22.502 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:28:22.504 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:28:22.504 +08:00 [DBG] =========Yi-SQL耗时0.2557毫秒=====
2024-03-30 13:28:22.505 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('23b716a6-10da-3fe5-7099-3a119a14c114','df545dd8-d352-627d-c128-3a119a14c114','4d6f0c6e-6e94-ee17-d74d-3a119a14c115','0e643cc6-5c04-de0a-86a0-3a119a14c115','f292acbd-1d93-d8fc-1d8b-3a119a14c115','42cc6024-4514-844e-2e22-3a119a14c115','087128ef-46b0-cbfc-c205-3a119a14c115','d645f28f-c84b-4a43-4b17-3a119a14c115','1f14df94-f9d6-54b5-4dcf-3a119a14c115','bfaee9a8-9c97-866b-4847-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:28:22.506 +08:00 [DBG] =========Yi-SQL耗时0.3956毫秒=====
2024-03-30 13:28:22.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('23b716a6-10da-3fe5-7099-3a119a14c114','df545dd8-d352-627d-c128-3a119a14c114','4d6f0c6e-6e94-ee17-d74d-3a119a14c115','0e643cc6-5c04-de0a-86a0-3a119a14c115','f292acbd-1d93-d8fc-1d8b-3a119a14c115','42cc6024-4514-844e-2e22-3a119a14c115','087128ef-46b0-cbfc-c205-3a119a14c115','d645f28f-c84b-4a43-4b17-3a119a14c115','1f14df94-f9d6-54b5-4dcf-3a119a14c115','bfaee9a8-9c97-866b-4847-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:28:22.507 +08:00 [DBG] =========Yi-SQL耗时0.335毫秒=====
2024-03-30 13:28:22.507 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:28:22.507 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 4.3896ms
2024-03-30 13:28:22.507 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:23.317 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:23.317 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:28:23.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:28:23.319 +08:00 [DBG] =========Yi-SQL耗时0.2409毫秒=====
2024-03-30 13:28:23.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('23b716a6-10da-3fe5-7099-3a119a14c114','df545dd8-d352-627d-c128-3a119a14c114','4d6f0c6e-6e94-ee17-d74d-3a119a14c115','0e643cc6-5c04-de0a-86a0-3a119a14c115','f292acbd-1d93-d8fc-1d8b-3a119a14c115','42cc6024-4514-844e-2e22-3a119a14c115','087128ef-46b0-cbfc-c205-3a119a14c115','d645f28f-c84b-4a43-4b17-3a119a14c115','1f14df94-f9d6-54b5-4dcf-3a119a14c115','bfaee9a8-9c97-866b-4847-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:28:23.321 +08:00 [DBG] =========Yi-SQL耗时0.3984毫秒=====
2024-03-30 13:28:23.321 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('23b716a6-10da-3fe5-7099-3a119a14c114','df545dd8-d352-627d-c128-3a119a14c114','4d6f0c6e-6e94-ee17-d74d-3a119a14c115','0e643cc6-5c04-de0a-86a0-3a119a14c115','f292acbd-1d93-d8fc-1d8b-3a119a14c115','42cc6024-4514-844e-2e22-3a119a14c115','087128ef-46b0-cbfc-c205-3a119a14c115','d645f28f-c84b-4a43-4b17-3a119a14c115','1f14df94-f9d6-54b5-4dcf-3a119a14c115','bfaee9a8-9c97-866b-4847-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:28:23.321 +08:00 [DBG] =========Yi-SQL耗时0.3839毫秒=====
2024-03-30 13:28:23.322 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:28:23.322 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 4.7503ms
2024-03-30 13:28:23.322 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:25.527 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:25.527 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:28:25.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:28:25.529 +08:00 [DBG] =========Yi-SQL耗时0.2191毫秒=====
2024-03-30 13:28:25.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('df545dd8-d352-627d-c128-3a119a14c114','0e643cc6-5c04-de0a-86a0-3a119a14c115','f292acbd-1d93-d8fc-1d8b-3a119a14c115','42cc6024-4514-844e-2e22-3a119a14c115','087128ef-46b0-cbfc-c205-3a119a14c115','d645f28f-c84b-4a43-4b17-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:28:25.530 +08:00 [DBG] =========Yi-SQL耗时0.37毫秒=====
2024-03-30 13:28:25.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('df545dd8-d352-627d-c128-3a119a14c114','0e643cc6-5c04-de0a-86a0-3a119a14c115','f292acbd-1d93-d8fc-1d8b-3a119a14c115','42cc6024-4514-844e-2e22-3a119a14c115','087128ef-46b0-cbfc-c205-3a119a14c115','d645f28f-c84b-4a43-4b17-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:28:25.531 +08:00 [DBG] =========Yi-SQL耗时0.3057毫秒=====
2024-03-30 13:28:25.531 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:28:25.532 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 4.3039ms
2024-03-30 13:28:25.532 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:26.326 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:26.326 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:28:26.328 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:28:26.328 +08:00 [DBG] =========Yi-SQL耗时0.2581毫秒=====
2024-03-30 13:28:26.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('23b716a6-10da-3fe5-7099-3a119a14c114','df545dd8-d352-627d-c128-3a119a14c114','4d6f0c6e-6e94-ee17-d74d-3a119a14c115','0e643cc6-5c04-de0a-86a0-3a119a14c115','f292acbd-1d93-d8fc-1d8b-3a119a14c115','42cc6024-4514-844e-2e22-3a119a14c115','087128ef-46b0-cbfc-c205-3a119a14c115','d645f28f-c84b-4a43-4b17-3a119a14c115','1f14df94-f9d6-54b5-4dcf-3a119a14c115','bfaee9a8-9c97-866b-4847-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:28:26.330 +08:00 [DBG] =========Yi-SQL耗时0.3862毫秒=====
2024-03-30 13:28:26.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('23b716a6-10da-3fe5-7099-3a119a14c114','df545dd8-d352-627d-c128-3a119a14c114','4d6f0c6e-6e94-ee17-d74d-3a119a14c115','0e643cc6-5c04-de0a-86a0-3a119a14c115','f292acbd-1d93-d8fc-1d8b-3a119a14c115','42cc6024-4514-844e-2e22-3a119a14c115','087128ef-46b0-cbfc-c205-3a119a14c115','d645f28f-c84b-4a43-4b17-3a119a14c115','1f14df94-f9d6-54b5-4dcf-3a119a14c115','bfaee9a8-9c97-866b-4847-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:28:26.330 +08:00 [DBG] =========Yi-SQL耗时0.3198毫秒=====
2024-03-30 13:28:26.330 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:28:26.331 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 4.2894ms
2024-03-30 13:28:26.331 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:28.882 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:28.882 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:28.882 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-03-30 13:28:28.882 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:28:28.885 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:28:28.885 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:28:28.886 +08:00 [DBG] =========Yi-SQL耗时0.5714毫秒=====
2024-03-30 13:28:28.886 +08:00 [DBG] =========Yi-SQL耗时0.7205毫秒=====
2024-03-30 13:28:28.886 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`   WHERE ( `IsDeleted` = 0 )  ORDER BY `OrderNum` ASC LIMIT 0,10
===============================

2024-03-30 13:28:28.886 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:28:28.886 +08:00 [DBG] =========Yi-SQL耗时0.2736毫秒=====
2024-03-30 13:28:28.887 +08:00 [DBG] =========Yi-SQL耗时0.387毫秒=====
2024-03-30 13:28:28.887 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:28:28.887 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 5.3657ms
2024-03-30 13:28:28.887 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:28.890 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:28:28.890 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 8.2137ms
2024-03-30 13:28:28.890 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:35.230 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:35.230 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:28:35.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:28:35.232 +08:00 [DBG] =========Yi-SQL耗时0.4079毫秒=====
2024-03-30 13:28:35.233 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:28:35.233 +08:00 [DBG] =========Yi-SQL耗时0.3187毫秒=====
2024-03-30 13:28:35.233 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:28:35.234 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 3.6161ms
2024-03-30 13:28:35.234 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:51.098 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:28:51.103 +08:00 [INF] Route matched with {action = "GetList", controller = "Online", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Domain.Shared.Model.OnlineUserModel]] GetListAsync(Yi.Framework.Rbac.Domain.Shared.Model.OnlineUserModel) on controller Yi.Framework.Rbac.Application.Services.Monitor.OnlineService (Yi.Framework.Rbac.Application).
2024-03-30 13:28:51.111 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Domain.Shared.Model.OnlineUserModel, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:28:51.113 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.GetListAsync (Yi.Framework.Rbac.Application) in 9.624ms
2024-03-30 13:28:51.113 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:29:04.619 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.MonitorCacheService.GetName (Yi.Framework.Rbac.Application)'
2024-03-30 13:29:04.620 +08:00 [INF] Route matched with {action = "GetName", controller = "MonitorCache", area = ""}. Executing controller action with signature System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.MonitorCache.MonitorCacheNameGetListOutputDto] GetName() on controller Yi.Framework.Rbac.Application.Services.Monitor.MonitorCacheService (Yi.Framework.Rbac.Application).
2024-03-30 13:29:14.561 +08:00 [WRN] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "后端程序未使用Redis缓存，无法对Redis进行监控，可切换使用Redis",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-03-30 13:29:14.562 +08:00 [WRN] 后端程序未使用Redis缓存，无法对Redis进行监控，可切换使用Redis
Volo.Abp.UserFriendlyException: 后端程序未使用Redis缓存，无法对Redis进行监控，可切换使用Redis
   at Yi.Framework.Rbac.Application.Services.Monitor.MonitorCacheService.VerifyRedisCacheEnable() in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\Monitor\MonitorCacheService.cs:line 80
   at Yi.Framework.Rbac.Application.Services.Monitor.MonitorCacheService.GetName() in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\Monitor\MonitorCacheService.cs:line 44
   at lambda_method1618(Closure, Object, Object[])
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-03-30 13:29:14.562 +08:00 [WRN] Code:
2024-03-30 13:29:14.562 +08:00 [WRN] Details:
2024-03-30 13:29:14.571 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-03-30 13:29:14.573 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.Monitor.MonitorCacheService.GetName (Yi.Framework.Rbac.Application) in 9953.4605ms
2024-03-30 13:29:14.573 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.MonitorCacheService.GetName (Yi.Framework.Rbac.Application)'
2024-03-30 13:29:24.233 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.MonitorServerService.GetInfo (Yi.Framework.Rbac.Application)'
2024-03-30 13:29:24.236 +08:00 [INF] Route matched with {action = "GetInfo", controller = "MonitorServer", area = ""}. Executing controller action with signature System.Object GetInfo() on controller Yi.Framework.Rbac.Application.Services.Monitor.MonitorServerService (Yi.Framework.Rbac.Application).
2024-03-30 13:29:26.266 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType3`4[[Yi.Framework.Core.Helper.MemoryMetrics, Yi.Framework.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Collections.Generic.List`1[[Yi.Framework.Core.Helper.DiskInfo, Yi.Framework.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType4`6[[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.Rbac.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[<>f__AnonymousType5`8[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.Rbac.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:29:26.272 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.Monitor.MonitorServerService.GetInfo (Yi.Framework.Rbac.Application) in 2036.0418ms
2024-03-30 13:29:26.272 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.MonitorServerService.GetInfo (Yi.Framework.Rbac.Application)'
2024-03-30 13:29:36.122 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 13:29:36.122 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 13:29:36.123 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 13:29:36.123 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 13:29:36.124 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`OrderNum`,`State`,`Remark`,`ListClass`,`CssClass`,`DictType`,`DictLabel`,`DictValue`,`IsDefault`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime` FROM `Dictionary`  WHERE (( `DictType` = N'sys_job_status' ) AND ( `State` = 1 ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:29:36.124 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`OrderNum`,`State`,`Remark`,`ListClass`,`CssClass`,`DictType`,`DictLabel`,`DictValue`,`IsDefault`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime` FROM `Dictionary`  WHERE (( `DictType` = N'sys_job_group' ) AND ( `State` = 1 ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:29:36.124 +08:00 [DBG] =========Yi-SQL耗时0.2081毫秒=====
2024-03-30 13:29:36.124 +08:00 [DBG] =========Yi-SQL耗时0.568毫秒=====
2024-03-30 13:29:36.129 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:29:36.129 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 6.3034ms
2024-03-30 13:29:36.129 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 13:29:36.129 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:29:36.129 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 6.4792ms
2024-03-30 13:29:36.129 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:29:36.129 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 13:29:36.132 +08:00 [INF] Route matched with {action = "GetList", controller = "Task", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Task.TaskGetListOutput]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Task.TaskGetListInput) on controller Yi.Framework.Rbac.Application.Services.Monitor.TaskService (Yi.Framework.Rbac.Application).
2024-03-30 13:29:36.151 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Task.TaskGetListOutput, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:29:36.155 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetListAsync (Yi.Framework.Rbac.Application) in 22.7229ms
2024-03-30 13:29:36.155 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.TaskService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:29:44.499 +08:00 [INF] Sending file. Request path: '/swagger-ui.css'. Physical path: 'N/A'
2024-03-30 13:29:44.500 +08:00 [INF] Sending file. Request path: '/swagger-ui-standalone-preset.js'. Physical path: 'N/A'
2024-03-30 13:29:44.513 +08:00 [INF] Sending file. Request path: '/swagger-ui-bundle.js'. Physical path: 'N/A'
2024-03-30 13:29:44.899 +08:00 [INF] Sending file. Request path: '/favicon-32x32.png'. Physical path: 'N/A'
2024-03-30 13:29:58.688 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-03-30 13:29:58.689 +08:00 [INF] Route matched with {action = "GetCurrentUser", controller = "Test", area = ""}. Executing controller action with signature Void GetCurrentUser() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-03-30 13:29:58.698 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application) in 9.2008ms
2024-03-30 13:29:58.699 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetCurrentUser (Yi.Abp.Application)'
2024-03-30 13:30:19.044 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:19.047 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-03-30 13:30:19.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 13:30:19.063 +08:00 [DBG] =========Yi-SQL耗时0.655毫秒=====
2024-03-30 13:30:19.063 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`Description`,`ConcurrencyStamp` FROM `YiTable`   WHERE ( 1 = 1 )    LIMIT 0,10
===============================

2024-03-30 13:30:19.063 +08:00 [DBG] =========Yi-SQL耗时0.3129毫秒=====
2024-03-30 13:30:19.067 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 13:30:19.067 +08:00 [DBG] =========Yi-SQL耗时0.1813毫秒=====
2024-03-30 13:30:19.069 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:30:19.072 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 24.6047ms
2024-03-30 13:30:19.072 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:20.967 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:20.967 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:20.967 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:20.969 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-03-30 13:30:20.972 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 13:30:20.972 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-03-30 13:30:20.972 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 13:30:20.973 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`OrderNum`,`State`,`Remark`,`ListClass`,`CssClass`,`DictType`,`DictLabel`,`DictValue`,`IsDefault`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime` FROM `Dictionary`  WHERE (( `DictType` = N'sys_yes_no' ) AND ( `State` = 1 ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:30:20.974 +08:00 [DBG] =========Yi-SQL耗时0.4613毫秒=====
2024-03-30 13:30:20.975 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:30:20.975 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-03-30 13:30:20.975 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:30:20.975 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 3.2247ms
2024-03-30 13:30:20.975 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 13:30:20.977 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 5.1252ms
2024-03-30 13:30:20.977 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:20.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 13:30:20.983 +08:00 [DBG] =========Yi-SQL耗时0.2129毫秒=====
2024-03-30 13:30:20.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`Description`,`ConcurrencyStamp` FROM `YiTable`   WHERE ( 1 = 1 )    LIMIT 0,10
===============================

2024-03-30 13:30:20.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiField`  
===============================

2024-03-30 13:30:20.983 +08:00 [DBG] =========Yi-SQL耗时0.1008毫秒=====
2024-03-30 13:30:20.983 +08:00 [DBG] =========Yi-SQL耗时0.2262毫秒=====
2024-03-30 13:30:20.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 13:30:20.983 +08:00 [DBG] =========Yi-SQL耗时0.0836毫秒=====
2024-03-30 13:30:20.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`Description`,`OrderNum`,`Length`,`FieldType`,`TableId`,`IsRequired`,`IsKey`,`IsAutoAdd`,`IsPublic` FROM `YiField`     LIMIT 0,10
===============================

2024-03-30 13:30:20.984 +08:00 [DBG] =========Yi-SQL耗时0.2128毫秒=====
2024-03-30 13:30:20.984 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:30:20.984 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 14.154ms
2024-03-30 13:30:20.984 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:20.987 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:30:20.989 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 13.6175ms
2024-03-30 13:30:20.989 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:22.547 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:22.547 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-03-30 13:30:22.549 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 13:30:22.549 +08:00 [DBG] =========Yi-SQL耗时0.4027毫秒=====
2024-03-30 13:30:22.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`Description`,`ConcurrencyStamp` FROM `YiTable`   WHERE ( 1 = 1 )    LIMIT 0,10
===============================

2024-03-30 13:30:22.550 +08:00 [DBG] =========Yi-SQL耗时0.2452毫秒=====
2024-03-30 13:30:22.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 13:30:22.551 +08:00 [DBG] =========Yi-SQL耗时0.1645毫秒=====
2024-03-30 13:30:22.551 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:30:22.551 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 3.9096ms
2024-03-30 13:30:22.551 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:27.399 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:30:27.399 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.CodeGenService.PostCodeBuildWebAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:27.401 +08:00 [INF] Route matched with {action = "PostCodeBuildWeb", controller = "CodeGen", area = ""}. Executing controller action with signature System.Threading.Tasks.Task PostCodeBuildWebAsync() on controller Yi.Framework.CodeGen.Application.Services.CodeGenService (Yi.Framework.CodeGen.Application).
2024-03-30 13:30:27.414 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM `YiTable`
===============================

2024-03-30 13:30:27.416 +08:00 [DBG] =========Yi-SQL耗时1.3411毫秒=====
2024-03-30 13:30:27.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE sqlite_sequence SET seq = 0 WHERE name = 'YiTable'
===============================

2024-03-30 13:30:27.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM `YiField`
===============================

2024-03-30 13:30:27.421 +08:00 [DBG] =========Yi-SQL耗时0.2219毫秒=====
2024-03-30 13:30:27.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE sqlite_sequence SET seq = 0 WHERE name = 'YiField'
===============================

2024-03-30 13:30:27.457 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`Description`,`ConcurrencyStamp` FROM `YiTable`  WHERE ( (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   ) )  
===============================

2024-03-30 13:30:27.457 +08:00 [DBG] =========Yi-SQL耗时0.5177毫秒=====
2024-03-30 13:30:27.468 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO `YiTable`  (`Id`,`Name`,`Description`,`ConcurrencyStamp`) VALUES('f3bef07f-7436-47ba-a59f-ef7e82600f31','YiTenant',NULL,'d8f04e94f5844b4dad505b7cf7bd8da1'),  ('9d87bd44-b2df-44af-9663-5ffa54f98494','OperationLog',NULL,'4ee82cac3c3d4d0fb811123b7d3a7c65'),  ('27d2b137-a7c4-428d-adef-e76c5358c691','Config',NULL,'238d8e7e0cb145189f42992f7d0b57b7'),  ('0e7677ec-f70c-4e43-8bd3-e21975f060cf','Dept',NULL,'a1b7a69dd1eb4c86996de58cccc2863b'),  ('73cfe813-7dba-4de7-b769-a5980674b981','Dictionary',NULL,'915b8c376a5a47af84429f3fe840c358'),  ('e4b81bfd-a5e5-467f-a7f6-5fb23b9c0412','DictionaryType',NULL,'ebe6ef2706b84308a2f829b2b3e9e5e7'),  ('edf9fac8-899e-4ea6-981a-92396743fb82','File',NULL,'061abff4ee9845d0b01dc028c811fef6'),  ('940fd362-1c21-44bb-8a3f-50ea8940a8e7','LoginLog',NULL,'e44a1aea2d1a4cd08a7bad166bb71791'),  ('c6c60a70-d348-445a-a885-4cc334d0f4a4','Menu',NULL,'d32a5bd8856c4a23b9681cfc2b53c91c'),  ('4373f8e5-ba1c-44ff-9579-70397200840a','Notice',NULL,'952c44c1eb834db3820a6f8e491c88a6'),  ('3671d449-1a36-438b-8ce5-375f357cc5a6','Post',NULL,'cacd5fa652d845259da67c262215c9f8'),  ('bec807ea-8bf3-4bc5-914a-48152ffff33f','RoleDept',NULL,'d66093e5975048bab59584dadf13f163'),  ('c6aa0e4f-263b-40fb-96e6-993bba76d787','Role',NULL,'3676c58e1b1c41d983b87aa795fe44f2'),  ('fc46eae4-893d-4603-ad57-ab2f928e0f25','RoleMenu',NULL,'dd6308433af74952b501790f53302ac7'),  ('a9769510-8f0b-43f9-a02b-d10b2f0759cf','User',NULL,'6436b290073c4452bde9872782864764'),  ('07ae15b1-f7db-4ce0-bb3d-ec0ef5a62ca2','UserPost',NULL,'7d26ba94989147b5993395224dbad9f9'),  ('f91a6a46-efc5-4b46-a791-e00144e672ed','UserRole',NULL,'520db115094c4322a31ba3a393565eb2'),  ('fcc53d42-ac9b-4974-853f-e7c70b97aca9','Auth',NULL,'04fb7db217344bd698e1c6345024c011'),  ('eda5e915-8333-4c24-a8ae-eb139f09fc86','AccessLog',NULL,'ab9a21770a8f4a4f8c6687171051c2dd'),  ('36baf700-3d5b-48ae-83fa-3bbcf381a776','BbsUserExtraInfo',NULL,'da073200c4de486ab46d188af5e56a15'),  ('d108341e-f0a3-465d-bfb7-489f460193a2','Setting',NULL,'0377df9753d444418da4a5a658dc4781'),  ('bd20981e-500e-4ec9-a34c-e2175e329391','Level',NULL,'e691c92ac24b43c4b8164bbd4781ca6b'),  ('de948e31-f766-4b6e-aea5-902aea9bcf42','SignIn',NULL,'fae631c74d57435287d105f753efb1b5'),  ('abe66b26-a6db-4c65-a903-075704ebff68','Agree',NULL,'5ee4fb3a8cfc40598c2d798dfd55169e'),  ('d1a1960a-fd01-4c6e-abd5-e7d8bbf876d2','Article',NULL,'f6b61811a6eb4f8e9588e5e8c211afce'),  ('1b07a4bc-d2a2-4d38-b24c-4ad58e6c7fc2','Banner',NULL,'e6c95a22fb1541fcba9522dd5cd7dc25'),  ('3b3846af-8a8b-4b64-b070-9842c43be850','Comment',NULL,'0f55557a8e814c25bf3c004b58b23cd1'),  ('b952e2ae-a349-4569-bffa-6d02fece88e0','Discuss',NULL,'af2d524b655849b6b6634c48de7d23b2'),  ('61a1bb50-a6cc-48d6-b2bf-9809f2772099','DiscussMyType',NULL,'748da3777e6a4e89a4808b7251248606'),  ('633bbbdd-352b-4540-b43d-3bb495948bb8','DiscussTop',NULL,'78982f4260574ca9ac0c5653b8ba0cda'),  ('e66eb57f-b388-49d0-ab41-159ed223dde1','MyType',NULL,'2775f229f0704d06a62511be27a1110c'),  ('13f73152-33e3-4ce0-9b44-2571ef4e06cc','Plate',NULL,'1807cd00fdeb44e2a14e5059e965a502'),  ('cfe268c1-422b-45af-ab2c-4fabbdac5ac8','BankCard',NULL,'11d272498b66493ea521f2b29d174892'),  ('731d665c-dac1-4c47-a5c6-f2f257e97dec','InterestRecords',NULL,'847cd4d7eb534668b03a705382c6489c'),  ('4609f8b0-2273-4d80-82d4-7258f12f61a5','YiAuditLogAction',NULL,'3105e841f908414e9e0d80002d189036'),  ('4c517e11-fb7c-4273-bf35-7af1ff5938b5','YiAuditLog',NULL,'44b31cf682174757a986609473ce509e'),  ('b1421ce5-83e7-40e2-bc0b-215526d19f33','YiEntityChange',NULL,'631106bd1fce45e68f3385d38e5f9ea3'),  ('436893c6-d0d5-43fc-a2b4-c2de93d1d015','YiEntityPropertyChange',NULL,'025569f058fb4264a3cda32a70970d3b'),  ('10d63ef6-2249-4c9c-b1b0-9f41266c8104','YiField',NULL,'ddc43e1f010041c8aaeab33bacec05b6'),  ('1963f3e3-b63d-4e21-abb9-c3ffb2f5b57c','YiTable',NULL,'78fff21abcac4c9bbfe23723b14c476f'),  ('13c50d82-edd6-43f9-abe7-16c3ecb659ba','YiTemplate',NULL,'ae59772d51cc4d33844ac618af399017') ;SELECT LAST_INSERT_ROWID();

===============================

2024-03-30 13:30:27.469 +08:00 [DBG] =========Yi-SQL耗时0.5919毫秒=====
2024-03-30 13:30:27.476 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`Description`,`OrderNum`,`Length`,`FieldType`,`TableId`,`IsRequired`,`IsKey`,`IsAutoAdd`,`IsPublic` FROM `YiField`  WHERE ( (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   ) )  
===============================

2024-03-30 13:30:27.477 +08:00 [DBG] =========Yi-SQL耗时2.0886毫秒=====
2024-03-30 13:30:27.480 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`Description`,`OrderNum`,`Length`,`FieldType`,`TableId`,`IsRequired`,`IsKey`,`IsAutoAdd`,`IsPublic` FROM `YiField`  WHERE ( (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   )  OR (   `Id` = N'00000000-0000-0000-0000-000000000000'   ) )  
===============================

2024-03-30 13:30:27.481 +08:00 [DBG] =========Yi-SQL耗时2.1809毫秒=====
2024-03-30 13:30:27.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO `YiField`  (`Id`,`Name`,`Description`,`OrderNum`,`Length`,`FieldType`,`TableId`,`IsRequired`,`IsKey`,`IsAutoAdd`,`IsPublic`) VALUES('01bb1ab0-5169-4de8-98e5-03577f0e1b76','Id',NULL,'0','0','6','f3bef07f-7436-47ba-a59f-ef7e82600f31',1,1,0,0),  ('95ec8af1-44e4-4f7d-b523-2e5f80f62504','Name',NULL,'0','0','0','f3bef07f-7436-47ba-a59f-ef7e82600f31',1,0,0,0),  ('c975a65d-cde3-4859-962a-d215fb1b65ed','EntityVersion',NULL,'0','0','1','f3bef07f-7436-47ba-a59f-ef7e82600f31',1,0,0,0),  ('2e6142d3-9084-45eb-8e35-f1dbdad95840','TenantConnectionString',NULL,'0','0','0','f3bef07f-7436-47ba-a59f-ef7e82600f31',1,0,0,0),  ('76072001-a1f9-41ea-9717-f57e6537e567','DbType',NULL,'0','0','0','f3bef07f-7436-47ba-a59f-ef7e82600f31',1,0,0,0),  ('9de7be74-20b2-44c8-9722-f14daebca7ac','ExtraProperties',NULL,'0','0','0','f3bef07f-7436-47ba-a59f-ef7e82600f31',1,0,0,0),  ('d4dce472-269e-4a35-b824-b2f05127d0d5','IsDeleted',NULL,'0','0','3','f3bef07f-7436-47ba-a59f-ef7e82600f31',1,0,0,0),  ('05e592ee-38b5-4909-97c9-eea0b5b3cf3c','DeleterId',NULL,'0','0','6','f3bef07f-7436-47ba-a59f-ef7e82600f31',0,0,0,0),  ('72c24384-6cd4-4279-9cc6-3a9bbcd30870','DeletionTime',NULL,'0','0','5','f3bef07f-7436-47ba-a59f-ef7e82600f31',0,0,0,0),  ('9bf9ee05-da42-4cb0-84e5-09f6ef7a5d06','LastModificationTime',NULL,'0','0','5','f3bef07f-7436-47ba-a59f-ef7e82600f31',0,0,0,0),  ('6c21d0d5-41ff-4a6d-a5e5-30bb117b9cf2','LastModifierId',NULL,'0','0','6','f3bef07f-7436-47ba-a59f-ef7e82600f31',0,0,0,0),  ('d2ebfbc7-7d6b-4a46-9280-2c35df4f0ab4','CreationTime',NULL,'0','0','5','f3bef07f-7436-47ba-a59f-ef7e82600f31',1,0,0,0),  ('0cb4277a-b20f-46ac-81cf-fd6fad53790f','CreatorId',NULL,'0','0','6','f3bef07f-7436-47ba-a59f-ef7e82600f31',0,0,0,0),  ('22ed7a06-d4e2-4c2f-941c-6e8f93736eda','ConcurrencyStamp',NULL,'0','0','0','f3bef07f-7436-47ba-a59f-ef7e82600f31',1,0,0,0),  ('f0f7e348-a775-44c2-8969-cdea11554389','Id',NULL,'0','0','6','9d87bd44-b2df-44af-9663-5ffa54f98494',1,1,0,0),  ('3b1a7b6d-1e0f-4bf0-bdcd-45196f48cec9','Title',NULL,'0','0','0','9d87bd44-b2df-44af-9663-5ffa54f98494',1,0,0,0),  ('1750ced0-68c4-4900-aefb-5aaa2b545852','OperType',NULL,'0','0','0','9d87bd44-b2df-44af-9663-5ffa54f98494',1,0,0,0),  ('942056c3-226d-4875-a58c-8c4a02b3041c','RequestMethod',NULL,'0','0','0','9d87bd44-b2df-44af-9663-5ffa54f98494',1,0,0,0),  ('0b2c7b52-92d0-4f11-8279-80fc13c233b9','OperUser',NULL,'0','0','0','9d87bd44-b2df-44af-9663-5ffa54f98494',1,0,0,0),  ('3988ddc2-02ad-462a-b88c-54bf2a25f45c','OperIp',NULL,'0','0','0','9d87bd44-b2df-44af-9663-5ffa54f98494',1,0,0,0),  ('350bb3eb-deb1-4fe9-ae37-db1d9ef192b4','OperLocation',NULL,'0','0','0','9d87bd44-b2df-44af-9663-5ffa54f98494',1,0,0,0),  ('059b3c21-457c-45be-9b40-2d9f102463ee','Method',NULL,'0','0','0','9d87bd44-b2df-44af-9663-5ffa54f98494',1,0,0,0),  ('5e9cd1e7-ea77-42d3-8833-044de7999b83','RequestParam',NULL,'0','0','0','9d87bd44-b2df-44af-9663-5ffa54f98494',1,0,0,0),  ('69b684d5-9f68-42bd-9099-e4aec700c8e1','RequestResult',NULL,'0','9999','0','9d87bd44-b2df-44af-9663-5ffa54f98494',1,0,0,0),  ('b16de6bb-e06b-4573-9960-90dbc0fcfebb','CreationTime',NULL,'0','0','5','9d87bd44-b2df-44af-9663-5ffa54f98494',1,0,0,0),  ('754ff01a-43cb-436e-8223-b64efbdb6345','CreatorId',NULL,'0','0','6','9d87bd44-b2df-44af-9663-5ffa54f98494',0,0,0,0),  ('cc1d3a34-289b-4a25-b780-60c147f09c8d','Id',NULL,'0','0','6','27d2b137-a7c4-428d-adef-e76c5358c691',1,1,0,0),  ('70c73d81-4adb-4f18-8e1a-a602b5627a1b','ConfigName',NULL,'0','0','0','27d2b137-a7c4-428d-adef-e76c5358c691',1,0,0,0),  ('f4df54fa-95d0-42d4-b0ed-1d5cd4d012b2','ConfigKey',NULL,'0','0','0','27d2b137-a7c4-428d-adef-e76c5358c691',1,0,0,0),  ('9f02ab24-ea70-45d8-a9dc-d973aab1b894','ConfigValue',NULL,'0','0','0','27d2b137-a7c4-428d-adef-e76c5358c691',1,0,0,0),  ('11c82c8d-6dc9-4da8-8964-da6547495db5','ConfigType',NULL,'0','0','0','27d2b137-a7c4-428d-adef-e76c5358c691',1,0,0,0),  ('dce66942-25da-4988-a688-625360b83fe0','OrderNum',NULL,'0','0','1','27d2b137-a7c4-428d-adef-e76c5358c691',1,0,0,0),  ('608cba56-c7e2-43fb-bb89-56d8accc7242','Remark',NULL,'0','0','0','27d2b137-a7c4-428d-adef-e76c5358c691',1,0,0,0),  ('bea2f662-f398-4eb8-9dd7-064ed7df898f','IsDeleted',NULL,'0','0','3','27d2b137-a7c4-428d-adef-e76c5358c691',1,0,0,0),  ('5b82da34-3b8a-439c-995f-72d96e129fd8','CreationTime',NULL,'0','0','5','27d2b137-a7c4-428d-adef-e76c5358c691',1,0,0,0),  ('6b7e1b89-e59e-4717-b6a7-598c0fa06387','CreatorId',NULL,'0','0','6','27d2b137-a7c4-428d-adef-e76c5358c691',0,0,0,0),  ('85a6814c-9b81-45c1-be69-e5bdca981ec6','LastModifierId',NULL,'0','0','6','27d2b137-a7c4-428d-adef-e76c5358c691',0,0,0,0),  ('14c24a0e-04be-47b4-8f6c-d7cdc0d1c58c','LastModificationTime',NULL,'0','0','5','27d2b137-a7c4-428d-adef-e76c5358c691',0,0,0,0),  ('6651f1fa-3b84-4721-a870-00ee483fae66','Id',NULL,'0','0','6','0e7677ec-f70c-4e43-8bd3-e21975f060cf',1,1,0,0),  ('51fc3b8d-8fd2-4ea6-bbb9-a51917e50d4c','IsDeleted',NULL,'0','0','3','0e7677ec-f70c-4e43-8bd3-e21975f060cf',1,0,0,0),  ('82862d31-89c9-4a92-bef8-b1b5009193d2','CreationTime',NULL,'0','0','5','0e7677ec-f70c-4e43-8bd3-e21975f060cf',1,0,0,0),  ('983fb1f6-7442-41f6-bbad-9935d14aaeec','CreatorId',NULL,'0','0','6','0e7677ec-f70c-4e43-8bd3-e21975f060cf',0,0,0,0),  ('78a7cc4d-2ca7-4388-ae7a-b4eb868b1d87','LastModifierId',NULL,'0','0','6','0e7677ec-f70c-4e43-8bd3-e21975f060cf',0,0,0,0),  ('bb59a9ab-78a2-486a-bd64-67b3fe8533eb','LastModificationTime',NULL,'0','0','5','0e7677ec-f70c-4e43-8bd3-e21975f060cf',0,0,0,0),  ('afc4e844-2499-4a37-bf52-13660778fa61','OrderNum',NULL,'0','0','1','0e7677ec-f70c-4e43-8bd3-e21975f060cf',1,0,0,0),  ('9aedd8f0-92cf-44a6-9034-0f4b5c06ae20','State',NULL,'0','0','3','0e7677ec-f70c-4e43-8bd3-e21975f060cf',1,0,0,0),  ('c4072f56-8829-4daa-97cc-0d04c75f1792','DeptName',NULL,'0','0','0','0e7677ec-f70c-4e43-8bd3-e21975f060cf',1,0,0,0),  ('2b9d635b-4d88-482b-969f-5ee2649b412d','DeptCode',NULL,'0','0','0','0e7677ec-f70c-4e43-8bd3-e21975f060cf',1,0,0,0),  ('38c523cb-80dc-418c-9f14-61c11efeb3ba','Leader',NULL,'0','0','0','0e7677ec-f70c-4e43-8bd3-e21975f060cf',1,0,0,0),  ('c05e74ea-ab12-41aa-8c21-16fcfc0f1314','ParentId',NULL,'0','0','6','0e7677ec-f70c-4e43-8bd3-e21975f060cf',1,0,0,0),  ('447461c0-2bec-4790-8c6d-401bd63254b3','Remark',NULL,'0','0','0','0e7677ec-f70c-4e43-8bd3-e21975f060cf',1,0,0,0),  ('a703a431-ec13-4cf9-905b-7f1cf920869b','Id',NULL,'0','0','6','73cfe813-7dba-4de7-b769-a5980674b981',1,1,0,0),  ('66b0059b-de73-4e63-bc9f-1c8c4ab176fd','IsDeleted',NULL,'0','0','3','73cfe813-7dba-4de7-b769-a5980674b981',1,0,0,0),  ('c6057c62-f659-44b8-87ac-c1de3246db1f','OrderNum',NULL,'0','0','1','73cfe813-7dba-4de7-b769-a5980674b981',1,0,0,0),  ('12f5b9df-08f7-4a11-ac41-ae014185c21b','State',NULL,'0','0','3','73cfe813-7dba-4de7-b769-a5980674b981',1,0,0,0),  ('f2bc5003-6855-48bf-ba67-149f8c08cdbc','Remark',NULL,'0','0','0','73cfe813-7dba-4de7-b769-a5980674b981',1,0,0,0),  ('070cd6c9-cc51-49b6-a46d-560666c608f9','ListClass',NULL,'0','0','0','73cfe813-7dba-4de7-b769-a5980674b981',1,0,0,0),  ('d79da146-fc19-4022-bd1f-d9020d56ef0d','CssClass',NULL,'0','0','0','73cfe813-7dba-4de7-b769-a5980674b981',1,0,0,0),  ('beada56a-ff1d-47e7-9dbb-4e0a95a101e7','DictType',NULL,'0','0','0','73cfe813-7dba-4de7-b769-a5980674b981',1,0,0,0),  ('4a2d1cd5-9bb0-420c-b14f-165d27589cd4','DictLabel',NULL,'0','0','0','73cfe813-7dba-4de7-b769-a5980674b981',1,0,0,0),  ('f6c584ef-fc8e-4a20-bc8f-589742bef747','DictValue',NULL,'0','0','0','73cfe813-7dba-4de7-b769-a5980674b981',1,0,0,0),  ('f9cf089c-74c0-4c89-b9e6-3b15def2150a','IsDefault',NULL,'0','0','3','73cfe813-7dba-4de7-b769-a5980674b981',1,0,0,0),  ('bbee7300-04bc-4d12-a8df-ba22fb86ef5f','CreationTime',NULL,'0','0','5','73cfe813-7dba-4de7-b769-a5980674b981',1,0,0,0),  ('0c748309-6c85-4ab5-a3fa-f1982b026b74','CreatorId',NULL,'0','0','6','73cfe813-7dba-4de7-b769-a5980674b981',0,0,0,0),  ('8cd66fec-db68-4061-ba47-108310f9e041','LastModifierId',NULL,'0','0','6','73cfe813-7dba-4de7-b769-a5980674b981',0,0,0,0),  ('1ea9b785-4c20-4bab-a24e-4e00a74c34d4','LastModificationTime',NULL,'0','0','5','73cfe813-7dba-4de7-b769-a5980674b981',0,0,0,0),  ('9aee2d0a-c4de-4eb7-aa1d-f8b1b9be50ea','Id',NULL,'0','0','6','e4b81bfd-a5e5-467f-a7f6-5fb23b9c0412',1,1,0,0),  ('ee9fe007-048e-4b10-b57e-5918a9c31db7','IsDeleted',NULL,'0','0','3','e4b81bfd-a5e5-467f-a7f6-5fb23b9c0412',1,0,0,0),  ('70f5d1cc-a630-4d02-88ca-ee6794f0bbf7','OrderNum',NULL,'0','0','1','e4b81bfd-a5e5-467f-a7f6-5fb23b9c0412',1,0,0,0),  ('b665286e-8c6e-442c-9733-50080f1bb821','State',NULL,'0','0','3','e4b81bfd-a5e5-467f-a7f6-5fb23b9c0412',0,0,0,0),  ('fa389d62-4c5d-4d5a-9c59-d440fb532dea','DictName',NULL,'0','0','0','e4b81bfd-a5e5-467f-a7f6-5fb23b9c0412',1,0,0,0),  ('f675bcee-986c-4970-9bc2-82734f7f800b','DictType',NULL,'0','0','0','e4b81bfd-a5e5-467f-a7f6-5fb23b9c0412',1,0,0,0),  ('5af96f9f-dfd2-4833-9998-3af36d0e6076','Remark',NULL,'0','0','0','e4b81bfd-a5e5-467f-a7f6-5fb23b9c0412',1,0,0,0),  ('b6dbe9c2-74f7-41de-90c3-557946d142c2','CreationTime',NULL,'0','0','5','e4b81bfd-a5e5-467f-a7f6-5fb23b9c0412',1,0,0,0),  ('00f3ca07-7653-4416-bb09-6dea74290cde','CreatorId',NULL,'0','0','6','e4b81bfd-a5e5-467f-a7f6-5fb23b9c0412',0,0,0,0),  ('20635f0a-9028-48f0-bbd2-b5d01778fc99','LastModifierId',NULL,'0','0','6','e4b81bfd-a5e5-467f-a7f6-5fb23b9c0412',0,0,0,0),  ('f8146465-b5fb-4856-ab16-b9c8095d2cb4','LastModificationTime',NULL,'0','0','5','e4b81bfd-a5e5-467f-a7f6-5fb23b9c0412',0,0,0,0),  ('4e9dc6c2-c38b-42a1-aabe-3f0c03f6e26b','ExtraProperties',NULL,'0','0','0','e4b81bfd-a5e5-467f-a7f6-5fb23b9c0412',1,0,0,0),  ('6ca4b1d4-9cfb-4209-8314-896e832fd446','ConcurrencyStamp',NULL,'0','0','0','e4b81bfd-a5e5-467f-a7f6-5fb23b9c0412',1,0,0,0),  ('a2a85e19-f227-499e-8af1-db8c6a3c61d8','Id',NULL,'0','0','6','edf9fac8-899e-4ea6-981a-92396743fb82',1,1,0,0),  ('e2e449cf-d4a8-4fae-83e3-6aae5cce24a1','FileSize',NULL,'0','0','4','edf9fac8-899e-4ea6-981a-92396743fb82',1,0,0,0),  ('56d05a8e-e48f-46af-a97c-ceb4283dfeb6','FileName',NULL,'0','0','0','edf9fac8-899e-4ea6-981a-92396743fb82',1,0,0,0),  ('05322aa6-051f-4ba7-bfa1-dc78a46ca429','FilePath',NULL,'0','0','0','edf9fac8-899e-4ea6-981a-92396743fb82',1,0,0,0),  ('6dadda3f-634d-4295-becb-24fb1789f105','CreationTime',NULL,'0','0','5','edf9fac8-899e-4ea6-981a-92396743fb82',1,0,0,0),  ('ec915eb2-5642-4dbf-8e12-c9b9088b48da','CreatorId',NULL,'0','0','6','edf9fac8-899e-4ea6-981a-92396743fb82',0,0,0,0),  ('88f689b8-5f53-4908-9d8e-e34bf4255637','LastModifierId',NULL,'0','0','6','edf9fac8-899e-4ea6-981a-92396743fb82',0,0,0,0),  ('08858a3c-6fbe-4f6f-b0d7-8ec2711dcbff','LastModificationTime',NULL,'0','0','5','edf9fac8-899e-4ea6-981a-92396743fb82',0,0,0,0),  ('d2e4d308-7c8f-4838-98fe-59b0ec66a17f','ExtraProperties',NULL,'0','0','0','edf9fac8-899e-4ea6-981a-92396743fb82',1,0,0,0),  ('3152773c-7287-44f7-81c3-839ca71aeb94','ConcurrencyStamp',NULL,'0','0','0','edf9fac8-899e-4ea6-981a-92396743fb82',1,0,0,0),  ('a23bad26-a652-48e8-a096-e034b62d985c','Id',NULL,'0','0','6','940fd362-1c21-44bb-8a3f-50ea8940a8e7',1,1,0,0),  ('f10a7fca-ccc2-434d-9e4b-e0ee731a1c60','CreationTime',NULL,'0','0','5','940fd362-1c21-44bb-8a3f-50ea8940a8e7',1,0,0,0),  ('91aec9f6-288e-4d6b-8497-7f4a734d5af8','LoginUser',NULL,'0','0','0','940fd362-1c21-44bb-8a3f-50ea8940a8e7',1,0,0,0),  ('2aa11e37-9517-4e6c-b477-ea89de78e57e','LoginLocation',NULL,'0','0','0','940fd362-1c21-44bb-8a3f-50ea8940a8e7',1,0,0,0),  ('c6a4fdc8-2a21-46a6-b08b-ee26d8b27ab7','LoginIp',NULL,'0','0','0','940fd362-1c21-44bb-8a3f-50ea8940a8e7',1,0,0,0),  ('ed6da798-f2e5-4fc2-be2f-a25a61fa7474','Browser',NULL,'0','0','0','940fd362-1c21-44bb-8a3f-50ea8940a8e7',1,0,0,0),  ('6cf6d8b6-ebcf-45c4-b54d-07cd40ea531e','Os',NULL,'0','0','0','940fd362-1c21-44bb-8a3f-50ea8940a8e7',1,0,0,0),  ('2c84da9c-9589-4108-9875-46e62d8e13f0','LogMsg',NULL,'0','0','0','940fd362-1c21-44bb-8a3f-50ea8940a8e7',1,0,0,0),  ('aad251ca-54a4-422f-aa61-76f48b8a3e5e','CreatorId',NULL,'0','0','6','940fd362-1c21-44bb-8a3f-50ea8940a8e7',0,0,0,0),  ('caf628d5-cc97-4785-913b-6a4df06351f7','Id',NULL,'0','0','6','c6c60a70-d348-445a-a885-4cc334d0f4a4',1,1,0,0),  ('e5e3ee7d-3b32-4ca4-9683-5ad9500b000a','IsDeleted',NULL,'0','0','3','c6c60a70-d348-445a-a885-4cc334d0f4a4',1,0,0,0),  ('2db602c7-69ed-4075-8171-e03572e9d304','CreationTime',NULL,'0','0','5','c6c60a70-d348-445a-a885-4cc334d0f4a4',1,0,0,0),  ('97d07085-113b-4920-a916-4f7dfbf063bd','CreatorId',NULL,'0','0','6','c6c60a70-d348-445a-a885-4cc334d0f4a4',0,0,0,0),  ('498ea811-7917-4a3c-9f20-4ead49fb38af','LastModifierId',NULL,'0','0','6','c6c60a70-d348-445a-a885-4cc334d0f4a4',0,0,0,0),  ('8918d080-c9be-4a66-b96f-18855b3a2c36','LastModificationTime',NULL,'0','0','5','c6c60a70-d348-445a-a885-4cc334d0f4a4',0,0,0,0),  ('2e6387fc-3a48-4d94-b0ca-7d3cdbbf0d20','OrderNum',NULL,'0','0','1','c6c60a70-d348-445a-a885-4cc334d0f4a4',1,0,0,0),  ('b77e2b73-46fc-4d7d-813e-17359525bc50','State',NULL,'0','0','3','c6c60a70-d348-445a-a885-4cc334d0f4a4',1,0,0,0),  ('bc6ade2f-d258-40eb-a263-a944431bc472','MenuName',NULL,'0','0','0','c6c60a70-d348-445a-a885-4cc334d0f4a4',1,0,0,0),  ('3d3822be-49d8-451d-9c98-c8e97c365d16','MenuType',NULL,'0','0','0','c6c60a70-d348-445a-a885-4cc334d0f4a4',1,0,0,0),  ('37f596f5-d4a2-4a01-a99e-a8946b69c6db','PermissionCode',NULL,'0','0','0','c6c60a70-d348-445a-a885-4cc334d0f4a4',1,0,0,0),  ('83ca739e-519e-4dfa-8647-e88e1ad648dd','ParentId',NULL,'0','0','6','c6c60a70-d348-445a-a885-4cc334d0f4a4',1,0,0,0),  ('625367d7-8d4b-41c2-b299-1a064cddc2c1','MenuIcon',NULL,'0','0','0','c6c60a70-d348-445a-a885-4cc334d0f4a4',1,0,0,0),  ('f29189c4-49ed-450f-a22b-1cf4f5282137','Router',NULL,'0','0','0','c6c60a70-d348-445a-a885-4cc334d0f4a4',1,0,0,0),  ('adb5c982-157f-4b26-9fc4-311fc12340fa','IsLink',NULL,'0','0','3','c6c60a70-d348-445a-a885-4cc334d0f4a4',1,0,0,0),  ('1c3c49ff-fccc-4ca5-af13-b832890bad95','IsCache',NULL,'0','0','3','c6c60a70-d348-445a-a885-4cc334d0f4a4',1,0,0,0),  ('a663f319-2ab2-4ca7-98ec-e7e8db1c737e','IsShow',NULL,'0','0','3','c6c60a70-d348-445a-a885-4cc334d0f4a4',1,0,0,0),  ('e7e2ab48-7ca3-4523-b2b3-5639e4a8cb40','Remark',NULL,'0','0','0','c6c60a70-d348-445a-a885-4cc334d0f4a4',1,0,0,0),  ('d428eb5c-74ea-4613-9da1-76021f7fe253','Component',NULL,'0','0','0','c6c60a70-d348-445a-a885-4cc334d0f4a4',1,0,0,0),  ('1b13a83b-b671-4d88-be21-4de15669c778','Query',NULL,'0','0','0','c6c60a70-d348-445a-a885-4cc334d0f4a4',1,0,0,0),  ('51656e69-19fb-4675-871c-fa60598bfd76','Children',NULL,'0','0','0','c6c60a70-d348-445a-a885-4cc334d0f4a4',1,0,0,0),  ('11cb45fa-42b1-4f85-af8d-fadc5794c4a0','Id',NULL,'0','0','6','4373f8e5-ba1c-44ff-9579-70397200840a',1,1,0,0),  ('f6660171-a0d8-401b-b101-ee1d54ca04b3','Title',NULL,'0','0','0','4373f8e5-ba1c-44ff-9579-70397200840a',1,0,0,0),  ('77d7afc8-fa4f-48bf-b64e-6f8ce1d8dcf7','Type',NULL,'0','0','0','4373f8e5-ba1c-44ff-9579-70397200840a',1,0,0,0),  ('7c1bd122-b706-4721-9b2c-f42d07e6c381','Content',NULL,'0','0','0','4373f8e5-ba1c-44ff-9579-70397200840a',1,0,0,0),  ('b280e600-db2f-4b7e-869f-272eed90ca63','IsDeleted',NULL,'0','0','3','4373f8e5-ba1c-44ff-9579-70397200840a',1,0,0,0),  ('be1837b9-ea02-4a40-b8b8-53d50387c374','CreationTime',NULL,'0','0','5','4373f8e5-ba1c-44ff-9579-70397200840a',1,0,0,0),  ('8648e4e7-24f2-424e-a1f2-1fe2f9b6c8eb','CreatorId',NULL,'0','0','6','4373f8e5-ba1c-44ff-9579-70397200840a',0,0,0,0),  ('ac190aa9-9a96-44e5-a646-87bd162f5717','LastModifierId',NULL,'0','0','6','4373f8e5-ba1c-44ff-9579-70397200840a',0,0,0,0),  ('68b10904-ff30-4320-873e-c6d912fabef6','LastModificationTime',NULL,'0','0','5','4373f8e5-ba1c-44ff-9579-70397200840a',0,0,0,0),  ('2177c79c-3a21-40a8-93c0-30416bfc8cc3','OrderNum',NULL,'0','0','1','4373f8e5-ba1c-44ff-9579-70397200840a',1,0,0,0),  ('fa3715ae-d4ef-46fe-aa48-4d209c3b2d00','State',NULL,'0','0','3','4373f8e5-ba1c-44ff-9579-70397200840a',1,0,0,0),  ('8d889b4f-86b6-4f0b-962d-998414d905ad','Id',NULL,'0','0','6','3671d449-1a36-438b-8ce5-375f357cc5a6',1,1,0,0),  ('07574d47-04e3-4cdb-af60-f5e6caffb35f','IsDeleted',NULL,'0','0','3','3671d449-1a36-438b-8ce5-375f357cc5a6',1,0,0,0),  ('a4cdb1f1-050f-4b13-8159-0ebb03fbf844','CreationTime',NULL,'0','0','5','3671d449-1a36-438b-8ce5-375f357cc5a6',1,0,0,0),  ('b5d517a9-76c2-4e55-99b7-119ebe14478b','CreatorId',NULL,'0','0','6','3671d449-1a36-438b-8ce5-375f357cc5a6',0,0,0,0),  ('059dab8c-e814-4be6-8b2b-9291cde3760d','LastModifierId',NULL,'0','0','6','3671d449-1a36-438b-8ce5-375f357cc5a6',0,0,0,0),  ('6998f172-4648-41ab-8c4d-6ffed1b6e26c','LastModificationTime',NULL,'0','0','5','3671d449-1a36-438b-8ce5-375f357cc5a6',0,0,0,0),  ('e7f63143-dd59-459e-89c3-f50f01725f43','OrderNum',NULL,'0','0','1','3671d449-1a36-438b-8ce5-375f357cc5a6',1,0,0,0),  ('68704f6e-4760-488c-ba68-472b741dc299','State',NULL,'0','0','3','3671d449-1a36-438b-8ce5-375f357cc5a6',1,0,0,0),  ('8e1cdc96-539b-48c0-a34d-dbedc3bb29a8','PostCode',NULL,'0','0','0','3671d449-1a36-438b-8ce5-375f357cc5a6',1,0,0,0),  ('d6628443-11ff-41ee-bec4-407881b83cc3','PostName',NULL,'0','0','0','3671d449-1a36-438b-8ce5-375f357cc5a6',1,0,0,0),  ('f5e8078e-e13c-4de7-8c4b-363edd2b2517','Remark',NULL,'0','0','0','3671d449-1a36-438b-8ce5-375f357cc5a6',1,0,0,0),  ('b13c1bcb-84b0-49c1-afe1-75213ae7fd37','Id',NULL,'0','0','6','bec807ea-8bf3-4bc5-914a-48152ffff33f',1,1,0,0),  ('6aab7c9c-d2c6-4774-907c-5a09cb39107c','RoleId',NULL,'0','0','6','bec807ea-8bf3-4bc5-914a-48152ffff33f',1,0,0,0),  ('8d8c65de-12b6-41af-875d-9ff78d4be81d','DeptId',NULL,'0','0','6','bec807ea-8bf3-4bc5-914a-48152ffff33f',1,0,0,0),  ('cfc456a2-1069-4c49-9e86-6d6d42234621','Id',NULL,'0','0','6','c6aa0e4f-263b-40fb-96e6-993bba76d787',1,1,0,0),  ('306a913a-3fde-47ad-baaf-71fb4c503d69','IsDeleted',NULL,'0','0','3','c6aa0e4f-263b-40fb-96e6-993bba76d787',1,0,0,0),  ('5c04aab3-b41f-4cad-86d4-116e30afef3e','CreationTime',NULL,'0','0','5','c6aa0e4f-263b-40fb-96e6-993bba76d787',1,0,0,0),  ('523190da-e0a9-4657-be30-f184a649f7b0','CreatorId',NULL,'0','0','6','c6aa0e4f-263b-40fb-96e6-993bba76d787',0,0,0,0),  ('46066aec-5490-466a-8646-3953308c2d6f','LastModifierId',NULL,'0','0','6','c6aa0e4f-263b-40fb-96e6-993bba76d787',0,0,0,0),  ('4b1bb8f8-8872-4512-b5ec-b19818fe660c','LastModificationTime',NULL,'0','0','5','c6aa0e4f-263b-40fb-96e6-993bba76d787',0,0,0,0),  ('0f06307e-85c9-4bc0-9191-da21c92c0f52','OrderNum',NULL,'0','0','1','c6aa0e4f-263b-40fb-96e6-993bba76d787',1,0,0,0),  ('ff147e5f-2052-4c6e-bd31-b158d8921ecf','RoleName',NULL,'0','0','0','c6aa0e4f-263b-40fb-96e6-993bba76d787',1,0,0,0),  ('906d9a1a-771b-46fb-b373-b5499c4e1cd7','RoleCode',NULL,'0','0','0','c6aa0e4f-263b-40fb-96e6-993bba76d787',1,0,0,0),  ('7185b7dc-0c8d-4034-bcaa-12a558613a5f','Remark',NULL,'0','0','0','c6aa0e4f-263b-40fb-96e6-993bba76d787',1,0,0,0),  ('e2890777-44ff-45b0-accc-77eecedd6cd3','DataScope',NULL,'0','0','0','c6aa0e4f-263b-40fb-96e6-993bba76d787',1,0,0,0),  ('09325aaf-829e-471d-a1a9-db0dcf745148','State',NULL,'0','0','3','c6aa0e4f-263b-40fb-96e6-993bba76d787',1,0,0,0),  ('5f66c92d-eb3d-48b0-9677-0ef8ab62af2e','Menus',NULL,'0','0','0','c6aa0e4f-263b-40fb-96e6-993bba76d787',1,0,0,0),  ('ac2b6dd8-6a13-4aa6-a517-4de454d3fd73','Depts',NULL,'0','0','0','c6aa0e4f-263b-40fb-96e6-993bba76d787',1,0,0,0),  ('5af8d038-8a78-461e-9b39-1546f2add948','Id',NULL,'0','0','6','fc46eae4-893d-4603-ad57-ab2f928e0f25',1,1,0,0),  ('a8b407d2-25e5-47aa-9b39-6c7a4661e1eb','RoleId',NULL,'0','0','6','fc46eae4-893d-4603-ad57-ab2f928e0f25',1,0,0,0),  ('f65b2be7-926d-4ced-b0ba-0030be96826c','MenuId',NULL,'0','0','6','fc46eae4-893d-4603-ad57-ab2f928e0f25',1,0,0,0),  ('751e49ca-e67b-41be-8248-24c3a11b262a','Id',NULL,'0','0','6','a9769510-8f0b-43f9-a02b-d10b2f0759cf',1,1,0,0),  ('d55c83d2-5cf9-4fde-8c0b-94168c11707a','IsDeleted',NULL,'0','0','3','a9769510-8f0b-43f9-a02b-d10b2f0759cf',1,0,0,0),  ('6f159067-8d4a-4934-8863-0ae2bf6e051d','Name',NULL,'0','0','0','a9769510-8f0b-43f9-a02b-d10b2f0759cf',1,0,0,0),  ('ad7ecfd4-e321-4413-adf1-b7b46f5eb261','Age',NULL,'0','0','1','a9769510-8f0b-43f9-a02b-d10b2f0759cf',0,0,0,0),  ('05e38a61-92ff-4d04-b461-fcd5a44ed6dc','UserName',NULL,'0','0','0','a9769510-8f0b-43f9-a02b-d10b2f0759cf',1,0,0,0),  ('84c796eb-dc6d-4daa-a8c3-3679cd82b84b','Password',NULL,'0','0','0','a9769510-8f0b-43f9-a02b-d10b2f0759cf',1,0,0,0),  ('150212b0-e5bf-4770-9945-55fda19ad80b','Salt',NULL,'0','0','0','a9769510-8f0b-43f9-a02b-d10b2f0759cf',1,0,0,0),  ('4da8231f-729b-4395-acd5-eca8e2488706','Icon',NULL,'0','0','0','a9769510-8f0b-43f9-a02b-d10b2f0759cf',1,0,0,0),  ('0bb4292b-a268-47a8-a27f-f2fc0f209f67','Nick',NULL,'0','0','0','a9769510-8f0b-43f9-a02b-d10b2f0759cf',1,0,0,0),  ('29523248-5992-4137-9ea6-7353338cec42','Email',NULL,'0','0','0','a9769510-8f0b-43f9-a02b-d10b2f0759cf',1,0,0,0),  ('d1821a8a-6bb4-4a18-aab8-ae80d7aecd93','Ip',NULL,'0','0','0','a9769510-8f0b-43f9-a02b-d10b2f0759cf',1,0,0,0),  ('2ddb30a5-7c48-4439-a48c-d9f23a00b0c0','Address',NULL,'0','0','0','a9769510-8f0b-43f9-a02b-d10b2f0759cf',1,0,0,0),  ('94d605bc-9d70-4a0b-b781-eb6264c19369','Phone',NULL,'0','0','2','a9769510-8f0b-43f9-a02b-d10b2f0759cf',0,0,0,0),  ('2dc22a2d-9a0c-4da4-8227-f54e8b001f9e','Introduction',NULL,'0','0','0','a9769510-8f0b-43f9-a02b-d10b2f0759cf',1,0,0,0),  ('8b64fecb-1949-4070-ab8b-d1fba25aa1dd','Remark',NULL,'0','0','0','a9769510-8f0b-43f9-a02b-d10b2f0759cf',1,0,0,0),  ('7bd34edf-2131-42b5-8242-6971004c38c4','Sex',NULL,'0','0','0','a9769510-8f0b-43f9-a02b-d10b2f0759cf',1,0,0,0),  ('f7944151-6ee8-4e89-9666-c708c4966ee6','DeptId',NULL,'0','0','6','a9769510-8f0b-43f9-a02b-d10b2f0759cf',0,0,0,0),  ('c15b5b55-e057-46b3-9373-ac4a90597219','CreationTime',NULL,'0','0','5','a9769510-8f0b-43f9-a02b-d10b2f0759cf',1,0,0,0),  ('78e24474-9a86-4795-9e5c-22c488f71074','CreatorId',NULL,'0','0','6','a9769510-8f0b-43f9-a02b-d10b2f0759cf',0,0,0,0),  ('96d0628c-1644-4780-85b2-ee17df3ca2a5','LastModifierId',NULL,'0','0','6','a9769510-8f0b-43f9-a02b-d10b2f0759cf',0,0,0,0),  ('087b4a19-6b9b-44c9-a113-bc4a3144bd96','LastModificationTime',NULL,'0','0','5','a9769510-8f0b-43f9-a02b-d10b2f0759cf',0,0,0,0),  ('a4fc4355-7be5-47c1-a44c-4599c2a9ddd4','OrderNum',NULL,'0','0','1','a9769510-8f0b-43f9-a02b-d10b2f0759cf',1,0,0,0),  ('7f2c5d15-d7ca-47cb-a399-258d85210f6e','State',NULL,'0','0','3','a9769510-8f0b-43f9-a02b-d10b2f0759cf',1,0,0,0),  ('de0d62b0-3235-458c-a371-cafde2a8c9de','Roles',NULL,'0','0','0','a9769510-8f0b-43f9-a02b-d10b2f0759cf',1,0,0,0),  ('614d89ae-beac-4a09-83e9-d8cff2f55050','Posts',NULL,'0','0','0','a9769510-8f0b-43f9-a02b-d10b2f0759cf',1,0,0,0),  ('6ac41aea-5bf4-4118-8fae-ca559e06d42d','Dept',NULL,'0','0','0','a9769510-8f0b-43f9-a02b-d10b2f0759cf',1,0,0,0),  ('fd94cd86-4d99-44d2-bef6-d2ef84631ea2','Id',NULL,'0','0','6','07ae15b1-f7db-4ce0-bb3d-ec0ef5a62ca2',1,1,0,0),  ('729d864b-6bd4-4de9-aa74-66f5fa3017c5','UserId',NULL,'0','0','6','07ae15b1-f7db-4ce0-bb3d-ec0ef5a62ca2',1,0,0,0),  ('9501b677-8196-40e0-a6b3-2773dd650f16','PostId',NULL,'0','0','6','07ae15b1-f7db-4ce0-bb3d-ec0ef5a62ca2',1,0,0,0),  ('57577635-fbaa-4848-bd3d-c2ae17660977','Id',NULL,'0','0','6','f91a6a46-efc5-4b46-a791-e00144e672ed',1,1,0,0),  ('482b8fa7-a730-4a1e-8a25-e33d1825bfee','RoleId',NULL,'0','0','6','f91a6a46-efc5-4b46-a791-e00144e672ed',1,0,0,0),  ('db50c574-4bff-4607-9031-fb7b7c291c74','UserId',NULL,'0','0','6','f91a6a46-efc5-4b46-a791-e00144e672ed',1,0,0,0),  ('8fb8bc50-353f-40c1-b097-03cc2202929c','Id',NULL,'0','0','6','fcc53d42-ac9b-4974-853f-e7c70b97aca9',1,1,0,0),  ('6edb1401-8a34-461f-87e3-f534d235e6e3','UserId',NULL,'0','0','6','fcc53d42-ac9b-4974-853f-e7c70b97aca9',1,0,0,0),  ('3f6edade-42b5-444e-933e-15662092b9ae','OpenId',NULL,'0','0','0','fcc53d42-ac9b-4974-853f-e7c70b97aca9',1,0,0,0),  ('b832b1e6-6915-4c0f-8550-77d3391aaf84','Name',NULL,'0','0','0','fcc53d42-ac9b-4974-853f-e7c70b97aca9',1,0,0,0),  ('c15eacbd-53a6-4c14-9cd6-76fc92efa665','AuthType',NULL,'0','0','0','fcc53d42-ac9b-4974-853f-e7c70b97aca9',1,0,0,0),  ('5971ba34-baee-4e97-9fd3-8f5d278acd0b','IsDeleted',NULL,'0','0','3','fcc53d42-ac9b-4974-853f-e7c70b97aca9',1,0,0,0),  ('72ae2364-2ff5-43f3-9fd4-4fa6dccaee66','ExtraProperties',NULL,'0','0','0','fcc53d42-ac9b-4974-853f-e7c70b97aca9',1,0,0,0),  ('5d6f7920-ca49-42fd-9f14-69ea977114fe','CreationTime',NULL,'0','0','5','fcc53d42-ac9b-4974-853f-e7c70b97aca9',1,0,0,0),  ('ce934cf6-1bdc-476d-b5d8-2d546b824f95','ConcurrencyStamp',NULL,'0','0','0','fcc53d42-ac9b-4974-853f-e7c70b97aca9',1,0,0,0),  ('137303ea-4638-4220-b291-8166aafb487a','Id',NULL,'0','0','6','eda5e915-8333-4c24-a8ae-eb139f09fc86',1,1,0,0),  ('d0f432ea-e83f-4b60-b0f5-43fca59f73b9','Number',NULL,'0','0','2','eda5e915-8333-4c24-a8ae-eb139f09fc86',1,0,0,0),  ('5ac67446-4f8f-44c2-8c8e-953e2fee3e7a','LastModificationTime',NULL,'0','0','5','eda5e915-8333-4c24-a8ae-eb139f09fc86',0,0,0,0),  ('6065894e-c2f2-4edb-aaeb-e2c97c555b2a','CreationTime',NULL,'0','0','5','eda5e915-8333-4c24-a8ae-eb139f09fc86',1,0,0,0),  ('d0d5c7bf-95ab-4796-a828-2536f1bb58d7','Id',NULL,'0','0','6','36baf700-3d5b-48ae-83fa-3bbcf381a776',1,1,0,0),  ('c3a12112-77ef-4b93-9587-4a7435b0126e','UserId',NULL,'0','0','6','36baf700-3d5b-48ae-83fa-3bbcf381a776',1,0,0,0),  ('78035bf0-ea11-45f4-951d-7aba598a6866','UserLimit',NULL,'0','0','0','36baf700-3d5b-48ae-83fa-3bbcf381a776',1,0,0,0),  ('1dd4dca7-bcda-4b94-81f5-c561e845234d','Level',NULL,'0','0','1','36baf700-3d5b-48ae-83fa-3bbcf381a776',1,0,0,0),  ('8962079e-3cfa-448c-b844-acf2423db642','Money',NULL,'0','0','4','36baf700-3d5b-48ae-83fa-3bbcf381a776',1,0,0,0),  ('26c561c1-2e92-4c0f-8c5f-e35c60e44f1b','Experience',NULL,'0','0','2','36baf700-3d5b-48ae-83fa-3bbcf381a776',1,0,0,0),  ('1dbf6abb-900e-4062-b0d6-c0041016e00f','DiscussNumber',NULL,'0','0','1','36baf700-3d5b-48ae-83fa-3bbcf381a776',1,0,0,0),  ('1da43b3c-1f1a-42ad-911d-745433ebc216','CommentNumber',NULL,'0','0','1','36baf700-3d5b-48ae-83fa-3bbcf381a776',1,0,0,0),  ('794e2e74-bd0c-45e2-8074-72e413609c50','AgreeNumber',NULL,'0','0','1','36baf700-3d5b-48ae-83fa-3bbcf381a776',1,0,0,0),  ('a207a34e-8247-442a-9b47-25a1d3352064','Id',NULL,'0','0','6','d108341e-f0a3-465d-bfb7-489f460193a2',1,1,0,0),  ('b7d82a08-cb20-4b90-8618-306e6f665720','CommentPage',NULL,'0','0','1','d108341e-f0a3-465d-bfb7-489f460193a2',1,0,0,0),  ('8ce1d250-f1df-48af-b927-3282d48f453f','DiscussPage',NULL,'0','0','1','d108341e-f0a3-465d-bfb7-489f460193a2',1,0,0,0),  ('ce5b754c-1749-4996-bfbb-2e22a1787272','CommentExperience',NULL,'0','0','1','d108341e-f0a3-465d-bfb7-489f460193a2',1,0,0,0),  ('c93f1a9d-4b24-4e41-9dcb-e37ecbe5c781','DiscussExperience',NULL,'0','0','1','d108341e-f0a3-465d-bfb7-489f460193a2',1,0,0,0),  ('6e171edf-2e5d-44d4-ac6e-153ae93d6ea4','Title',NULL,'0','0','0','d108341e-f0a3-465d-bfb7-489f460193a2',1,0,0,0),  ('3233fbb2-6069-430b-8423-2dca47fa1180','Id',NULL,'0','0','6','bd20981e-500e-4ec9-a34c-e2175e329391',1,1,0,0),  ('51a74f98-ed53-4d01-a94a-2e0762f9ddcb','CurrentLevel',NULL,'0','0','1','bd20981e-500e-4ec9-a34c-e2175e329391',1,0,0,0),  ('ffa05fd0-9879-472e-bffe-e8808bf20f24','MinExperience',NULL,'0','0','4','bd20981e-500e-4ec9-a34c-e2175e329391',1,0,0,0),  ('a3699490-73fa-4e44-b2e8-c7836d0ad5c7','Name',NULL,'0','0','0','bd20981e-500e-4ec9-a34c-e2175e329391',1,0,0,0),  ('f2787046-cbb1-47b0-918d-183d80c120a9','Nick',NULL,'0','0','0','bd20981e-500e-4ec9-a34c-e2175e329391',1,0,0,0),  ('3b43516e-8475-4b31-8ad6-04b16bda0d95','Logo',NULL,'0','0','0','bd20981e-500e-4ec9-a34c-e2175e329391',1,0,0,0),  ('65722ffc-ed9b-4e91-a660-53d0f510cdab','Id',NULL,'0','0','6','de948e31-f766-4b6e-aea5-902aea9bcf42',1,1,0,0),  ('9aedf046-32a5-43af-9675-39513c30ef25','CreationTime',NULL,'0','0','5','de948e31-f766-4b6e-aea5-902aea9bcf42',1,0,0,0),  ('93af919e-0efe-4e81-93d4-1274f92ea131','CreatorId',NULL,'0','0','6','de948e31-f766-4b6e-aea5-902aea9bcf42',0,0,0,0),  ('4b96746e-6bba-431f-b691-956ed3de3037','ContinuousNumber',NULL,'0','0','1','de948e31-f766-4b6e-aea5-902aea9bcf42',1,0,0,0),  ('60c2e713-dc10-4df6-9821-b471871bc541','Id',NULL,'0','0','6','abe66b26-a6db-4c65-a903-075704ebff68',1,1,0,0),  ('8315b0a7-fec2-433b-a74a-dfd564857268','CreationTime',NULL,'0','0','5','abe66b26-a6db-4c65-a903-075704ebff68',1,0,0,0),  ('0f3d575b-df79-4cb6-84c0-832133a8fc01','DiscussId',NULL,'0','0','6','abe66b26-a6db-4c65-a903-075704ebff68',1,0,0,0),  ('f80759c1-a5df-4a60-af88-77b8aab2704d','CreatorId',NULL,'0','0','6','abe66b26-a6db-4c65-a903-075704ebff68',0,0,0,0),  ('0ba4afdf-5c36-4d26-a927-0637b8a2c274','Id',NULL,'0','0','6','d1a1960a-fd01-4c6e-abd5-e7d8bbf876d2',1,1,0,0),  ('1a97a3f3-0c10-4e14-806f-e4d9181161f5','IsDeleted',NULL,'0','0','3','d1a1960a-fd01-4c6e-abd5-e7d8bbf876d2',1,0,0,0),  ('adb89958-cd01-409d-a9bb-b3dfefe37f9e','Content',NULL,'0','0','0','d1a1960a-fd01-4c6e-abd5-e7d8bbf876d2',1,0,0,0),  ('15b684db-c4af-4038-b008-34b534e60a38','Name',NULL,'0','0','0','d1a1960a-fd01-4c6e-abd5-e7d8bbf876d2',1,0,0,0),  ('54ae35c0-4947-4bc8-8ce2-78b3867ee1a2','DiscussId',NULL,'0','0','6','d1a1960a-fd01-4c6e-abd5-e7d8bbf876d2',1,0,0,0),  ('284d02ee-ef53-463e-b701-2376c285c6dc','ParentId',NULL,'0','0','6','d1a1960a-fd01-4c6e-abd5-e7d8bbf876d2',1,0,0,0),  ('ab924da7-e093-4ce1-a61f-db514ec446aa','Children',NULL,'0','0','0','d1a1960a-fd01-4c6e-abd5-e7d8bbf876d2',1,0,0,0),  ('194fa71c-175e-42b2-a7ef-6f870e825e54','CreationTime',NULL,'0','0','5','d1a1960a-fd01-4c6e-abd5-e7d8bbf876d2',1,0,0,0),  ('90060ea2-7316-41ca-8165-508a6d5a7ea1','CreatorId',NULL,'0','0','6','d1a1960a-fd01-4c6e-abd5-e7d8bbf876d2',0,0,0,0),  ('5f06a26b-1e18-4c18-b6a9-ef384674dd0d','LastModifierId',NULL,'0','0','6','d1a1960a-fd01-4c6e-abd5-e7d8bbf876d2',0,0,0,0),  ('60daccf4-001f-475e-84d0-e8fe6f779d5d','LastModificationTime',NULL,'0','0','5','d1a1960a-fd01-4c6e-abd5-e7d8bbf876d2',0,0,0,0),  ('7c2c1ebb-fe28-45ab-893c-812e15ca9e8a','OrderNum',NULL,'0','0','1','d1a1960a-fd01-4c6e-abd5-e7d8bbf876d2',1,0,0,0),  ('e77b216b-94f5-465a-8d85-f8b74cd4de47','Id',NULL,'0','0','6','1b07a4bc-d2a2-4d38-b24c-4ad58e6c7fc2',1,1,0,0),  ('593baefc-2669-4338-bc41-a2b6cf1f58a4','Name',NULL,'0','0','0','1b07a4bc-d2a2-4d38-b24c-4ad58e6c7fc2',1,0,0,0),  ('5e8c14c9-3651-4af4-b4a2-5bed5ef4df64','Logo',NULL,'0','0','0','1b07a4bc-d2a2-4d38-b24c-4ad58e6c7fc2',1,0,0,0),  ('ce814e7f-0438-4ac9-8067-55f44283dd6b','Color',NULL,'0','0','0','1b07a4bc-d2a2-4d38-b24c-4ad58e6c7fc2',1,0,0,0),  ('5c616d0d-726a-4675-8385-8ba3f99003e5','IsDeleted',NULL,'0','0','3','1b07a4bc-d2a2-4d38-b24c-4ad58e6c7fc2',1,0,0,0),  ('0fb3c3ff-d748-43f4-a75c-5c962f4a5e92','CreationTime',NULL,'0','0','5','1b07a4bc-d2a2-4d38-b24c-4ad58e6c7fc2',1,0,0,0),  ('b99cd70e-244b-4358-890f-3d4c42730adf','CreatorId',NULL,'0','0','6','1b07a4bc-d2a2-4d38-b24c-4ad58e6c7fc2',0,0,0,0),  ('054ac250-83fb-4c0e-8739-40d85283df5a','LastModifierId',NULL,'0','0','6','1b07a4bc-d2a2-4d38-b24c-4ad58e6c7fc2',0,0,0,0),  ('9d35484f-5381-4c3d-b9b4-2808d2a20d7b','LastModificationTime',NULL,'0','0','5','1b07a4bc-d2a2-4d38-b24c-4ad58e6c7fc2',0,0,0,0),  ('4532099a-8237-4306-85dd-a32207fbc79d','Id',NULL,'0','0','6','3b3846af-8a8b-4b64-b070-9842c43be850',1,1,0,0),  ('d3f79ea8-c8b2-4bd0-8fdc-203719859cf4','IsDeleted',NULL,'0','0','3','3b3846af-8a8b-4b64-b070-9842c43be850',1,0,0,0),  ('e60dc072-eacf-4287-92da-b94a71e792e9','Content',NULL,'0','500','0','3b3846af-8a8b-4b64-b070-9842c43be850',1,0,0,0),  ('50a1e600-e6b2-4d9d-b9db-ed68d8eae318','DiscussId',NULL,'0','0','6','3b3846af-8a8b-4b64-b070-9842c43be850',1,0,0,0),  ('61a95a0b-bad8-4c16-aaa4-f1d370096770','ParentId',NULL,'0','0','6','3b3846af-8a8b-4b64-b070-9842c43be850',1,0,0,0),  ('2f7f5221-7ae5-46f6-a935-2ed226ac33f2','CreationTime',NULL,'0','0','5','3b3846af-8a8b-4b64-b070-9842c43be850',1,0,0,0),  ('a94a2325-9317-4f95-93dd-1fa4509f75bb','RootId',NULL,'0','0','6','3b3846af-8a8b-4b64-b070-9842c43be850',1,0,0,0),  ('cef352d2-6535-469b-8cff-dd1519568a6f','Children',NULL,'0','0','0','3b3846af-8a8b-4b64-b070-9842c43be850',1,0,0,0),  ('31eba22a-7948-4d2e-bcaa-432cca010f30','CreateUser',NULL,'0','0','0','3b3846af-8a8b-4b64-b070-9842c43be850',1,0,0,0),  ('c8adb1a9-f377-408b-8a7f-b27af7105475','CommentedUser',NULL,'0','0','0','3b3846af-8a8b-4b64-b070-9842c43be850',1,0,0,0),  ('9435336b-5a3c-4134-80e8-4b28f69d321a','CreatorId',NULL,'0','0','6','3b3846af-8a8b-4b64-b070-9842c43be850',0,0,0,0),  ('9962a6f4-bfdf-4e98-8cc0-f6f9838b529e','LastModifierId',NULL,'0','0','6','3b3846af-8a8b-4b64-b070-9842c43be850',0,0,0,0),  ('d809ae78-d24b-4857-8791-148dd76fa545','LastModificationTime',NULL,'0','0','5','3b3846af-8a8b-4b64-b070-9842c43be850',0,0,0,0),  ('10a21f0b-522a-4096-948a-6fabd1e597eb','Id',NULL,'0','0','6','b952e2ae-a349-4569-bffa-6d02fece88e0',1,1,0,0),  ('2e85ff6c-372b-4787-be5e-c15866775550','Title',NULL,'0','0','0','b952e2ae-a349-4569-bffa-6d02fece88e0',1,0,0,0),  ('15deafda-154c-42f8-b97f-da65ef388e8e','Types',NULL,'0','0','0','b952e2ae-a349-4569-bffa-6d02fece88e0',1,0,0,0),  ('fec142e2-3dc0-4155-ab98-ebd1a9a3cbf1','Introduction',NULL,'0','0','0','b952e2ae-a349-4569-bffa-6d02fece88e0',1,0,0,0),  ('6fa4d887-697e-4359-8e9a-7dc14a734072','AgreeNum',NULL,'0','0','1','b952e2ae-a349-4569-bffa-6d02fece88e0',1,0,0,0),  ('76e0946e-c853-4daa-a399-7a300cf529ba','SeeNum',NULL,'0','0','1','b952e2ae-a349-4569-bffa-6d02fece88e0',1,0,0,0),  ('961e3a2f-eb69-402f-a448-1dbe0316a27b','Cover',NULL,'0','0','0','b952e2ae-a349-4569-bffa-6d02fece88e0',1,0,0,0),  ('8547069e-49c4-4093-9861-27c565b0fc1a','Content',NULL,'0','0','0','b952e2ae-a349-4569-bffa-6d02fece88e0',1,0,0,0),  ('e2e5e6bc-2feb-4f51-9290-009669e445bf','Color',NULL,'0','0','0','b952e2ae-a349-4569-bffa-6d02fece88e0',1,0,0,0),  ('9aa34be3-bfeb-4820-bd16-157e14d461ef','IsDeleted',NULL,'0','0','3','b952e2ae-a349-4569-bffa-6d02fece88e0',1,0,0,0),  ('5231bc4b-a0dc-4498-a1a9-fca3185d574f','IsTop',NULL,'0','0','3','b952e2ae-a349-4569-bffa-6d02fece88e0',1,0,0,0),  ('ee1b838d-8cae-4f6f-98cf-f8aa907ec177','OrderNum',NULL,'0','0','1','b952e2ae-a349-4569-bffa-6d02fece88e0',1,0,0,0),  ('f0e3fa30-89a2-481a-91bb-b4d976fb26eb','PermissionType',NULL,'0','0','0','b952e2ae-a349-4569-bffa-6d02fece88e0',1,0,0,0),  ('d8b25a35-0fe7-4ed9-9084-538a71cdeceb','PlateId',NULL,'0','0','6','b952e2ae-a349-4569-bffa-6d02fece88e0',1,0,0,0),  ('612e909a-89a7-4940-838e-93e3435f6162','CreationTime',NULL,'0','0','5','b952e2ae-a349-4569-bffa-6d02fece88e0',1,0,0,0),  ('c0dee52c-d621-448c-99de-bdbfb59a7a18','CreatorId',NULL,'0','0','6','b952e2ae-a349-4569-bffa-6d02fece88e0',0,0,0,0),  ('7aee9f85-fa23-4d57-abdb-2a82930f7ffa','LastModifierId',NULL,'0','0','6','b952e2ae-a349-4569-bffa-6d02fece88e0',0,0,0,0),  ('7b203483-d6ec-4e93-bca4-fb1af9386d00','LastModificationTime',NULL,'0','0','5','b952e2ae-a349-4569-bffa-6d02fece88e0',0,0,0,0),  ('e2a1ae29-bac8-4f96-9717-4953768c53a0','PermissionUserIds',NULL,'0','0','0','b952e2ae-a349-4569-bffa-6d02fece88e0',1,0,0,0),  ('b24e4e1e-3249-4cea-b38c-4a5f1a4c014f','IsDisableCreateComment',NULL,'0','0','3','b952e2ae-a349-4569-bffa-6d02fece88e0',1,0,0,0),  ('1e1c5a1e-2680-41c0-9854-d37034b53f12','Id',NULL,'0','0','6','61a1bb50-a6cc-48d6-b2bf-9809f2772099',1,1,0,0),  ('f36e7759-4295-4a96-a60c-5bc5723721d9','DiscussId',NULL,'0','0','6','61a1bb50-a6cc-48d6-b2bf-9809f2772099',1,0,0,0),  ('2fefad6f-3e53-432e-8036-18bccba7d0a9','MyTypeId',NULL,'0','0','6','61a1bb50-a6cc-48d6-b2bf-9809f2772099',1,0,0,0),  ('b3456360-bfe4-4aba-b174-6729df98605a','Id',NULL,'0','0','6','633bbbdd-352b-4540-b43d-3bb495948bb8',1,1,0,0),  ('98525a58-65ab-4079-bf60-c4d42a643b36','OrderNum',NULL,'0','0','1','633bbbdd-352b-4540-b43d-3bb495948bb8',1,0,0,0),  ('2dcc1821-2be2-4053-8b8f-a245d386f0b4','DiscussId',NULL,'0','0','6','633bbbdd-352b-4540-b43d-3bb495948bb8',1,0,0,0),  ('89b021f0-18a2-4bbb-b71b-e511913440cb','LastModificationTime',NULL,'0','0','5','633bbbdd-352b-4540-b43d-3bb495948bb8',0,0,0,0),  ('6126c9d4-37b5-485a-9fb7-38e0c6b9cba7','Id',NULL,'0','0','6','e66eb57f-b388-49d0-ab41-159ed223dde1',1,1,0,0),  ('9acfe224-b181-4d21-bc44-b30223b61fd3','IsDeleted',NULL,'0','0','3','e66eb57f-b388-49d0-ab41-159ed223dde1',1,0,0,0),  ('40651735-7b69-4932-9dc6-84affc0afd7b','Name',NULL,'0','0','0','e66eb57f-b388-49d0-ab41-159ed223dde1',1,0,0,0),  ('7ee3ad60-86a5-4362-b6fb-cf198d91fa2f','Color',NULL,'0','0','0','e66eb57f-b388-49d0-ab41-159ed223dde1',1,0,0,0),  ('32f1fd66-a4fb-4c0c-bdaf-37c096c1869b','BackgroundColor',NULL,'0','0','0','e66eb57f-b388-49d0-ab41-159ed223dde1',1,0,0,0),  ('40d48a36-b930-4946-be6a-41a5c3d8e3f5','UserId',NULL,'0','0','6','e66eb57f-b388-49d0-ab41-159ed223dde1',1,0,0,0),  ('3e7a08a4-43b4-41b4-ae74-43403e0e564e','Id',NULL,'0','0','6','13f73152-33e3-4ce0-9b44-2571ef4e06cc',1,1,0,0),  ('d3731f85-ba57-4738-97c4-a7e78aac886d','Code',NULL,'0','0','0','13f73152-33e3-4ce0-9b44-2571ef4e06cc',1,0,0,0),  ('9713373b-fbe5-4a4a-b164-d4b19933a499','Name',NULL,'0','0','0','13f73152-33e3-4ce0-9b44-2571ef4e06cc',1,0,0,0),  ('a690a809-2c9e-4342-9e4d-661c613014f4','Logo',NULL,'0','0','0','13f73152-33e3-4ce0-9b44-2571ef4e06cc',1,0,0,0),  ('c817b4dd-c0b0-4b32-a5f5-4012d5afa3fa','Introduction',NULL,'0','0','0','13f73152-33e3-4ce0-9b44-2571ef4e06cc',1,0,0,0),  ('3092d408-318c-4617-bd7b-46aeb624b988','IsDeleted',NULL,'0','0','3','13f73152-33e3-4ce0-9b44-2571ef4e06cc',1,0,0,0),  ('2382e6ce-ac0c-4ee3-9c73-9ec932088406','CreationTime',NULL,'0','0','5','13f73152-33e3-4ce0-9b44-2571ef4e06cc',1,0,0,0),  ('fb128916-3d0e-41fd-b234-fcfcbc293c74','CreatorId',NULL,'0','0','6','13f73152-33e3-4ce0-9b44-2571ef4e06cc',0,0,0,0),  ('4af64ac5-4442-49db-98ce-f996ab31bd77','LastModifierId',NULL,'0','0','6','13f73152-33e3-4ce0-9b44-2571ef4e06cc',0,0,0,0),  ('8b3c6953-fcb9-49a9-9037-d06e6af100b7','LastModificationTime',NULL,'0','0','5','13f73152-33e3-4ce0-9b44-2571ef4e06cc',0,0,0,0),  ('3e68a0a9-3d36-4984-8faa-186caaeae47a','OrderNum',NULL,'0','0','1','13f73152-33e3-4ce0-9b44-2571ef4e06cc',1,0,0,0),  ('d8d6c471-8703-498c-bae1-67c767507a3f','IsDisableCreateDiscuss',NULL,'0','0','3','13f73152-33e3-4ce0-9b44-2571ef4e06cc',1,0,0,0),  ('f457b6c8-a51f-43dc-8f39-2fc7fdf9c328','Id',NULL,'0','0','6','cfe268c1-422b-45af-ab2c-4fabbdac5ac8',1,1,0,0),  ('e79bc4cc-8c48-430d-ad05-62f80baeea26','CreationTime',NULL,'0','0','5','cfe268c1-422b-45af-ab2c-4fabbdac5ac8',1,0,0,0),  ('ca496d68-12c5-4fb9-b424-ebd24bcbd836','LastDepositTime',NULL,'0','0','5','cfe268c1-422b-45af-ab2c-4fabbdac5ac8',0,0,0,0),  ('59c190b9-829f-4b8d-934b-6cc1584cbbfd','LastDrawTime',NULL,'0','0','5','cfe268c1-422b-45af-ab2c-4fabbdac5ac8',0,0,0,0),  ('e8dc9fe7-d21e-43b4-b659-2794990525ac','UserId',NULL,'0','0','6','cfe268c1-422b-45af-ab2c-4fabbdac5ac8',1,0,0,0),  ('bb3e5630-14fb-4259-ab9c-29846f5c90fb','StorageMoney',NULL,'0','0','4','cfe268c1-422b-45af-ab2c-4fabbdac5ac8',1,0,0,0),  ('441acd73-1fbe-41c2-9828-1721e4dc6345','MaxStorageMoney',NULL,'0','0','4','cfe268c1-422b-45af-ab2c-4fabbdac5ac8',1,0,0,0),  ('f0bb65c7-d8e2-4f38-891b-d633eb777f38','FulltermTime',NULL,'0','0','5','cfe268c1-422b-45af-ab2c-4fabbdac5ac8',0,0,0,0),  ('a91fd326-9d23-4264-ba2a-74a9fcabcd2d','BankCardState',NULL,'0','0','0','cfe268c1-422b-45af-ab2c-4fabbdac5ac8',1,0,0,0),  ('df9c2d93-5688-4e47-83fd-5a90a828d678','Id',NULL,'0','0','6','731d665c-dac1-4c47-a5c6-f2f257e97dec',1,1,0,0),  ('a938725a-a5ad-410c-a07e-640094ee8d51','CreationTime',NULL,'0','0','5','731d665c-dac1-4c47-a5c6-f2f257e97dec',1,0,0,0),  ('40f49653-d3a7-426f-8bc8-6118ee545755','ComparisonValue',NULL,'0','0','4','731d665c-dac1-4c47-a5c6-f2f257e97dec',1,0,0,0),  ('2fb8096e-c869-4cf7-98ff-0e2e923671e2','Value',NULL,'0','0','4','731d665c-dac1-4c47-a5c6-f2f257e97dec',1,0,0,0),  ('0784e205-7d18-4747-b069-907906dce158','IsFluctuate',NULL,'0','0','3','731d665c-dac1-4c47-a5c6-f2f257e97dec',1,0,0,0),  ('8d312805-edc1-4cc2-8975-2443e6fcccf1','TenantId',NULL,'0','0','6','4609f8b0-2273-4d80-82d4-7258f12f61a5',0,0,0,0),  ('1f44a7eb-12f9-4011-a66b-a2f57cf0d988','AuditLogId',NULL,'0','0','6','4609f8b0-2273-4d80-82d4-7258f12f61a5',1,0,0,0),  ('278bd319-ac78-48bf-a443-f9aff07f3e80','ServiceName',NULL,'0','0','0','4609f8b0-2273-4d80-82d4-7258f12f61a5',1,0,0,0),  ('fc282c2a-2d28-42eb-a602-eb1c8efd321b','MethodName',NULL,'0','0','0','4609f8b0-2273-4d80-82d4-7258f12f61a5',1,0,0,0),  ('188fd514-965e-417b-8657-be4c46b8156e','Parameters',NULL,'0','0','0','4609f8b0-2273-4d80-82d4-7258f12f61a5',1,0,0,0),  ('efe3f634-80e5-4b97-8226-3710408afd74','ExecutionTime',NULL,'0','0','5','4609f8b0-2273-4d80-82d4-7258f12f61a5',0,0,0,0),  ('9902b98a-e1c8-4b3a-bcda-e777dbe12306','ExecutionDuration',NULL,'0','0','1','4609f8b0-2273-4d80-82d4-7258f12f61a5',0,0,0,0),  ('5aca53c1-d97e-47ba-99d9-2f8fdaf2a5d3','Id',NULL,'0','0','6','4609f8b0-2273-4d80-82d4-7258f12f61a5',1,1,0,0),  ('92d65db5-0917-4b3c-b1df-9efdd145a52e','Id',NULL,'0','0','6','4c517e11-fb7c-4273-bf35-7af1ff5938b5',1,1,0,0),  ('3805f046-84f8-42e3-a9c0-a2e4384d34cd','ApplicationName',NULL,'0','0','0','4c517e11-fb7c-4273-bf35-7af1ff5938b5',1,0,0,0),  ('3f425a8d-f351-41b7-bc53-5d5c7ddc597c','UserId',NULL,'0','0','6','4c517e11-fb7c-4273-bf35-7af1ff5938b5',0,0,0,0),  ('54a332b4-cb59-48a7-9d80-45a4e59b5e8b','UserName',NULL,'0','0','0','4c517e11-fb7c-4273-bf35-7af1ff5938b5',1,0,0,0),  ('52d01404-0267-4525-8f7b-e770fec0565b','TenantName',NULL,'0','0','0','4c517e11-fb7c-4273-bf35-7af1ff5938b5',1,0,0,0),  ('54d4c231-762f-49aa-b8dc-75e73713daf2','ImpersonatorUserId',NULL,'0','0','6','4c517e11-fb7c-4273-bf35-7af1ff5938b5',0,0,0,0),  ('ea2738b1-902f-4da7-8567-19fa58ba5e12','ImpersonatorUserName',NULL,'0','0','0','4c517e11-fb7c-4273-bf35-7af1ff5938b5',1,0,0,0),  ('1b49340f-993e-4d86-89f7-458ab46ecadd','ImpersonatorTenantId',NULL,'0','0','6','4c517e11-fb7c-4273-bf35-7af1ff5938b5',0,0,0,0),  ('65d47db7-775d-45bf-aafe-34327d0d71fb','ImpersonatorTenantName',NULL,'0','0','0','4c517e11-fb7c-4273-bf35-7af1ff5938b5',1,0,0,0),  ('d23805c8-f353-4e0c-a498-c430c6b3ef36','ExecutionTime',NULL,'0','0','5','4c517e11-fb7c-4273-bf35-7af1ff5938b5',0,0,0,0),  ('39a742c2-36bc-4ca3-bfe4-6c4f8f5188fb','ExecutionDuration',NULL,'0','0','1','4c517e11-fb7c-4273-bf35-7af1ff5938b5',0,0,0,0),  ('95a4bf08-7d96-4dab-8d84-aae48c5493b0','ClientIpAddress',NULL,'0','0','0','4c517e11-fb7c-4273-bf35-7af1ff5938b5',1,0,0,0),  ('06130057-e90a-4cc4-a6a4-76e165353d3b','ClientName',NULL,'0','0','0','4c517e11-fb7c-4273-bf35-7af1ff5938b5',1,0,0,0),  ('cd15771d-14c2-461a-83eb-e73078836c3c','ClientId',NULL,'0','0','0','4c517e11-fb7c-4273-bf35-7af1ff5938b5',1,0,0,0),  ('8973e9e2-7f8e-409b-8ce0-a552ff288cb1','CorrelationId',NULL,'0','0','0','4c517e11-fb7c-4273-bf35-7af1ff5938b5',1,0,0,0),  ('18175bdf-1f74-48f8-8fa6-d5c2f9ed7203','BrowserInfo',NULL,'0','0','0','4c517e11-fb7c-4273-bf35-7af1ff5938b5',1,0,0,0),  ('933908d1-1135-46e2-ab2e-cde1052cffeb','HttpMethod',NULL,'0','0','0','4c517e11-fb7c-4273-bf35-7af1ff5938b5',1,0,0,0),  ('9befe2a9-9903-4378-998d-f8957ec8376d','Url',NULL,'0','0','0','4c517e11-fb7c-4273-bf35-7af1ff5938b5',1,0,0,0),  ('740bd1ff-ced4-4537-a558-50dcb40618b6','Exceptions',NULL,'0','0','0','4c517e11-fb7c-4273-bf35-7af1ff5938b5',1,0,0,0),  ('f54665cc-12ce-46dc-9142-09ca4918178f','Comments',NULL,'0','0','0','4c517e11-fb7c-4273-bf35-7af1ff5938b5',1,0,0,0),  ('a77cb258-a786-412a-b43a-ee20c414cbac','HttpStatusCode',NULL,'0','0','1','4c517e11-fb7c-4273-bf35-7af1ff5938b5',0,0,0,0),  ('0232eac7-a8ad-45a4-ae2e-71231f7970fb','TenantId',NULL,'0','0','6','4c517e11-fb7c-4273-bf35-7af1ff5938b5',0,0,0,0),  ('604db1ff-f122-41a2-835d-6c4c9f90ad66','EntityChanges',NULL,'0','0','0','4c517e11-fb7c-4273-bf35-7af1ff5938b5',1,0,0,0),  ('844ded87-7cbb-44e4-99e9-5b007b092203','Actions',NULL,'0','0','0','4c517e11-fb7c-4273-bf35-7af1ff5938b5',1,0,0,0),  ('f5ea63ac-a5c0-4d65-8870-0fb65fa515cf','ExtraProperties',NULL,'0','0','0','4c517e11-fb7c-4273-bf35-7af1ff5938b5',1,0,0,0),  ('ad52c9d0-6f16-4ce1-bcd9-390fca409002','ConcurrencyStamp',NULL,'0','0','0','4c517e11-fb7c-4273-bf35-7af1ff5938b5',1,0,0,0),  ('0b0f674a-1cd6-4894-aa3b-3b34a6e4627b','Id',NULL,'0','0','6','b1421ce5-83e7-40e2-bc0b-215526d19f33',1,1,0,0),  ('84a73403-4017-4498-b902-ef609eb52c5b','AuditLogId',NULL,'0','0','6','b1421ce5-83e7-40e2-bc0b-215526d19f33',1,0,0,0),  ('540057a0-a7e1-44da-be7b-8d86d94e417b','TenantId',NULL,'0','0','6','b1421ce5-83e7-40e2-bc0b-215526d19f33',0,0,0,0),  ('2af4c5fb-bf7e-4a9a-beba-210b6f3c0cf4','ChangeTime',NULL,'0','0','5','b1421ce5-83e7-40e2-bc0b-215526d19f33',0,0,0,0),  ('0085ef21-0685-47c9-a162-53ce425b8af6','ChangeType',NULL,'0','0','0','b1421ce5-83e7-40e2-bc0b-215526d19f33',0,0,0,0),  ('2266012b-3bed-48cd-93f4-ac732e5e946a','EntityTenantId',NULL,'0','0','6','b1421ce5-83e7-40e2-bc0b-215526d19f33',0,0,0,0),  ('67a222f4-091a-49ad-b358-2879be555a4e','EntityId',NULL,'0','0','0','b1421ce5-83e7-40e2-bc0b-215526d19f33',1,0,0,0),  ('98bb0c90-30f1-42f5-8efb-8f156b60c1eb','EntityTypeFullName',NULL,'0','0','0','b1421ce5-83e7-40e2-bc0b-215526d19f33',1,0,0,0),  ('a41a37f2-34ef-4b98-bd09-977a1c832b1b','PropertyChanges',NULL,'0','0','0','b1421ce5-83e7-40e2-bc0b-215526d19f33',1,0,0,0),  ('640dab97-fda6-4dae-bee7-82e04d4626c2','Id',NULL,'0','0','6','436893c6-d0d5-43fc-a2b4-c2de93d1d015',1,1,0,0),  ('d1c8e8b5-b683-48e6-9259-779fd97e40b9','TenantId',NULL,'0','0','6','436893c6-d0d5-43fc-a2b4-c2de93d1d015',0,0,0,0),  ('a266e190-e218-4855-9d05-709eaa8dc39a','EntityChangeId',NULL,'0','0','6','436893c6-d0d5-43fc-a2b4-c2de93d1d015',0,0,0,0),  ('bc5a8084-250a-4b90-a24b-83b4f81f073c','NewValue',NULL,'0','0','0','436893c6-d0d5-43fc-a2b4-c2de93d1d015',1,0,0,0),  ('baeadeaa-a6c1-496b-b9aa-17e9cb84505f','OriginalValue',NULL,'0','0','0','436893c6-d0d5-43fc-a2b4-c2de93d1d015',1,0,0,0),  ('3f2cc559-f17c-45ca-b5e2-448b81a9c125','PropertyName',NULL,'0','0','0','436893c6-d0d5-43fc-a2b4-c2de93d1d015',1,0,0,0),  ('caa77da6-ec93-4d36-a089-1b842a564f18','PropertyTypeFullName',NULL,'0','0','0','436893c6-d0d5-43fc-a2b4-c2de93d1d015',1,0,0,0),  ('43da68c6-d696-4da9-aa58-85e4f17f685a','Id',NULL,'0','0','6','10d63ef6-2249-4c9c-b1b0-9f41266c8104',1,1,0,0),  ('29e28605-efcc-4e56-9959-3d7d907b63d1','Name',NULL,'0','0','0','10d63ef6-2249-4c9c-b1b0-9f41266c8104',1,0,0,0),  ('a461096d-bcff-4b89-ae2e-579a4189ad6d','Description',NULL,'0','0','0','10d63ef6-2249-4c9c-b1b0-9f41266c8104',1,0,0,0),  ('e5f64664-4c80-46ac-b484-3476e8358799','OrderNum',NULL,'0','0','1','10d63ef6-2249-4c9c-b1b0-9f41266c8104',1,0,0,0),  ('281451ed-6884-46ce-84a4-c87806be847e','Length',NULL,'0','0','1','10d63ef6-2249-4c9c-b1b0-9f41266c8104',1,0,0,0),  ('0328de07-c96d-4a6d-a347-4f18378ddfbd','FieldType',NULL,'0','0','0','10d63ef6-2249-4c9c-b1b0-9f41266c8104',1,0,0,0),  ('db91e54a-7fe5-4364-a4ec-c81e32e58c22','TableId',NULL,'0','0','6','10d63ef6-2249-4c9c-b1b0-9f41266c8104',1,0,0,0),  ('3c2cd558-0763-4a98-b3fc-df4e1d7ffe02','IsRequired',NULL,'0','0','3','10d63ef6-2249-4c9c-b1b0-9f41266c8104',1,0,0,0),  ('6f8ff8be-0666-4b5c-ba04-58089f326001','IsKey',NULL,'0','0','3','10d63ef6-2249-4c9c-b1b0-9f41266c8104',1,0,0,0),  ('fcf65180-d295-4c36-a756-3dbf8d3c0079','IsAutoAdd',NULL,'0','0','3','10d63ef6-2249-4c9c-b1b0-9f41266c8104',1,0,0,0),  ('aa554148-a490-43c4-90fc-a48114117c48','IsPublic',NULL,'0','0','3','10d63ef6-2249-4c9c-b1b0-9f41266c8104',1,0,0,0),  ('d2c7bf16-4289-4849-b107-7b165615b5f6','Id',NULL,'0','0','6','1963f3e3-b63d-4e21-abb9-c3ffb2f5b57c',1,1,0,0),  ('3dde6da5-2525-4356-8f77-ade91c6714ef','Name',NULL,'0','0','0','1963f3e3-b63d-4e21-abb9-c3ffb2f5b57c',1,0,0,0),  ('70fb5e6d-9491-486b-ab5d-4780f5a1d7dc','Description',NULL,'0','0','0','1963f3e3-b63d-4e21-abb9-c3ffb2f5b57c',1,0,0,0),  ('81d7ae1a-ad8e-48e5-806f-eb55c30a6aac','Fields',NULL,'0','0','0','1963f3e3-b63d-4e21-abb9-c3ffb2f5b57c',1,0,0,0),  ('9b040b9b-d245-44c6-a07e-24fa10528a9c','ExtraProperties',NULL,'0','0','0','1963f3e3-b63d-4e21-abb9-c3ffb2f5b57c',1,0,0,0),  ('cbe6e5db-72c8-4d31-a843-cd98797558d0','ConcurrencyStamp',NULL,'0','0','0','1963f3e3-b63d-4e21-abb9-c3ffb2f5b57c',1,0,0,0),  ('bee89a2c-22fb-44ce-900e-7811ebba305b','Id',NULL,'0','0','6','13c50d82-edd6-43f9-abe7-16c3ecb659ba',1,1,0,0),  ('f73f0839-ad2c-4dad-94bf-e65c2e62e9b5','TemplateStr',NULL,'0','0','0','13c50d82-edd6-43f9-abe7-16c3ecb659ba',1,0,0,0),  ('c7dbcef8-8db9-4431-bc6e-81ebab398193','BuildPath',NULL,'0','0','0','13c50d82-edd6-43f9-abe7-16c3ecb659ba',1,0,0,0),  ('c46e77d0-7953-4fed-a946-6121edf912d2','Name',NULL,'0','0','0','13c50d82-edd6-43f9-abe7-16c3ecb659ba',1,0,0,0),  ('a7defb88-155a-4489-9f2e-aea66f33fac4','Remarks',NULL,'0','0','0','13c50d82-edd6-43f9-abe7-16c3ecb659ba',1,0,0,0) ;SELECT LAST_INSERT_ROWID();

===============================

2024-03-30 13:30:27.512 +08:00 [DBG] =========Yi-SQL耗时1.9936毫秒=====
2024-03-30 13:30:27.513 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.CodeGenService.PostCodeBuildWebAsync (Yi.Framework.CodeGen.Application) in 111.6915ms
2024-03-30 13:30:27.513 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.CodeGenService.PostCodeBuildWebAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:27.532 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:27.532 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-03-30 13:30:27.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 13:30:27.533 +08:00 [DBG] =========Yi-SQL耗时0.1765毫秒=====
2024-03-30 13:30:27.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`Description`,`ConcurrencyStamp` FROM `YiTable`   WHERE ( 1 = 1 )    LIMIT 0,10
===============================

2024-03-30 13:30:27.533 +08:00 [DBG] =========Yi-SQL耗时0.0958毫秒=====
2024-03-30 13:30:27.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 13:30:27.534 +08:00 [DBG] =========Yi-SQL耗时0.1015毫秒=====
2024-03-30 13:30:27.543 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:30:27.543 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 11.228ms
2024-03-30 13:30:27.543 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:33.407 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:33.407 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-03-30 13:30:33.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 13:30:33.409 +08:00 [DBG] =========Yi-SQL耗时0.2404毫秒=====
2024-03-30 13:30:33.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`Description`,`ConcurrencyStamp` FROM `YiTable`   WHERE ( 1 = 1 )    LIMIT 10,10
===============================

2024-03-30 13:30:33.409 +08:00 [DBG] =========Yi-SQL耗时0.1142毫秒=====
2024-03-30 13:30:33.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 13:30:33.410 +08:00 [DBG] =========Yi-SQL耗时0.14毫秒=====
2024-03-30 13:30:33.411 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:30:33.411 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 3.9687ms
2024-03-30 13:30:33.411 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:34.158 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:34.158 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-03-30 13:30:34.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 13:30:34.160 +08:00 [DBG] =========Yi-SQL耗时0.2331毫秒=====
2024-03-30 13:30:34.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`Description`,`ConcurrencyStamp` FROM `YiTable`   WHERE ( 1 = 1 )    LIMIT 20,10
===============================

2024-03-30 13:30:34.160 +08:00 [DBG] =========Yi-SQL耗时0.1185毫秒=====
2024-03-30 13:30:34.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 13:30:34.161 +08:00 [DBG] =========Yi-SQL耗时0.1309毫秒=====
2024-03-30 13:30:34.162 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:30:34.162 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 4.1294ms
2024-03-30 13:30:34.162 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:35.630 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:35.630 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-03-30 13:30:35.632 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 13:30:35.632 +08:00 [DBG] =========Yi-SQL耗时0.3401毫秒=====
2024-03-30 13:30:35.632 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`Description`,`ConcurrencyStamp` FROM `YiTable`   WHERE ( 1 = 1 )    LIMIT 30,10
===============================

2024-03-30 13:30:35.632 +08:00 [DBG] =========Yi-SQL耗时0.1398毫秒=====
2024-03-30 13:30:35.633 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 13:30:35.633 +08:00 [DBG] =========Yi-SQL耗时0.1106毫秒=====
2024-03-30 13:30:35.634 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:30:35.634 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 4.2298ms
2024-03-30 13:30:35.634 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:36.061 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:36.061 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-03-30 13:30:36.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 13:30:36.062 +08:00 [DBG] =========Yi-SQL耗时0.2938毫秒=====
2024-03-30 13:30:36.063 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`Description`,`ConcurrencyStamp` FROM `YiTable`   WHERE ( 1 = 1 )    LIMIT 40,10
===============================

2024-03-30 13:30:36.063 +08:00 [DBG] =========Yi-SQL耗时0.1079毫秒=====
2024-03-30 13:30:36.063 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 13:30:36.063 +08:00 [DBG] =========Yi-SQL耗时0.122毫秒=====
2024-03-30 13:30:36.064 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:30:36.064 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 2.8804ms
2024-03-30 13:30:36.064 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:39.079 +08:00 [INF] Executing endpoint 'Yi.Framework.Bbs.Application.Services.Forum.PlateService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-03-30 13:30:39.082 +08:00 [INF] Route matched with {action = "GetList", controller = "Plate", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Bbs.Application.Contracts.Dtos.Plate.PlateGetListOutputDto]] GetListAsync(Yi.Framework.Bbs.Application.Contracts.Dtos.Plate.PlateGetListInputVo) on controller Yi.Framework.Bbs.Application.Services.Forum.PlateService (Yi.Framework.Bbs.Application).
2024-03-30 13:30:39.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `Id`,`Code`,`Name`,`Logo`,`Introduction`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`IsDisableCreateDiscuss` FROM `Plate`  WHERE ( `IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:30:39.091 +08:00 [DBG] =========Yi-SQL耗时0.5062毫秒=====
2024-03-30 13:30:39.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Code`,`Name`,`Logo`,`Introduction`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`IsDisableCreateDiscuss` FROM `Plate`   WHERE ( `IsDeleted` = 0 )  ORDER BY `OrderNum` DESC LIMIT 0,10
===============================

2024-03-30 13:30:39.091 +08:00 [DBG] =========Yi-SQL耗时0.182毫秒=====
2024-03-30 13:30:39.096 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Bbs.Application.Contracts.Dtos.Plate.PlateGetListOutputDto, Yi.Framework.Bbs.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:30:39.100 +08:00 [INF] Executed action Yi.Framework.Bbs.Application.Services.Forum.PlateService.GetListAsync (Yi.Framework.Bbs.Application) in 18.5651ms
2024-03-30 13:30:39.100 +08:00 [INF] Executed endpoint 'Yi.Framework.Bbs.Application.Services.Forum.PlateService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-03-30 13:30:40.690 +08:00 [INF] Executing endpoint 'Yi.Framework.Bbs.Application.Services.Forum.ArticleService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-03-30 13:30:40.692 +08:00 [INF] Route matched with {action = "GetList", controller = "Article", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Bbs.Application.Contracts.Dtos.Article.ArticleGetListOutputDto]] GetListAsync(Yi.Framework.Bbs.Application.Contracts.Dtos.Article.ArticleGetListInputVo) on controller Yi.Framework.Bbs.Application.Services.Forum.ArticleService (Yi.Framework.Bbs.Application).
2024-03-30 13:30:40.730 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `Article`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:30:40.731 +08:00 [DBG] =========Yi-SQL耗时0.3133毫秒=====
2024-03-30 13:30:40.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Content`,`Name`,`DiscussId`,`ParentId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum` FROM `Article`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 13:30:40.731 +08:00 [DBG] =========Yi-SQL耗时0.0991毫秒=====
2024-03-30 13:30:40.733 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Bbs.Application.Contracts.Dtos.Article.ArticleGetListOutputDto, Yi.Framework.Bbs.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:30:40.734 +08:00 [INF] Executed action Yi.Framework.Bbs.Application.Services.Forum.ArticleService.GetListAsync (Yi.Framework.Bbs.Application) in 42.0841ms
2024-03-30 13:30:40.734 +08:00 [INF] Executed endpoint 'Yi.Framework.Bbs.Application.Services.Forum.ArticleService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-03-30 13:30:41.783 +08:00 [INF] Executing endpoint 'Yi.Framework.Bbs.Application.Services.Forum.PlateService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-03-30 13:30:41.783 +08:00 [INF] Route matched with {action = "GetList", controller = "Plate", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Bbs.Application.Contracts.Dtos.Plate.PlateGetListOutputDto]] GetListAsync(Yi.Framework.Bbs.Application.Contracts.Dtos.Plate.PlateGetListInputVo) on controller Yi.Framework.Bbs.Application.Services.Forum.PlateService (Yi.Framework.Bbs.Application).
2024-03-30 13:30:41.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `Id`,`Code`,`Name`,`Logo`,`Introduction`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`IsDisableCreateDiscuss` FROM `Plate`  WHERE ( `IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:30:41.785 +08:00 [DBG] =========Yi-SQL耗时0.3268毫秒=====
2024-03-30 13:30:41.786 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Code`,`Name`,`Logo`,`Introduction`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`IsDisableCreateDiscuss` FROM `Plate`   WHERE ( `IsDeleted` = 0 )  ORDER BY `OrderNum` DESC LIMIT 0,10
===============================

2024-03-30 13:30:41.786 +08:00 [DBG] =========Yi-SQL耗时0.5784毫秒=====
2024-03-30 13:30:41.787 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Bbs.Application.Contracts.Dtos.Plate.PlateGetListOutputDto, Yi.Framework.Bbs.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:30:41.787 +08:00 [INF] Executed action Yi.Framework.Bbs.Application.Services.Forum.PlateService.GetListAsync (Yi.Framework.Bbs.Application) in 4.1474ms
2024-03-30 13:30:41.787 +08:00 [INF] Executed endpoint 'Yi.Framework.Bbs.Application.Services.Forum.PlateService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-03-30 13:30:51.649 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:51.649 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-03-30 13:30:51.650 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 13:30:51.650 +08:00 [DBG] =========Yi-SQL耗时0.3009毫秒=====
2024-03-30 13:30:51.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`Description`,`ConcurrencyStamp` FROM `YiTable`   WHERE ( 1 = 1 )    LIMIT 0,10
===============================

2024-03-30 13:30:51.651 +08:00 [DBG] =========Yi-SQL耗时0.1461毫秒=====
2024-03-30 13:30:51.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 13:30:51.651 +08:00 [DBG] =========Yi-SQL耗时0.1388毫秒=====
2024-03-30 13:30:51.653 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:30:51.654 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 4.7763ms
2024-03-30 13:30:51.654 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:52.517 +08:00 [INF] Executing endpoint 'Yi.Framework.Bbs.Application.Services.Forum.ArticleService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-03-30 13:30:52.517 +08:00 [INF] Route matched with {action = "GetList", controller = "Article", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Bbs.Application.Contracts.Dtos.Article.ArticleGetListOutputDto]] GetListAsync(Yi.Framework.Bbs.Application.Contracts.Dtos.Article.ArticleGetListInputVo) on controller Yi.Framework.Bbs.Application.Services.Forum.ArticleService (Yi.Framework.Bbs.Application).
2024-03-30 13:30:52.523 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `Article`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:30:52.523 +08:00 [DBG] =========Yi-SQL耗时0.2817毫秒=====
2024-03-30 13:30:52.523 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Content`,`Name`,`DiscussId`,`ParentId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum` FROM `Article`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 13:30:52.523 +08:00 [DBG] =========Yi-SQL耗时0.1681毫秒=====
2024-03-30 13:30:52.524 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Bbs.Application.Contracts.Dtos.Article.ArticleGetListOutputDto, Yi.Framework.Bbs.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:30:52.524 +08:00 [INF] Executed action Yi.Framework.Bbs.Application.Services.Forum.ArticleService.GetListAsync (Yi.Framework.Bbs.Application) in 6.4769ms
2024-03-30 13:30:52.524 +08:00 [INF] Executed endpoint 'Yi.Framework.Bbs.Application.Services.Forum.ArticleService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-03-30 13:30:53.521 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:53.521 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:53.522 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-03-30 13:30:53.522 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-03-30 13:30:53.522 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:53.522 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-03-30 13:30:53.522 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:30:53.523 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 0.5504ms
2024-03-30 13:30:53.523 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:53.523 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 13:30:53.523 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiField`  
===============================

2024-03-30 13:30:53.524 +08:00 [DBG] =========Yi-SQL耗时0.3661毫秒=====
2024-03-30 13:30:53.524 +08:00 [DBG] =========Yi-SQL耗时0.2349毫秒=====
2024-03-30 13:30:53.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`Description`,`ConcurrencyStamp` FROM `YiTable`   WHERE ( 1 = 1 )    LIMIT 0,10
===============================

2024-03-30 13:30:53.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`Description`,`OrderNum`,`Length`,`FieldType`,`TableId`,`IsRequired`,`IsKey`,`IsAutoAdd`,`IsPublic` FROM `YiField`     LIMIT 0,10
===============================

2024-03-30 13:30:53.524 +08:00 [DBG] =========Yi-SQL耗时0.1197毫秒=====
2024-03-30 13:30:53.524 +08:00 [DBG] =========Yi-SQL耗时0.1098毫秒=====
2024-03-30 13:30:53.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 13:30:53.525 +08:00 [DBG] =========Yi-SQL耗时0.167毫秒=====
2024-03-30 13:30:53.528 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:30:53.528 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 6.8696ms
2024-03-30 13:30:53.529 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:53.534 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:30:53.536 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 14.2671ms
2024-03-30 13:30:53.536 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 13:30:54.273 +08:00 [INF] Executing endpoint 'Yi.Framework.Bbs.Application.Services.Forum.ArticleService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-03-30 13:30:54.273 +08:00 [INF] Route matched with {action = "GetList", controller = "Article", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Bbs.Application.Contracts.Dtos.Article.ArticleGetListOutputDto]] GetListAsync(Yi.Framework.Bbs.Application.Contracts.Dtos.Article.ArticleGetListInputVo) on controller Yi.Framework.Bbs.Application.Services.Forum.ArticleService (Yi.Framework.Bbs.Application).
2024-03-30 13:30:54.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `Article`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:30:54.277 +08:00 [DBG] =========Yi-SQL耗时0.2499毫秒=====
2024-03-30 13:30:54.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Content`,`Name`,`DiscussId`,`ParentId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum` FROM `Article`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 13:30:54.277 +08:00 [DBG] =========Yi-SQL耗时0.1521毫秒=====
2024-03-30 13:30:54.278 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Bbs.Application.Contracts.Dtos.Article.ArticleGetListOutputDto, Yi.Framework.Bbs.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:30:54.278 +08:00 [INF] Executed action Yi.Framework.Bbs.Application.Services.Forum.ArticleService.GetListAsync (Yi.Framework.Bbs.Application) in 4.8639ms
2024-03-30 13:30:54.278 +08:00 [INF] Executed endpoint 'Yi.Framework.Bbs.Application.Services.Forum.ArticleService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-03-30 13:31:02.765 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 13:31:02.765 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-03-30 13:31:02.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTenant`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:31:02.769 +08:00 [DBG] =========Yi-SQL耗时0.5125毫秒=====
2024-03-30 13:31:02.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`EntityVersion`,`TenantConnectionString`,`DbType`,`IsDeleted`,`DeleterId`,`DeletionTime`,`LastModificationTime`,`LastModifierId`,`CreationTime`,`CreatorId`,`ConcurrencyStamp` FROM `YiTenant`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 13:31:02.771 +08:00 [DBG] =========Yi-SQL耗时0.9105毫秒=====
2024-03-30 13:31:02.772 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:31:02.772 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 6.3994ms
2024-03-30 13:31:02.772 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 13:31:05.083 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:31:05.083 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:31:05.083 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-03-30 13:31:05.083 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:31:05.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:31:05.085 +08:00 [DBG] =========Yi-SQL耗时0.4333毫秒=====
2024-03-30 13:31:05.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`   WHERE ( `IsDeleted` = 0 )  ORDER BY `OrderNum` ASC LIMIT 0,10
===============================

2024-03-30 13:31:05.086 +08:00 [DBG] =========Yi-SQL耗时0.3469毫秒=====
2024-03-30 13:31:05.086 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:31:05.087 +08:00 [DBG] =========Yi-SQL耗时0.486毫秒=====
2024-03-30 13:31:05.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:31:05.087 +08:00 [DBG] =========Yi-SQL耗时0.3213毫秒=====
2024-03-30 13:31:05.088 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:31:05.088 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:31:05.088 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 4.6818ms
2024-03-30 13:31:05.088 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:31:05.088 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 4.7813ms
2024-03-30 13:31:05.088 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:31:06.487 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:31:06.488 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 13:31:06.490 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `Role`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:31:06.490 +08:00 [DBG] =========Yi-SQL耗时0.2774毫秒=====
2024-03-30 13:31:06.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 13:31:06.491 +08:00 [DBG] =========Yi-SQL耗时0.1625毫秒=====
2024-03-30 13:31:06.492 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:31:06.492 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 4.7ms
2024-03-30 13:31:06.492 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:31:09.793 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 13:31:09.793 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:31:09.793 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 13:31:09.795 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`OrderNum`,`State`,`Remark`,`ListClass`,`CssClass`,`DictType`,`DictLabel`,`DictValue`,`IsDefault`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime` FROM `Dictionary`  WHERE (( `DictType` = N'sys_show_hide' ) AND ( `State` = 1 ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:31:09.795 +08:00 [DBG] =========Yi-SQL耗时0.2967毫秒=====
2024-03-30 13:31:09.796 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:31:09.796 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 2.3407ms
2024-03-30 13:31:09.796 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 13:31:09.796 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:31:09.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 13:31:09.804 +08:00 [DBG] =========Yi-SQL耗时1.2397毫秒=====
2024-03-30 13:31:09.824 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:31:09.839 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 42.586ms
2024-03-30 13:31:09.839 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:31:39.389 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:31:39.389 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-03-30 13:31:39.391 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:31:39.391 +08:00 [DBG] =========Yi-SQL耗时0.29毫秒=====
2024-03-30 13:31:39.391 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`   WHERE ( `IsDeleted` = 0 )  ORDER BY `OrderNum` ASC LIMIT 0,10
===============================

2024-03-30 13:31:39.391 +08:00 [DBG] =========Yi-SQL耗时0.1771毫秒=====
2024-03-30 13:31:39.393 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:31:39.393 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 3.8759ms
2024-03-30 13:31:39.393 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:31:42.606 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:31:42.609 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-03-30 13:31:42.617 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `Post`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:31:42.617 +08:00 [DBG] =========Yi-SQL耗时0.2629毫秒=====
2024-03-30 13:31:42.618 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`PostCode`,`PostName`,`Remark` FROM `Post`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 13:31:42.618 +08:00 [DBG] =========Yi-SQL耗时0.1368毫秒=====
2024-03-30 13:31:42.631 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:31:42.633 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 24.7297ms
2024-03-30 13:31:42.634 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:31:54.701 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:31:54.704 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-03-30 13:31:54.713 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `DictionaryType`  WHERE ( `State` = 1 )  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:31:54.713 +08:00 [DBG] =========Yi-SQL耗时0.2516毫秒=====
2024-03-30 13:31:54.713 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`OrderNum`,`State`,`DictName`,`DictType`,`Remark`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`ConcurrencyStamp` FROM `DictionaryType`   WHERE ( `State` = 1 )  AND ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 13:31:54.713 +08:00 [DBG] =========Yi-SQL耗时0.141毫秒=====
2024-03-30 13:31:54.733 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:31:54.753 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 48.9223ms
2024-03-30 13:31:54.753 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:31:58.466 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:31:58.466 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-03-30 13:31:58.468 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `DictionaryType`  WHERE ( `State` = 1 )  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:31:58.468 +08:00 [DBG] =========Yi-SQL耗时0.3329毫秒=====
2024-03-30 13:31:58.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`OrderNum`,`State`,`DictName`,`DictType`,`Remark`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`ConcurrencyStamp` FROM `DictionaryType`   WHERE ( `State` = 1 )  AND ( `IsDeleted` = 0 )   LIMIT 10,10
===============================

2024-03-30 13:31:58.469 +08:00 [DBG] =========Yi-SQL耗时0.1524毫秒=====
2024-03-30 13:31:58.469 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:31:58.470 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 3.2151ms
2024-03-30 13:31:58.470 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:32:01.343 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:32:01.346 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-03-30 13:32:01.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `Config`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:32:01.354 +08:00 [DBG] =========Yi-SQL耗时0.3965毫秒=====
2024-03-30 13:32:01.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`ConfigName`,`ConfigKey`,`ConfigValue`,`ConfigType`,`OrderNum`,`Remark`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime` FROM `Config`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 13:32:01.355 +08:00 [DBG] =========Yi-SQL耗时0.2128毫秒=====
2024-03-30 13:32:01.362 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:32:01.367 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 20.3012ms
2024-03-30 13:32:01.367 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:32:11.467 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:32:11.471 +08:00 [INF] Route matched with {action = "GetList", controller = "Notice", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListInput) on controller Yi.Framework.Rbac.Application.Services.NoticeService (Yi.Framework.Rbac.Application).
2024-03-30 13:32:11.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `Notice`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:32:11.482 +08:00 [DBG] =========Yi-SQL耗时0.3118毫秒=====
2024-03-30 13:32:11.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Title`,`Type`,`Content`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `Notice`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 13:32:11.482 +08:00 [DBG] =========Yi-SQL耗时0.1855毫秒=====
2024-03-30 13:32:11.485 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:32:11.488 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application) in 17.0102ms
2024-03-30 13:32:11.488 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:32:32.726 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:32:32.726 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:32:32.726 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:32:32.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 13:32:32.728 +08:00 [DBG] =========Yi-SQL耗时0.3756毫秒=====
2024-03-30 13:32:32.729 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 13:32:32.739 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:32:32.749 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 23.0583ms
2024-03-30 13:32:32.750 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:32:32.756 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:32:32.758 +08:00 [INF] Route matched with {action = "GetListRoleId", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:32:32.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu` `m`  WHERE (EXISTS ( SELECT * FROM `RoleMenu` `rm`  WHERE (( `RoleId` = N'f7324be2-5f20-cd42-e7f6-3a119a14c16d' ) AND ( `MenuId` = `m`.`Id` )) ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:32:32.770 +08:00 [DBG] =========Yi-SQL耗时0.6294毫秒=====
2024-03-30 13:32:32.771 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:32:32.771 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application) in 12.6852ms
2024-03-30 13:32:32.771 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:32:32.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`  WHERE `Id` = N'f7324be2-5f20-cd42-e7f6-3a119a14c16d'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:32:32.788 +08:00 [DBG] =========Yi-SQL耗时0.2558毫秒=====
2024-03-30 13:32:32.795 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-03-30 13:32:32.796 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 67.6157ms
2024-03-30 13:32:32.796 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:06.666 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:06.666 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:06.672 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:47:06.703 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:47:06.714 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 13:47:06.737 +08:00 [DBG] =========Yi-SQL耗时22.3015毫秒=====
2024-03-30 13:47:06.765 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE `Id` = N'f4d699b2-f11c-be72-37b4-3a119a14c18d'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:47:06.766 +08:00 [DBG] =========Yi-SQL耗时0.4563毫秒=====
2024-03-30 13:47:06.771 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:47:06.826 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 153.0335ms
2024-03-30 13:47:06.826 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:06.845 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-03-30 13:47:06.853 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 149.6511ms
2024-03-30 13:47:06.853 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:22.418 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:47:22.420 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:22.423 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:47:22.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE `Id` = N'f4d699b2-f11c-be72-37b4-3a119a14c18d'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:47:22.469 +08:00 [DBG] =========Yi-SQL耗时0.1312毫秒=====
2024-03-30 13:47:22.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE `Menu`  SET
           `IsDeleted`=0,`CreationTime`=CAST('2024-03-29 09:51:46.574' AS DATETIME),`CreatorId`=null,`LastModifierId`=N'd1c28168-8d08-38a8-2758-3a119a14c17a',`LastModificationTime`=CAST('2024-03-30 13:47:22.505' AS DATETIME),`OrderNum`=91,`State`=1,`MenuName`=N'BBS',`MenuType`=0,`PermissionCode`=null,`ParentId`=N'00000000-0000-0000-0000-000000000000',`MenuIcon`=N'monitor',`Router`=N'/bbs',`IsLink`=0,`IsCache`=0,`IsShow`=1,`Remark`=null,`Component`=null,`Query`=null  WHERE `Id`=N'f4d699b2-f11c-be72-37b4-3a119a14c18d'
===============================

2024-03-30 13:47:22.528 +08:00 [DBG] =========Yi-SQL耗时4.3411毫秒=====
2024-03-30 13:47:22.533 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-03-30 13:47:22.534 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 111.121ms
2024-03-30 13:47:22.534 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:22.560 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:22.560 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:47:22.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 13:47:22.563 +08:00 [DBG] =========Yi-SQL耗时0.7731毫秒=====
2024-03-30 13:47:22.614 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:47:22.624 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 63.9941ms
2024-03-30 13:47:22.624 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:28.254 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:28.257 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:47:28.258 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:28.258 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:47:28.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE `Id` = N'b604b926-c656-575e-ebf0-3a119a14c18e'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:47:28.259 +08:00 [DBG] =========Yi-SQL耗时0.3303毫秒=====
2024-03-30 13:47:28.260 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 13:47:28.260 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-03-30 13:47:28.260 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 3.6149ms
2024-03-30 13:47:28.260 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:28.262 +08:00 [DBG] =========Yi-SQL耗时2.7343毫秒=====
2024-03-30 13:47:28.291 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:47:28.296 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 37.7436ms
2024-03-30 13:47:28.296 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:37.492 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:47:37.493 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:37.493 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:47:37.497 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE `Id` = N'b604b926-c656-575e-ebf0-3a119a14c18e'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:47:37.497 +08:00 [DBG] =========Yi-SQL耗时0.1511毫秒=====
2024-03-30 13:47:37.498 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE `Menu`  SET
           `IsDeleted`=0,`CreationTime`=CAST('2024-03-29 09:51:46.574' AS DATETIME),`CreatorId`=null,`LastModifierId`=N'd1c28168-8d08-38a8-2758-3a119a14c17a',`LastModificationTime`=CAST('2024-03-30 13:47:37.498' AS DATETIME),`OrderNum`=100,`State`=1,`MenuName`=N'板块管理',`MenuType`=1,`PermissionCode`=N'bbs:plate:list',`ParentId`=N'f4d699b2-f11c-be72-37b4-3a119a14c18d',`MenuIcon`=N'component',`Router`=N'plate',`IsLink`=0,`IsCache`=1,`IsShow`=1,`Remark`=null,`Component`=N'bbs/plate/index',`Query`=null  WHERE `Id`=N'b604b926-c656-575e-ebf0-3a119a14c18e'
===============================

2024-03-30 13:47:37.499 +08:00 [DBG] =========Yi-SQL耗时1.4509毫秒=====
2024-03-30 13:47:37.500 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-03-30 13:47:37.500 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 6.4647ms
2024-03-30 13:47:37.500 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:37.528 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:37.528 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:47:37.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 13:47:37.530 +08:00 [DBG] =========Yi-SQL耗时0.5041毫秒=====
2024-03-30 13:47:37.543 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:47:37.549 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 20.9182ms
2024-03-30 13:47:37.549 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:38.843 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:38.843 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:47:38.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 13:47:38.846 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:38.846 +08:00 [DBG] =========Yi-SQL耗时0.3462毫秒=====
2024-03-30 13:47:38.846 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:47:38.848 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE `Id` = N'd7899653-24e3-6c63-4e08-3a119a14c18e'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:47:38.848 +08:00 [DBG] =========Yi-SQL耗时0.3653毫秒=====
2024-03-30 13:47:38.849 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-03-30 13:47:38.849 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 2.526ms
2024-03-30 13:47:38.849 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:38.863 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:47:38.868 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 24.16ms
2024-03-30 13:47:38.868 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:41.004 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:47:41.004 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:41.005 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:47:41.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE `Id` = N'd7899653-24e3-6c63-4e08-3a119a14c18e'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:47:41.006 +08:00 [DBG] =========Yi-SQL耗时0.146毫秒=====
2024-03-30 13:47:41.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE `Menu`  SET
           `IsDeleted`=0,`CreationTime`=CAST('2024-03-29 09:51:46.574' AS DATETIME),`CreatorId`=null,`LastModifierId`=N'd1c28168-8d08-38a8-2758-3a119a14c17a',`LastModificationTime`=CAST('2024-03-30 13:47:41.007' AS DATETIME),`OrderNum`=99,`State`=1,`MenuName`=N'文章管理',`MenuType`=1,`PermissionCode`=N'bbs:article:list',`ParentId`=N'f4d699b2-f11c-be72-37b4-3a119a14c18d',`MenuIcon`=N'documentation',`Router`=N'article',`IsLink`=0,`IsCache`=1,`IsShow`=1,`Remark`=null,`Component`=N'bbs/article/index',`Query`=null  WHERE `Id`=N'd7899653-24e3-6c63-4e08-3a119a14c18e'
===============================

2024-03-30 13:47:41.008 +08:00 [DBG] =========Yi-SQL耗时1.1058毫秒=====
2024-03-30 13:47:41.009 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-03-30 13:47:41.009 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 4.219ms
2024-03-30 13:47:41.009 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:41.037 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:41.037 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:47:41.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 13:47:41.039 +08:00 [DBG] =========Yi-SQL耗时0.4367毫秒=====
2024-03-30 13:47:41.053 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:47:41.059 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 21.6062ms
2024-03-30 13:47:41.060 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:47:45.680 +08:00 [INF] Executing endpoint 'Yi.Framework.Bbs.Application.Services.Forum.PlateService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-03-30 13:47:45.681 +08:00 [INF] Route matched with {action = "GetList", controller = "Plate", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Bbs.Application.Contracts.Dtos.Plate.PlateGetListOutputDto]] GetListAsync(Yi.Framework.Bbs.Application.Contracts.Dtos.Plate.PlateGetListInputVo) on controller Yi.Framework.Bbs.Application.Services.Forum.PlateService (Yi.Framework.Bbs.Application).
2024-03-30 13:47:45.687 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `Id`,`Code`,`Name`,`Logo`,`Introduction`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`IsDisableCreateDiscuss` FROM `Plate`  WHERE ( `IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:47:45.688 +08:00 [DBG] =========Yi-SQL耗时0.9698毫秒=====
2024-03-30 13:47:45.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Code`,`Name`,`Logo`,`Introduction`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`IsDisableCreateDiscuss` FROM `Plate`   WHERE ( `IsDeleted` = 0 )  ORDER BY `OrderNum` DESC LIMIT 0,10
===============================

2024-03-30 13:47:45.691 +08:00 [DBG] =========Yi-SQL耗时2.1122毫秒=====
2024-03-30 13:47:45.692 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Bbs.Application.Contracts.Dtos.Plate.PlateGetListOutputDto, Yi.Framework.Bbs.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:47:45.692 +08:00 [INF] Executed action Yi.Framework.Bbs.Application.Services.Forum.PlateService.GetListAsync (Yi.Framework.Bbs.Application) in 11.1189ms
2024-03-30 13:47:45.692 +08:00 [INF] Executed endpoint 'Yi.Framework.Bbs.Application.Services.Forum.PlateService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-03-30 13:47:48.067 +08:00 [INF] Executing endpoint 'Yi.Framework.Bbs.Application.Services.Forum.ArticleService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-03-30 13:47:48.067 +08:00 [INF] Route matched with {action = "GetList", controller = "Article", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Bbs.Application.Contracts.Dtos.Article.ArticleGetListOutputDto]] GetListAsync(Yi.Framework.Bbs.Application.Contracts.Dtos.Article.ArticleGetListInputVo) on controller Yi.Framework.Bbs.Application.Services.Forum.ArticleService (Yi.Framework.Bbs.Application).
2024-03-30 13:47:48.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `Article`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:47:48.087 +08:00 [DBG] =========Yi-SQL耗时0.3172毫秒=====
2024-03-30 13:47:48.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Content`,`Name`,`DiscussId`,`ParentId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum` FROM `Article`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 13:47:48.088 +08:00 [DBG] =========Yi-SQL耗时0.2314毫秒=====
2024-03-30 13:47:48.088 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Bbs.Application.Contracts.Dtos.Article.ArticleGetListOutputDto, Yi.Framework.Bbs.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:47:48.088 +08:00 [INF] Executed action Yi.Framework.Bbs.Application.Services.Forum.ArticleService.GetListAsync (Yi.Framework.Bbs.Application) in 20.9509ms
2024-03-30 13:47:48.088 +08:00 [INF] Executed endpoint 'Yi.Framework.Bbs.Application.Services.Forum.ArticleService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-03-30 13:47:50.379 +08:00 [INF] Executing endpoint 'Yi.Framework.Bbs.Application.Services.Forum.PlateService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-03-30 13:47:50.379 +08:00 [INF] Route matched with {action = "GetList", controller = "Plate", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Bbs.Application.Contracts.Dtos.Plate.PlateGetListOutputDto]] GetListAsync(Yi.Framework.Bbs.Application.Contracts.Dtos.Plate.PlateGetListInputVo) on controller Yi.Framework.Bbs.Application.Services.Forum.PlateService (Yi.Framework.Bbs.Application).
2024-03-30 13:47:50.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `Id`,`Code`,`Name`,`Logo`,`Introduction`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`IsDisableCreateDiscuss` FROM `Plate`  WHERE ( `IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:47:50.382 +08:00 [DBG] =========Yi-SQL耗时0.3594毫秒=====
2024-03-30 13:47:50.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Code`,`Name`,`Logo`,`Introduction`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`IsDisableCreateDiscuss` FROM `Plate`   WHERE ( `IsDeleted` = 0 )  ORDER BY `OrderNum` DESC LIMIT 0,10
===============================

2024-03-30 13:47:50.383 +08:00 [DBG] =========Yi-SQL耗时0.2763毫秒=====
2024-03-30 13:47:50.383 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Bbs.Application.Contracts.Dtos.Plate.PlateGetListOutputDto, Yi.Framework.Bbs.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:47:50.384 +08:00 [INF] Executed action Yi.Framework.Bbs.Application.Services.Forum.PlateService.GetListAsync (Yi.Framework.Bbs.Application) in 4.2489ms
2024-03-30 13:47:50.384 +08:00 [INF] Executed endpoint 'Yi.Framework.Bbs.Application.Services.Forum.PlateService.GetListAsync (Yi.Framework.Bbs.Application)'
2024-03-30 13:48:34.670 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:48:34.670 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:48:34.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 13:48:34.673 +08:00 [DBG] =========Yi-SQL耗时0.7557毫秒=====
2024-03-30 13:48:34.674 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:48:34.674 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:48:34.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE `Id` = N'7d7bdc79-0d6c-14c6-270a-3a119a14c155'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:48:34.675 +08:00 [DBG] =========Yi-SQL耗时0.2738毫秒=====
2024-03-30 13:48:34.676 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-03-30 13:48:34.676 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 2.2722ms
2024-03-30 13:48:34.676 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:48:34.685 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:48:34.692 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 21.8064ms
2024-03-30 13:48:34.692 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:48:40.652 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:48:40.653 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:48:40.653 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:48:40.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE `Id` = N'7d7bdc79-0d6c-14c6-270a-3a119a14c155'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:48:40.655 +08:00 [DBG] =========Yi-SQL耗时0.1411毫秒=====
2024-03-30 13:48:40.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE `Menu`  SET
           `IsDeleted`=0,`CreationTime`=CAST('2024-03-29 09:51:46.517' AS DATETIME),`CreatorId`=null,`LastModifierId`=N'd1c28168-8d08-38a8-2758-3a119a14c17a',`LastModificationTime`=CAST('2024-03-30 13:48:40.656' AS DATETIME),`OrderNum`=96,`State`=0,`MenuName`=N'ERP(待更新)',`MenuType`=0,`PermissionCode`=null,`ParentId`=N'00000000-0000-0000-0000-000000000000',`MenuIcon`=N'international',`Router`=N'/erp',`IsLink`=0,`IsCache`=0,`IsShow`=0,`Remark`=null,`Component`=null,`Query`=null  WHERE `Id`=N'7d7bdc79-0d6c-14c6-270a-3a119a14c155'
===============================

2024-03-30 13:48:40.657 +08:00 [DBG] =========Yi-SQL耗时1.527毫秒=====
2024-03-30 13:48:40.658 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-03-30 13:48:40.658 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 4.6651ms
2024-03-30 13:48:40.658 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:48:40.687 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:48:40.687 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:48:40.688 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 13:48:40.689 +08:00 [DBG] =========Yi-SQL耗时0.3749毫秒=====
2024-03-30 13:48:40.704 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:48:40.711 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 24.4119ms
2024-03-30 13:48:40.711 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:48:52.620 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:48:52.621 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:48:52.622 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:48:52.622 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:48:52.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 13:48:52.623 +08:00 [DBG] =========Yi-SQL耗时0.5627毫秒=====
2024-03-30 13:48:52.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE `Id` = N'7d7bdc79-0d6c-14c6-270a-3a119a14c155'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:48:52.623 +08:00 [DBG] =========Yi-SQL耗时0.2038毫秒=====
2024-03-30 13:48:52.623 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-03-30 13:48:52.623 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 1.6363ms
2024-03-30 13:48:52.623 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:48:52.636 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:48:52.640 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 19.6499ms
2024-03-30 13:48:52.640 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:49:10.019 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:49:10.027 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:49:10.027 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:49:10.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE `Id` = N'7d7bdc79-0d6c-14c6-270a-3a119a14c155'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:49:10.029 +08:00 [DBG] =========Yi-SQL耗时0.177毫秒=====
2024-03-30 13:49:10.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE `Menu`  SET
           `IsDeleted`=0,`CreationTime`=CAST('2024-03-29 09:51:46.517' AS DATETIME),`CreatorId`=null,`LastModifierId`=N'd1c28168-8d08-38a8-2758-3a119a14c17a',`LastModificationTime`=CAST('2024-03-30 13:49:10.030' AS DATETIME),`OrderNum`=96,`State`=0,`MenuName`=N'ERP(待更新)',`MenuType`=0,`PermissionCode`=null,`ParentId`=N'00000000-0000-0000-0000-000000000000',`MenuIcon`=N'international',`Router`=N'/erp',`IsLink`=0,`IsCache`=0,`IsShow`=0,`Remark`=null,`Component`=null,`Query`=null  WHERE `Id`=N'7d7bdc79-0d6c-14c6-270a-3a119a14c155'
===============================

2024-03-30 13:49:10.031 +08:00 [DBG] =========Yi-SQL耗时1.2178毫秒=====
2024-03-30 13:49:10.032 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-03-30 13:49:10.032 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 5.4876ms
2024-03-30 13:49:10.032 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:49:10.055 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:49:10.055 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 13:49:10.058 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 13:49:10.058 +08:00 [DBG] =========Yi-SQL耗时0.5834毫秒=====
2024-03-30 13:49:10.139 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:49:10.168 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 112.3597ms
2024-03-30 13:49:10.168 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:49:17.431 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:49:17.431 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:49:17.431 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-03-30 13:49:17.432 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 13:49:17.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `Post`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:49:17.434 +08:00 [DBG] =========Yi-SQL耗时0.2119毫秒=====
2024-03-30 13:49:17.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`PostCode`,`PostName`,`Remark` FROM `Post`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 13:49:17.435 +08:00 [DBG] =========Yi-SQL耗时0.1281毫秒=====
2024-03-30 13:49:17.436 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:49:17.436 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 5.0696ms
2024-03-30 13:49:17.436 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:49:17.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `Role`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:49:17.439 +08:00 [DBG] =========Yi-SQL耗时0.4036毫秒=====
2024-03-30 13:49:17.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 13:49:17.439 +08:00 [DBG] =========Yi-SQL耗时0.1579毫秒=====
2024-03-30 13:49:17.440 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:49:17.441 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 8.6586ms
2024-03-30 13:49:17.441 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:50:17.004 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:50:17.004 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:50:17.007 +08:00 [INF] Route matched with {action = "Create", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto] CreateAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserCreateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:50:17.176 +08:00 [WRN] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "密码为空，添加失败！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-03-30 13:50:17.176 +08:00 [WRN] 密码为空，添加失败！
Volo.Abp.UserFriendlyException: 密码为空，添加失败！
   at Yi.Framework.Rbac.Application.Services.System.UserService.CreateAsync(UserCreateInputVo input) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\System\UserService.cs:line 96
   at Castle.DynamicProxy.AsyncInterceptorBase.ProceedAsynchronous[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo)
   at Volo.Abp.Castle.DynamicProxy.CastleAbpMethodInvocationAdapterWithReturnValue`1.ProceedAsync()
   at Volo.Abp.GlobalFeatures.GlobalFeatureInterceptor.InterceptAsync(IAbpMethodInvocation invocation)
   at Volo.Abp.Castle.DynamicProxy.CastleAsyncAbpInterceptorAdapter`1.InterceptAsync[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3 proceed)
   at Castle.DynamicProxy.AsyncInterceptorBase.ProceedAsynchronous[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo)
   at Volo.Abp.Castle.DynamicProxy.CastleAbpMethodInvocationAdapterWithReturnValue`1.ProceedAsync()
   at Volo.Abp.Validation.ValidationInterceptor.InterceptAsync(IAbpMethodInvocation invocation)
   at Volo.Abp.Castle.DynamicProxy.CastleAsyncAbpInterceptorAdapter`1.InterceptAsync[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3 proceed)
   at Castle.DynamicProxy.AsyncInterceptorBase.ProceedAsynchronous[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo)
   at Volo.Abp.Castle.DynamicProxy.CastleAbpMethodInvocationAdapterWithReturnValue`1.ProceedAsync()
   at Volo.Abp.Auditing.AuditingInterceptor.InterceptAsync(IAbpMethodInvocation invocation)
   at Volo.Abp.Castle.DynamicProxy.CastleAsyncAbpInterceptorAdapter`1.InterceptAsync[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3 proceed)
   at Castle.DynamicProxy.AsyncInterceptorBase.ProceedAsynchronous[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo)
   at Volo.Abp.Castle.DynamicProxy.CastleAbpMethodInvocationAdapterWithReturnValue`1.ProceedAsync()
   at Volo.Abp.Uow.UnitOfWorkInterceptor.InterceptAsync(IAbpMethodInvocation invocation)
   at Volo.Abp.Castle.DynamicProxy.CastleAsyncAbpInterceptorAdapter`1.InterceptAsync[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3 proceed)
   at lambda_method1958(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-03-30 13:50:17.176 +08:00 [WRN] Code:
2024-03-30 13:50:17.176 +08:00 [WRN] Details:
2024-03-30 13:50:17.179 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-03-30 13:50:17.180 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.CreateAsync (Yi.Framework.Rbac.Application) in 172.8365ms
2024-03-30 13:50:17.180 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:50:23.627 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:50:23.628 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:50:23.628 +08:00 [INF] Route matched with {action = "Create", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto] CreateAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserCreateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:50:23.635 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `User`   WHERE  (N'006238' = `UserName`)   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:50:23.635 +08:00 [DBG] =========Yi-SQL耗时0.218毫秒=====
2024-03-30 13:50:23.664 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO `User`  
           (`Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`)
     VALUES
           (N'8ddb5f70-44a8-7f10-2635-3a11a01593a3',0,null,null,N'006238',N'TNYc_6DDC9Qy6TlmgAmsEAGG2_XcP9qUsqRascOb_0pcbDVmxNn5Ed3bmhQrhpaXprcda7w33eGwKH2SVBt3nw',N'6fipj0FMKElEVZJmw4mnwA==',null,N'lwl',null,null,null,null,null,null,2,N'23b716a6-10da-3fe5-7099-3a119a14c114',CAST('2024-03-30 13:50:23.645' AS DATETIME),N'd1c28168-8d08-38a8-2758-3a119a14c17a',null,null,0,1) ;
===============================

2024-03-30 13:50:23.666 +08:00 [DBG] =========Yi-SQL耗时2.1966毫秒=====
2024-03-30 13:50:23.680 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM `UserRole` WHERE  (`UserId` IN ('8ddb5f70-44a8-7f10-2635-3a11a01593a3'))  
===============================

2024-03-30 13:50:23.680 +08:00 [DBG] =========Yi-SQL耗时0.1665毫秒=====
2024-03-30 13:50:23.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO `UserRole`  
           (`Id`,`RoleId`,`UserId`)
     VALUES
           (N'1057a55d-a7dd-4232-4437-3a11a01593c3',N'825a7a31-a28d-0b1e-a7b7-3a119a14c16d',N'8ddb5f70-44a8-7f10-2635-3a11a01593a3') ;
===============================

2024-03-30 13:50:23.684 +08:00 [DBG] =========Yi-SQL耗时0.2408毫秒=====
2024-03-30 13:50:23.687 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM `UserPost` WHERE  (`UserId` IN ('8ddb5f70-44a8-7f10-2635-3a11a01593a3'))  
===============================

2024-03-30 13:50:23.687 +08:00 [DBG] =========Yi-SQL耗时0.1221毫秒=====
2024-03-30 13:50:23.701 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto'.
2024-03-30 13:50:23.734 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:50:23.734 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:50:23.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:50:23.751 +08:00 [DBG] =========Yi-SQL耗时0.7325毫秒=====
2024-03-30 13:50:23.753 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:50:23.754 +08:00 [DBG] =========Yi-SQL耗时1.3703毫秒=====
2024-03-30 13:50:23.755 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:50:23.756 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 21.3567ms
2024-03-30 13:50:23.756 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:50:23.779 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO `OperationLog`  
           (`Id`,`Title`,`OperType`,`RequestMethod`,`OperUser`,`OperIp`,`OperLocation`,`Method`,`RequestParam`,`RequestResult`,`CreationTime`,`CreatorId`)
     VALUES
           (N'28d57f15-d6dc-97e7-74a2-3a11a0159420',N'添加用户',1,N'POST',N'cc',N'127.0.0.1',N'0 内网IP',N'/api/app/user',null,N'{"Name":null,"Age":null,"UserName":"006238","Icon":null,"Nick":"lwl","Email":null,"Ip":null,"Address":null,"Phone":null,"Introduction":null,"Remark":null,"Sex":2,"State":true,"CreationTime":"2024-03-30T13:50:23.6455946+08:00","DeptId":"23b716a6-10da-3fe5-7099-3a119a14c114","Dept":null,"Posts":null,"Roles":null,"Id":"8ddb5f70-44a8-7f10-2635-3a11a01593a3"}',CAST('2024-03-30 13:50:23.777' AS DATETIME),N'd1c28168-8d08-38a8-2758-3a119a14c17a') ;
===============================

2024-03-30 13:50:23.779 +08:00 [DBG] =========Yi-SQL耗时0.3154毫秒=====
2024-03-30 13:50:23.779 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.CreateAsync (Yi.Framework.Rbac.Application) in 150.3219ms
2024-03-30 13:50:23.779 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:50:23.794 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO `BbsUserExtraInfo`  
           (`Id`,`UserId`,`UserLimit`,`Level`,`Money`,`Experience`,`DiscussNumber`,`CommentNumber`,`AgreeNumber`)
     VALUES
           (N'e2ed4b26-c2db-acbb-a140-3a11a0159430',N'8ddb5f70-44a8-7f10-2635-3a11a01593a3',0,1,0,0,0,0,0) ;
===============================

2024-03-30 13:50:23.795 +08:00 [DBG] =========Yi-SQL耗时0.7701毫秒=====
2024-03-30 13:50:30.351 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:50:30.351 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 13:50:30.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:50:30.354 +08:00 [DBG] =========Yi-SQL耗时0.2097毫秒=====
2024-03-30 13:50:30.356 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('23b716a6-10da-3fe5-7099-3a119a14c114','df545dd8-d352-627d-c128-3a119a14c114','4d6f0c6e-6e94-ee17-d74d-3a119a14c115','0e643cc6-5c04-de0a-86a0-3a119a14c115','f292acbd-1d93-d8fc-1d8b-3a119a14c115','42cc6024-4514-844e-2e22-3a119a14c115','087128ef-46b0-cbfc-c205-3a119a14c115','d645f28f-c84b-4a43-4b17-3a119a14c115','1f14df94-f9d6-54b5-4dcf-3a119a14c115','bfaee9a8-9c97-866b-4847-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 13:50:30.356 +08:00 [DBG] =========Yi-SQL耗时0.4846毫秒=====
2024-03-30 13:50:30.357 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND  (IFNULL(`DeptId`,N'00000000-0000-0000-0000-000000000000') IN ('23b716a6-10da-3fe5-7099-3a119a14c114','df545dd8-d352-627d-c128-3a119a14c114','4d6f0c6e-6e94-ee17-d74d-3a119a14c115','0e643cc6-5c04-de0a-86a0-3a119a14c115','f292acbd-1d93-d8fc-1d8b-3a119a14c115','42cc6024-4514-844e-2e22-3a119a14c115','087128ef-46b0-cbfc-c205-3a119a14c115','d645f28f-c84b-4a43-4b17-3a119a14c115','1f14df94-f9d6-54b5-4dcf-3a119a14c115','bfaee9a8-9c97-866b-4847-3a119a14c115'))   AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 13:50:30.357 +08:00 [DBG] =========Yi-SQL耗时0.318毫秒=====
2024-03-30 13:50:30.358 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:50:30.358 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 7.1082ms
2024-03-30 13:50:30.358 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:50:39.225 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:50:39.226 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-03-30 13:50:39.228 +08:00 [INF] Route matched with {action = "PostLogout", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] PostLogout() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 13:50:39.243 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-03-30 13:50:39.244 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application) in 15.3367ms
2024-03-30 13:50:39.244 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-03-30 13:50:39.254 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:50:39.254 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 13:50:39.255 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 13:50:39.255 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 13:50:39.258 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 13:50:39.367 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:50:39.368 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 13:50:39.368 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 13:50:39.369 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 13:50:39.395 +08:00 [INF] 用户cc离开了，当前已连接1个
2024-03-30 13:50:39.396 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 13:50:39.434 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 13:50:39.441 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 13:50:39.584 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:50:39.584 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 13:50:39.584 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 13:50:39.585 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 13:50:39.585 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 13:50:39.684 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:50:39.685 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 13:50:39.685 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 13:50:39.686 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 13:50:39.780 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:50:39.780 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 13:50:39.781 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 13:50:39.783 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-03-30 13:50:39.786 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`EntityVersion`,`TenantConnectionString`,`DbType`,`IsDeleted`,`DeleterId`,`DeletionTime`,`LastModificationTime`,`LastModifierId`,`CreationTime`,`CreatorId`,`ConcurrencyStamp` FROM `YiTenant`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:50:39.786 +08:00 [DBG] =========Yi-SQL耗时0.3027毫秒=====
2024-03-30 13:50:39.787 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 13:50:39.787 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 3.6732ms
2024-03-30 13:50:39.787 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 13:50:39.799 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-03-30 13:50:39.800 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 19.6446ms
2024-03-30 13:50:39.800 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:50:49.221 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:50:49.222 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:50:49.223 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 13:50:49.226 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`   WHERE (( `UserName` = N'006238' ) AND ( `State` = 1 ))  AND ( `IsDeleted` = 0 )  ORDER BY DATETIME('now')    LIMIT 0,1
===============================

2024-03-30 13:50:49.226 +08:00 [DBG] =========Yi-SQL耗时0.5178毫秒=====
2024-03-30 13:50:49.227 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 13:50:49.227 +08:00 [DBG] =========Yi-SQL耗时0.1315毫秒=====
2024-03-30 13:50:49.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = '8ddb5f70-44a8-7f10-2635-3a11a01593a3'    
===============================

2024-03-30 13:50:49.230 +08:00 [DBG] =========Yi-SQL耗时0.3655毫秒=====
2024-03-30 13:50:49.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 13:50:49.232 +08:00 [DBG] =========Yi-SQL耗时0.104毫秒=====
2024-03-30 13:50:49.234 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `RoleId` as aid,`MenuId` as bid FROM `RoleMenu`  WHERE   `RoleId` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'    
===============================

2024-03-30 13:50:49.234 +08:00 [DBG] =========Yi-SQL耗时0.1714毫秒=====
2024-03-30 13:50:49.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`State` AS `State`,`MenuName` AS `MenuName`,`MenuType` AS `MenuType`,`PermissionCode` AS `PermissionCode`,`ParentId` AS `ParentId`,`MenuIcon` AS `MenuIcon`,`Router` AS `Router`,`IsLink` AS `IsLink`,`IsCache` AS `IsCache`,`IsShow` AS `IsShow`,`Remark` AS `Remark`,`Component` AS `Component`,`Query` AS `Query` FROM `Menu`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 13:50:49.236 +08:00 [DBG] =========Yi-SQL耗时0.1739毫秒=====
2024-03-30 13:50:49.266 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-03-30 13:50:49.266 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 43.699ms
2024-03-30 13:50:49.266 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 13:50:49.267 +08:00 [INF] 用户【8ddb5f70-44a8-7f10-2635-3a11a01593a3:006238】登入系统
2024-03-30 13:50:49.270 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO `LoginLog`  
           (`Id`,`CreationTime`,`LoginUser`,`LoginLocation`,`LoginIp`,`Browser`,`Os`,`LogMsg`,`CreatorId`)
     VALUES
           (N'481986b2-c772-539b-6ef9-3a11a015f7b4',CAST('2024-03-30 13:50:49.269' AS DATETIME),N'006238',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'006238登录系统',N'8ddb5f70-44a8-7f10-2635-3a11a01593a3') ;
===============================

2024-03-30 13:50:49.272 +08:00 [DBG] =========Yi-SQL耗时1.7883毫秒=====
2024-03-30 13:50:49.274 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:50:49.276 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 13:50:49.276 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 13:50:49.283 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:50:49.283 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 13:50:49.283 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 13:50:49.283 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 13:50:49.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'    AND ( `IsDeleted` = 0 )  AND ( 1 = 1 )  
===============================

2024-03-30 13:50:49.295 +08:00 [DBG] =========Yi-SQL耗时0.273毫秒=====
2024-03-30 13:50:49.297 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = '8ddb5f70-44a8-7f10-2635-3a11a01593a3'    
===============================

2024-03-30 13:50:49.297 +08:00 [DBG] =========Yi-SQL耗时0.4138毫秒=====
2024-03-30 13:50:49.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 ) AND ( 1 = 1 )    AND   `Id` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 13:50:49.298 +08:00 [DBG] =========Yi-SQL耗时0.1488毫秒=====
2024-03-30 13:50:49.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `RoleId` as aid,`MenuId` as bid FROM `RoleMenu`  WHERE   `RoleId` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'    
===============================

2024-03-30 13:50:49.298 +08:00 [DBG] =========Yi-SQL耗时0.0943毫秒=====
2024-03-30 13:50:49.299 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`State` AS `State`,`MenuName` AS `MenuName`,`MenuType` AS `MenuType`,`PermissionCode` AS `PermissionCode`,`ParentId` AS `ParentId`,`MenuIcon` AS `MenuIcon`,`Router` AS `Router`,`IsLink` AS `IsLink`,`IsCache` AS `IsCache`,`IsShow` AS `IsShow`,`Remark` AS `Remark`,`Component` AS `Component`,`Query` AS `Query` FROM `Menu`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 13:50:49.299 +08:00 [DBG] =========Yi-SQL耗时0.1182毫秒=====
2024-03-30 13:50:49.305 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-03-30 13:50:49.306 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 23.2154ms
2024-03-30 13:50:49.306 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 13:50:49.313 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 13:50:49.314 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 13:50:49.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'    AND ( `IsDeleted` = 0 )  AND ( 1 = 1 )  
===============================

2024-03-30 13:50:49.315 +08:00 [DBG] =========Yi-SQL耗时0.2048毫秒=====
2024-03-30 13:50:49.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = '8ddb5f70-44a8-7f10-2635-3a11a01593a3'    
===============================

2024-03-30 13:50:49.316 +08:00 [DBG] =========Yi-SQL耗时0.3579毫秒=====
2024-03-30 13:50:49.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 ) AND ( 1 = 1 )    AND   `Id` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 13:50:49.318 +08:00 [DBG] =========Yi-SQL耗时0.2081毫秒=====
2024-03-30 13:50:49.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `RoleId` as aid,`MenuId` as bid FROM `RoleMenu`  WHERE   `RoleId` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'    
===============================

2024-03-30 13:50:49.318 +08:00 [DBG] =========Yi-SQL耗时0.0847毫秒=====
2024-03-30 13:50:49.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`State` AS `State`,`MenuName` AS `MenuName`,`MenuType` AS `MenuType`,`PermissionCode` AS `PermissionCode`,`ParentId` AS `ParentId`,`MenuIcon` AS `MenuIcon`,`Router` AS `Router`,`IsLink` AS `IsLink`,`IsCache` AS `IsCache`,`IsShow` AS `IsShow`,`Remark` AS `Remark`,`Component` AS `Component`,`Query` AS `Query` FROM `Menu`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 13:50:49.319 +08:00 [DBG] =========Yi-SQL耗时0.1324毫秒=====
2024-03-30 13:50:49.319 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-03-30 13:50:49.320 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 6.1407ms
2024-03-30 13:50:49.320 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 13:50:49.324 +08:00 [INF] 2024/3/30 13:50:49：006238,ozVWAoqN1xLHvZxoYIwhPQ连接服务端success，当前已连接1个
2024-03-30 13:51:13.822 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 13:51:13.830 +08:00 [INF] 用户006238离开了，当前已连接0个
2024-03-30 13:51:13.831 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 13:51:13.975 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:51:13.976 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 13:51:13.977 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 13:51:14.001 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 13:51:14.001 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 13:51:14.044 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-03-30 13:51:14.044 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 42.8164ms
2024-03-30 13:51:14.044 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 13:51:14.131 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 13:51:14.131 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 13:51:14.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'    AND ( `IsDeleted` = 0 )  AND ( 1 = 1 )  
===============================

2024-03-30 13:51:14.138 +08:00 [DBG] =========Yi-SQL耗时0.5936毫秒=====
2024-03-30 13:51:14.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = '8ddb5f70-44a8-7f10-2635-3a11a01593a3'    
===============================

2024-03-30 13:51:14.140 +08:00 [DBG] =========Yi-SQL耗时0.6503毫秒=====
2024-03-30 13:51:14.141 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:51:14.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 ) AND ( 1 = 1 )    AND   `Id` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 13:51:14.142 +08:00 [DBG] =========Yi-SQL耗时0.1954毫秒=====
2024-03-30 13:51:14.142 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 13:51:14.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `RoleId` as aid,`MenuId` as bid FROM `RoleMenu`  WHERE   `RoleId` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'    
===============================

2024-03-30 13:51:14.142 +08:00 [DBG] =========Yi-SQL耗时0.1393毫秒=====
2024-03-30 13:51:14.143 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`State` AS `State`,`MenuName` AS `MenuName`,`MenuType` AS `MenuType`,`PermissionCode` AS `PermissionCode`,`ParentId` AS `ParentId`,`MenuIcon` AS `MenuIcon`,`Router` AS `Router`,`IsLink` AS `IsLink`,`IsCache` AS `IsCache`,`IsShow` AS `IsShow`,`Remark` AS `Remark`,`Component` AS `Component`,`Query` AS `Query` FROM `Menu`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 13:51:14.144 +08:00 [DBG] =========Yi-SQL耗时0.3153毫秒=====
2024-03-30 13:51:14.144 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-03-30 13:51:14.144 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 12.8632ms
2024-03-30 13:51:14.144 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 13:51:14.174 +08:00 [INF] 2024/3/30 13:51:14：006238,Tt2V3vXAGo1iSHYeJ47DCQ连接服务端success，当前已连接0个
2024-03-30 13:51:40.898 +08:00 [INF] 用户006238离开了，当前已连接0个
2024-03-30 13:51:40.906 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 13:51:45.861 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:51:45.862 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 13:51:45.862 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 13:51:45.866 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 13:51:45.866 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 13:51:45.867 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-03-30 13:51:45.867 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.0101ms
2024-03-30 13:51:45.867 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 13:51:46.032 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 13:51:46.032 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 13:51:46.034 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'    AND ( `IsDeleted` = 0 )  AND ( 1 = 1 )  
===============================

2024-03-30 13:51:46.034 +08:00 [DBG] =========Yi-SQL耗时0.3696毫秒=====
2024-03-30 13:51:46.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = '8ddb5f70-44a8-7f10-2635-3a11a01593a3'    
===============================

2024-03-30 13:51:46.036 +08:00 [DBG] =========Yi-SQL耗时0.4056毫秒=====
2024-03-30 13:51:46.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 ) AND ( 1 = 1 )    AND   `Id` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 13:51:46.038 +08:00 [DBG] =========Yi-SQL耗时0.3796毫秒=====
2024-03-30 13:51:46.038 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `RoleId` as aid,`MenuId` as bid FROM `RoleMenu`  WHERE   `RoleId` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'    
===============================

2024-03-30 13:51:46.039 +08:00 [DBG] =========Yi-SQL耗时0.5005毫秒=====
2024-03-30 13:51:46.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`State` AS `State`,`MenuName` AS `MenuName`,`MenuType` AS `MenuType`,`PermissionCode` AS `PermissionCode`,`ParentId` AS `ParentId`,`MenuIcon` AS `MenuIcon`,`Router` AS `Router`,`IsLink` AS `IsLink`,`IsCache` AS `IsCache`,`IsShow` AS `IsShow`,`Remark` AS `Remark`,`Component` AS `Component`,`Query` AS `Query` FROM `Menu`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 13:51:46.041 +08:00 [DBG] =========Yi-SQL耗时0.5723毫秒=====
2024-03-30 13:51:46.042 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-03-30 13:51:46.042 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 9.4376ms
2024-03-30 13:51:46.042 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 13:51:46.084 +08:00 [INF] CORS policy execution successful.
2024-03-30 13:51:46.085 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 13:51:46.116 +08:00 [INF] 2024/3/30 13:51:46：006238,ixLC5k30xlF8yyXuRvo6-A连接服务端success，当前已连接0个
2024-03-30 13:52:32.160 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-03-30 13:52:32.177 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-03-30 13:52:37.288 +08:00 [INF] Loaded ABP modules:
2024-03-30 13:52:37.289 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-03-30 13:52:37.289 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-03-30 13:52:37.289 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-03-30 13:52:37.289 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-03-30 13:52:37.289 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-03-30 13:52:37.289 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-03-30 13:52:37.289 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-03-30 13:52:37.289 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-03-30 13:52:37.289 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-03-30 13:52:37.289 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-03-30 13:52:37.289 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-03-30 13:52:37.289 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-03-30 13:52:37.289 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-03-30 13:52:37.289 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-03-30 13:52:37.289 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-03-30 13:52:37.289 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-03-30 13:52:37.289 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-03-30 13:52:37.289 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-03-30 13:52:37.289 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-03-30 13:52:37.289 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-03-30 13:52:37.289 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-03-30 13:52:37.289 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-03-30 13:52:37.289 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-03-30 13:52:37.289 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-03-30 13:52:37.289 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-03-30 13:52:37.289 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-03-30 13:52:37.289 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-03-30 13:52:37.289 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-03-30 13:52:37.289 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-03-30 13:52:37.289 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-03-30 13:52:37.289 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-03-30 13:52:37.289 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-03-30 13:52:37.289 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-03-30 13:52:37.289 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-03-30 13:52:37.289 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-03-30 13:52:37.289 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-03-30 13:52:37.289 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-03-30 13:52:37.289 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-03-30 13:52:37.289 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-03-30 13:52:37.289 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-03-30 13:52:37.289 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-03-30 13:52:37.289 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-03-30 13:52:37.289 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-03-30 13:52:37.289 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-03-30 13:52:37.289 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-03-30 13:52:37.289 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-03-30 13:52:37.289 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-03-30 13:52:37.289 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-03-30 13:52:37.289 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-03-30 13:52:37.289 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-03-30 13:52:37.289 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-03-30 13:52:37.289 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-03-30 13:52:37.289 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-03-30 13:52:37.289 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-03-30 13:52:37.289 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-03-30 13:52:37.289 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-03-30 13:52:37.289 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-03-30 13:52:37.289 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-03-30 13:52:37.289 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-03-30 13:52:37.289 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-03-30 13:52:37.289 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-03-30 13:52:37.289 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-03-30 13:52:37.289 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-03-30 13:52:37.289 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-03-30 13:52:37.289 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-03-30 13:52:37.289 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-03-30 13:52:37.289 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-03-30 13:52:37.289 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-03-30 13:52:37.289 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-03-30 13:52:37.289 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-03-30 13:52:37.289 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-03-30 13:52:37.289 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-03-30 13:52:37.289 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-03-30 13:52:37.289 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-03-30 13:52:37.289 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-03-30 13:52:37.289 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-03-30 13:52:37.289 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-03-30 13:52:37.289 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-03-30 13:52:37.289 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-03-30 13:52:37.289 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-03-30 13:52:37.289 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-03-30 13:52:37.289 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-03-30 13:52:37.289 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-03-30 13:52:37.289 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-03-30 13:52:37.289 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-03-30 13:52:37.289 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-03-30 13:52:37.289 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-03-30 13:52:37.289 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-03-30 13:52:37.289 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-03-30 13:52:37.289 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-03-30 13:52:37.289 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-03-30 13:52:37.289 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-03-30 13:52:37.289 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-03-30 13:52:37.294 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-03-30 13:52:37.299 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：DataSource=yi-abp-dev.db
数据库类型：Sqlite
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-03-30 13:52:37.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.610 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.610 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.611 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.611 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.613 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.613 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.616 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.616 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.618 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.618 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_LoginUser'
===============================

2024-03-30 13:52:37.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.628 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.628 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.629 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.629 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.630 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.630 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.633 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.633 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.634 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.634 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.636 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_UserName'
===============================

2024-03-30 13:52:37.636 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.637 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.640 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.640 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.642 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.643 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.643 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.643 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_UserId'
===============================

2024-03-30 13:52:37.643 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.644 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.644 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.645 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.645 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_CreatorId'
===============================

2024-03-30 13:52:37.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.647 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.647 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.647 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_CreatorId_DiscussId'
===============================

2024-03-30 13:52:37.647 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.649 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_Name'
===============================

2024-03-30 13:52:37.649 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_ParentId'
===============================

2024-03-30 13:52:37.649 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_DiscussId'
===============================

2024-03-30 13:52:37.649 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_DiscussId'
===============================

2024-03-30 13:52:37.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_ParentId'
===============================

2024-03-30 13:52:37.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_Title'
===============================

2024-03-30 13:52:37.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_PlateId'
===============================

2024-03-30 13:52:37.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_CreationTime'
===============================

2024-03-30 13:52:37.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.658 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.658 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.659 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.659 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.660 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.660 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.661 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.661 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.661 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.661 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_AuditLogId'
===============================

2024-03-30 13:52:37.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_TenantId_ExecutionTime'
===============================

2024-03-30 13:52:37.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.667 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.667 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.667 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_ExecutionTime'
===============================

2024-03-30 13:52:37.667 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.667 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_ExecutionTime_UserId'
===============================

2024-03-30 13:52:37.667 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_AuditLogId'
===============================

2024-03-30 13:52:37.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_TenantId_EntityId'
===============================

2024-03-30 13:52:37.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.669 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_EntityChangeId'
===============================

2024-03-30 13:52:37.669 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 13:52:37.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 13:52:37.773 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Dept`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:52:37.776 +08:00 [DBG] =========Yi-SQL耗时3.795毫秒=====
2024-03-30 13:52:37.789 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Dictionary`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:52:37.789 +08:00 [DBG] =========Yi-SQL耗时0.3382毫秒=====
2024-03-30 13:52:37.792 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `DictionaryType`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:52:37.792 +08:00 [DBG] =========Yi-SQL耗时0.1349毫秒=====
2024-03-30 13:52:37.797 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Menu`   WHERE ( `MenuName` = N'系统管理' )  AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:52:37.798 +08:00 [DBG] =========Yi-SQL耗时1.2346毫秒=====
2024-03-30 13:52:37.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Post`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:52:37.801 +08:00 [DBG] =========Yi-SQL耗时0.1618毫秒=====
2024-03-30 13:52:37.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Role`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:52:37.804 +08:00 [DBG] =========Yi-SQL耗时0.1211毫秒=====
2024-03-30 13:52:37.808 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `User`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:52:37.808 +08:00 [DBG] =========Yi-SQL耗时0.1491毫秒=====
2024-03-30 13:52:37.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Banner`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:52:37.811 +08:00 [DBG] =========Yi-SQL耗时0.315毫秒=====
2024-03-30 13:52:37.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `DictionaryType`   WHERE ( `DictType` = N'bbs_type_lable' )  AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:52:37.813 +08:00 [DBG] =========Yi-SQL耗时0.104毫秒=====
2024-03-30 13:52:37.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Menu`   WHERE ( `MenuName` = N'BBS' )  AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:52:37.817 +08:00 [DBG] =========Yi-SQL耗时2.2371毫秒=====
2024-03-30 13:52:37.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `BbsUserExtraInfo`   WHERE ( 1 = 1 )    LIMIT 0,1
===============================

2024-03-30 13:52:37.819 +08:00 [DBG] =========Yi-SQL耗时0.0846毫秒=====
2024-03-30 13:52:37.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Config`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 13:52:37.821 +08:00 [DBG] =========Yi-SQL耗时0.0953毫秒=====
2024-03-30 13:52:37.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Level`   WHERE ( 1 = 1 )    LIMIT 0,1
===============================

2024-03-30 13:52:37.824 +08:00 [DBG] =========Yi-SQL耗时0.3135毫秒=====
2024-03-30 13:52:37.826 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `YiTemplate`   WHERE ( 1 = 1 )    LIMIT 0,1
===============================

2024-03-30 13:52:37.826 +08:00 [DBG] =========Yi-SQL耗时0.2269毫秒=====
2024-03-30 13:52:37.833 +08:00 [DBG] 耗时-537ms,已加载模块-Yi.Framework.SqlSugarCore
2024-03-30 13:52:37.894 +08:00 [DBG] 耗时-59ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-03-30 13:52:37.898 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-03-30 13:52:37.913 +08:00 [DBG] 耗时-14ms,已加载模块-Volo.Abp.AspNetCore
2024-03-30 13:52:37.918 +08:00 [DBG] 耗时-4ms,已加载模块-Volo.Abp.Quartz
2024-03-30 13:52:37.944 +08:00 [DBG] 耗时-26ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-03-30 13:52:37.947 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-03-30 13:52:38.194 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-03-30 13:52:38.268 +08:00 [DBG] 耗时-321ms,已加载模块-Yi.Abp.Web
2024-03-30 13:52:38.276 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-03-30 13:52:38.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`CurrentLevel`,`MinExperience`,`Name`,`Nick`,`Logo` FROM `Level`  
===============================

2024-03-30 13:52:38.286 +08:00 [DBG] =========Yi-SQL耗时0.3699毫秒=====
2024-03-30 13:52:38.354 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-03-30 13:52:38.354 +08:00 [DBG] 耗时-84ms,已加载模块-Yi.Framework.Bbs.Domain
2024-03-30 13:52:38.354 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【1051ms】==========
2024-03-30 13:52:38.508 +08:00 [INF] Now listening on: http://[::]:19001
2024-03-30 13:52:38.508 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-03-30 13:52:38.508 +08:00 [INF] Hosting environment: Development
2024-03-30 13:52:38.508 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-03-30 14:04:34.193 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-03-30 14:04:34.204 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-03-30 14:04:39.361 +08:00 [INF] Loaded ABP modules:
2024-03-30 14:04:39.361 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-03-30 14:04:39.361 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-03-30 14:04:39.361 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-03-30 14:04:39.361 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-03-30 14:04:39.361 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-03-30 14:04:39.361 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-03-30 14:04:39.361 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-03-30 14:04:39.361 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-03-30 14:04:39.361 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-03-30 14:04:39.361 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-03-30 14:04:39.361 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-03-30 14:04:39.361 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-03-30 14:04:39.361 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-03-30 14:04:39.362 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-03-30 14:04:39.362 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-03-30 14:04:39.362 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-03-30 14:04:39.362 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-03-30 14:04:39.362 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-03-30 14:04:39.362 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-03-30 14:04:39.362 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-03-30 14:04:39.362 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-03-30 14:04:39.362 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-03-30 14:04:39.362 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-03-30 14:04:39.362 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-03-30 14:04:39.362 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-03-30 14:04:39.362 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-03-30 14:04:39.362 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-03-30 14:04:39.362 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-03-30 14:04:39.362 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-03-30 14:04:39.362 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-03-30 14:04:39.362 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-03-30 14:04:39.362 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-03-30 14:04:39.362 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-03-30 14:04:39.362 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-03-30 14:04:39.362 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-03-30 14:04:39.362 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-03-30 14:04:39.362 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-03-30 14:04:39.362 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-03-30 14:04:39.362 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-03-30 14:04:39.362 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-03-30 14:04:39.362 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-03-30 14:04:39.362 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-03-30 14:04:39.362 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-03-30 14:04:39.362 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-03-30 14:04:39.362 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-03-30 14:04:39.362 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-03-30 14:04:39.362 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-03-30 14:04:39.362 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-03-30 14:04:39.362 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-03-30 14:04:39.362 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-03-30 14:04:39.362 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-03-30 14:04:39.362 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-03-30 14:04:39.362 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-03-30 14:04:39.362 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-03-30 14:04:39.362 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-03-30 14:04:39.362 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-03-30 14:04:39.362 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-03-30 14:04:39.362 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-03-30 14:04:39.362 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-03-30 14:04:39.362 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-03-30 14:04:39.362 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-03-30 14:04:39.362 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-03-30 14:04:39.362 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-03-30 14:04:39.362 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-03-30 14:04:39.362 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-03-30 14:04:39.362 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-03-30 14:04:39.362 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-03-30 14:04:39.362 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-03-30 14:04:39.362 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-03-30 14:04:39.362 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-03-30 14:04:39.362 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-03-30 14:04:39.362 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-03-30 14:04:39.362 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-03-30 14:04:39.362 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-03-30 14:04:39.362 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-03-30 14:04:39.362 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-03-30 14:04:39.362 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-03-30 14:04:39.362 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-03-30 14:04:39.362 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-03-30 14:04:39.362 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-03-30 14:04:39.362 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-03-30 14:04:39.362 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-03-30 14:04:39.362 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-03-30 14:04:39.362 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-03-30 14:04:39.362 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-03-30 14:04:39.362 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-03-30 14:04:39.362 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-03-30 14:04:39.362 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-03-30 14:04:39.362 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-03-30 14:04:39.362 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-03-30 14:04:39.362 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-03-30 14:04:39.362 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-03-30 14:04:39.362 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-03-30 14:04:39.370 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-03-30 14:04:39.377 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：DataSource=yi-abp-dev.db
数据库类型：Sqlite
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-03-30 14:04:39.645 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.647 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.677 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.677 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.678 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.680 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.680 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.682 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.684 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.687 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.687 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.687 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_LoginUser'
===============================

2024-03-30 14:04:39.687 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.690 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.693 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.693 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.694 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.694 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.695 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.698 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.698 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_UserName'
===============================

2024-03-30 14:04:39.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.701 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.704 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.704 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.707 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_UserId'
===============================

2024-03-30 14:04:39.707 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.708 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.708 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.709 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.709 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.710 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_CreatorId'
===============================

2024-03-30 14:04:39.710 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.710 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.710 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.710 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_CreatorId_DiscussId'
===============================

2024-03-30 14:04:39.710 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_Name'
===============================

2024-03-30 14:04:39.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_ParentId'
===============================

2024-03-30 14:04:39.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_DiscussId'
===============================

2024-03-30 14:04:39.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.713 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.713 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.715 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_DiscussId'
===============================

2024-03-30 14:04:39.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_ParentId'
===============================

2024-03-30 14:04:39.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.718 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.718 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.718 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_Title'
===============================

2024-03-30 14:04:39.718 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.718 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_PlateId'
===============================

2024-03-30 14:04:39.718 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.718 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_CreationTime'
===============================

2024-03-30 14:04:39.718 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.719 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.719 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.720 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.720 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.721 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.721 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.722 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.722 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.724 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.724 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.725 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.725 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.726 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_AuditLogId'
===============================

2024-03-30 14:04:39.726 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.726 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_TenantId_ExecutionTime'
===============================

2024-03-30 14:04:39.726 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.729 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.730 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_ExecutionTime'
===============================

2024-03-30 14:04:39.730 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.730 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_ExecutionTime_UserId'
===============================

2024-03-30 14:04:39.730 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.731 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_AuditLogId'
===============================

2024-03-30 14:04:39.731 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_TenantId_EntityId'
===============================

2024-03-30 14:04:39.731 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.732 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.732 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.732 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_EntityChangeId'
===============================

2024-03-30 14:04:39.732 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.734 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.734 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.735 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:04:39.736 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:04:39.826 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Dept`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:04:39.829 +08:00 [DBG] =========Yi-SQL耗时3.5099毫秒=====
2024-03-30 14:04:39.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Dictionary`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:04:39.842 +08:00 [DBG] =========Yi-SQL耗时0.3079毫秒=====
2024-03-30 14:04:39.845 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `DictionaryType`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:04:39.845 +08:00 [DBG] =========Yi-SQL耗时0.1765毫秒=====
2024-03-30 14:04:39.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Menu`   WHERE ( `MenuName` = N'系统管理' )  AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:04:39.850 +08:00 [DBG] =========Yi-SQL耗时0.9666毫秒=====
2024-03-30 14:04:39.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Post`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:04:39.852 +08:00 [DBG] =========Yi-SQL耗时0.0958毫秒=====
2024-03-30 14:04:39.855 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Role`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:04:39.855 +08:00 [DBG] =========Yi-SQL耗时0.0905毫秒=====
2024-03-30 14:04:39.859 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `User`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:04:39.859 +08:00 [DBG] =========Yi-SQL耗时0.0945毫秒=====
2024-03-30 14:04:39.862 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Banner`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:04:39.862 +08:00 [DBG] =========Yi-SQL耗时0.3628毫秒=====
2024-03-30 14:04:39.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `DictionaryType`   WHERE ( `DictType` = N'bbs_type_lable' )  AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:04:39.864 +08:00 [DBG] =========Yi-SQL耗时0.1187毫秒=====
2024-03-30 14:04:39.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Menu`   WHERE ( `MenuName` = N'BBS' )  AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:04:39.866 +08:00 [DBG] =========Yi-SQL耗时0.4752毫秒=====
2024-03-30 14:04:39.868 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `BbsUserExtraInfo`   WHERE ( 1 = 1 )    LIMIT 0,1
===============================

2024-03-30 14:04:39.868 +08:00 [DBG] =========Yi-SQL耗时0.1094毫秒=====
2024-03-30 14:04:39.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Config`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:04:39.871 +08:00 [DBG] =========Yi-SQL耗时0.1241毫秒=====
2024-03-30 14:04:39.873 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Level`   WHERE ( 1 = 1 )    LIMIT 0,1
===============================

2024-03-30 14:04:39.874 +08:00 [DBG] =========Yi-SQL耗时0.3475毫秒=====
2024-03-30 14:04:39.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `YiTemplate`   WHERE ( 1 = 1 )    LIMIT 0,1
===============================

2024-03-30 14:04:39.876 +08:00 [DBG] =========Yi-SQL耗时0.25毫秒=====
2024-03-30 14:04:39.884 +08:00 [DBG] 耗时-512ms,已加载模块-Yi.Framework.SqlSugarCore
2024-03-30 14:04:39.954 +08:00 [DBG] 耗时-68ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-03-30 14:04:39.957 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-03-30 14:04:39.997 +08:00 [DBG] 耗时-39ms,已加载模块-Volo.Abp.AspNetCore
2024-03-30 14:04:40.004 +08:00 [DBG] 耗时-6ms,已加载模块-Volo.Abp.Quartz
2024-03-30 14:04:40.038 +08:00 [DBG] 耗时-34ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-03-30 14:04:40.042 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-03-30 14:04:40.340 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-03-30 14:04:40.418 +08:00 [DBG] 耗时-375ms,已加载模块-Yi.Abp.Web
2024-03-30 14:04:40.426 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-03-30 14:04:40.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`CurrentLevel`,`MinExperience`,`Name`,`Nick`,`Logo` FROM `Level`  
===============================

2024-03-30 14:04:40.435 +08:00 [DBG] =========Yi-SQL耗时0.4352毫秒=====
2024-03-30 14:04:40.509 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-03-30 14:04:40.509 +08:00 [DBG] 耗时-90ms,已加载模块-Yi.Framework.Bbs.Domain
2024-03-30 14:04:40.509 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【1131ms】==========
2024-03-30 14:04:40.623 +08:00 [INF] Now listening on: http://[::]:19001
2024-03-30 14:04:40.623 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-03-30 14:04:40.623 +08:00 [INF] Hosting environment: Development
2024-03-30 14:04:40.623 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-03-30 14:05:00.636 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:05:00.721 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 14:05:00.721 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 14:05:00.727 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 14:05:00.741 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:05:00.794 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:05:00.798 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 14:05:00.919 +08:00 [INF] 2024/3/30 14:05:00：006238,DUS6yMS2mE-HVlTCrwAkUw连接服务端success，当前已连接0个
2024-03-30 14:05:00.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'    AND ( `IsDeleted` = 0 )  AND ( 1 = 1 )  
===============================

2024-03-30 14:05:00.960 +08:00 [DBG] =========Yi-SQL耗时1.0969毫秒=====
2024-03-30 14:05:00.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = '8ddb5f70-44a8-7f10-2635-3a11a01593a3'    
===============================

2024-03-30 14:05:00.993 +08:00 [DBG] =========Yi-SQL耗时0.3376毫秒=====
2024-03-30 14:05:01.002 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 ) AND ( 1 = 1 )    AND   `Id` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:05:01.003 +08:00 [DBG] =========Yi-SQL耗时0.3248毫秒=====
2024-03-30 14:05:01.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `RoleId` as aid,`MenuId` as bid FROM `RoleMenu`  WHERE   `RoleId` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'    
===============================

2024-03-30 14:05:01.006 +08:00 [DBG] =========Yi-SQL耗时0.156毫秒=====
2024-03-30 14:05:01.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`State` AS `State`,`MenuName` AS `MenuName`,`MenuType` AS `MenuType`,`PermissionCode` AS `PermissionCode`,`ParentId` AS `ParentId`,`MenuIcon` AS `MenuIcon`,`Router` AS `Router`,`IsLink` AS `IsLink`,`IsCache` AS `IsCache`,`IsShow` AS `IsShow`,`Remark` AS `Remark`,`Component` AS `Component`,`Query` AS `Query` FROM `Menu`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:05:01.007 +08:00 [DBG] =========Yi-SQL耗时0.1771毫秒=====
2024-03-30 14:05:01.053 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-03-30 14:05:01.085 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 340.5852ms
2024-03-30 14:05:01.086 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 14:05:01.093 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 14:05:01.095 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:05:01.098 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'    AND ( `IsDeleted` = 0 )  AND ( 1 = 1 )  
===============================

2024-03-30 14:05:01.098 +08:00 [DBG] =========Yi-SQL耗时0.2534毫秒=====
2024-03-30 14:05:01.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = '8ddb5f70-44a8-7f10-2635-3a11a01593a3'    
===============================

2024-03-30 14:05:01.100 +08:00 [DBG] =========Yi-SQL耗时0.5783毫秒=====
2024-03-30 14:05:01.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 ) AND ( 1 = 1 )    AND   `Id` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:05:01.101 +08:00 [DBG] =========Yi-SQL耗时0.2861毫秒=====
2024-03-30 14:05:01.102 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `RoleId` as aid,`MenuId` as bid FROM `RoleMenu`  WHERE   `RoleId` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'    
===============================

2024-03-30 14:05:01.102 +08:00 [DBG] =========Yi-SQL耗时0.1186毫秒=====
2024-03-30 14:05:01.102 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`State` AS `State`,`MenuName` AS `MenuName`,`MenuType` AS `MenuType`,`PermissionCode` AS `PermissionCode`,`ParentId` AS `ParentId`,`MenuIcon` AS `MenuIcon`,`Router` AS `Router`,`IsLink` AS `IsLink`,`IsCache` AS `IsCache`,`IsShow` AS `IsShow`,`Remark` AS `Remark`,`Component` AS `Component`,`Query` AS `Query` FROM `Menu`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:05:01.102 +08:00 [DBG] =========Yi-SQL耗时0.1714毫秒=====
2024-03-30 14:05:01.113 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-03-30 14:05:01.113 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 17.5839ms
2024-03-30 14:05:01.113 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 14:06:07.969 +08:00 [INF] 用户006238离开了，当前已连接0个
2024-03-30 14:06:07.973 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 14:06:08.331 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:06:08.335 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 14:06:08.337 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 14:06:08.338 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 14:06:08.339 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 14:06:08.692 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:06:08.693 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 14:06:08.693 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 14:06:08.694 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 14:06:08.825 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 14:06:08.827 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:06:08.828 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-03-30 14:06:08.828 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:06:08.833 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`EntityVersion`,`TenantConnectionString`,`DbType`,`IsDeleted`,`DeleterId`,`DeletionTime`,`LastModificationTime`,`LastModifierId`,`CreationTime`,`CreatorId`,`ConcurrencyStamp` FROM `YiTenant`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:06:08.834 +08:00 [DBG] =========Yi-SQL耗时0.5669毫秒=====
2024-03-30 14:06:08.836 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:06:08.841 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 13.6299ms
2024-03-30 14:06:08.841 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 14:06:08.926 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-03-30 14:06:08.930 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 101.8653ms
2024-03-30 14:06:08.930 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:06:32.902 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:06:32.903 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:06:32.912 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:06:32.945 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`   WHERE (( `UserName` = N'006238' ) AND ( `State` = 1 ))  AND ( `IsDeleted` = 0 )  ORDER BY DATETIME('now')    LIMIT 0,1
===============================

2024-03-30 14:06:32.946 +08:00 [DBG] =========Yi-SQL耗时0.99毫秒=====
2024-03-30 14:06:32.949 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:06:32.949 +08:00 [DBG] =========Yi-SQL耗时0.1332毫秒=====
2024-03-30 14:06:32.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = '8ddb5f70-44a8-7f10-2635-3a11a01593a3'    
===============================

2024-03-30 14:06:32.951 +08:00 [DBG] =========Yi-SQL耗时0.5437毫秒=====
2024-03-30 14:06:32.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:06:32.952 +08:00 [DBG] =========Yi-SQL耗时0.1128毫秒=====
2024-03-30 14:06:32.952 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `RoleId` as aid,`MenuId` as bid FROM `RoleMenu`  WHERE   `RoleId` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'    
===============================

2024-03-30 14:06:32.952 +08:00 [DBG] =========Yi-SQL耗时0.0629毫秒=====
2024-03-30 14:06:32.952 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`State` AS `State`,`MenuName` AS `MenuName`,`MenuType` AS `MenuType`,`PermissionCode` AS `PermissionCode`,`ParentId` AS `ParentId`,`MenuIcon` AS `MenuIcon`,`Router` AS `Router`,`IsLink` AS `IsLink`,`IsCache` AS `IsCache`,`IsShow` AS `IsShow`,`Remark` AS `Remark`,`Component` AS `Component`,`Query` AS `Query` FROM `Menu`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:06:32.952 +08:00 [DBG] =========Yi-SQL耗时0.09毫秒=====
2024-03-30 14:06:32.983 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-03-30 14:06:32.986 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 74.4946ms
2024-03-30 14:06:32.986 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:06:32.992 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:06:32.993 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 14:06:32.994 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 14:06:33.001 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:06:33.005 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 14:06:33.005 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 14:06:33.005 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:06:33.012 +08:00 [INF] 用户【8ddb5f70-44a8-7f10-2635-3a11a01593a3:006238】登入系统
2024-03-30 14:06:33.022 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-03-30 14:06:33.023 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 17.103ms
2024-03-30 14:06:33.023 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 14:06:33.027 +08:00 [INF] 2024/3/30 14:06:33：006238,6H8Nmg59QRzWnJXCrlpblw连接服务端success，当前已连接1个
2024-03-30 14:06:33.030 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 14:06:33.030 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:06:33.032 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'    AND ( `IsDeleted` = 0 )  AND ( 1 = 1 )  
===============================

2024-03-30 14:06:33.033 +08:00 [DBG] =========Yi-SQL耗时1.1348毫秒=====
2024-03-30 14:06:33.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = '8ddb5f70-44a8-7f10-2635-3a11a01593a3'    
===============================

2024-03-30 14:06:33.035 +08:00 [DBG] =========Yi-SQL耗时0.6641毫秒=====
2024-03-30 14:06:33.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 ) AND ( 1 = 1 )    AND   `Id` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:06:33.036 +08:00 [DBG] =========Yi-SQL耗时0.1985毫秒=====
2024-03-30 14:06:33.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `RoleId` as aid,`MenuId` as bid FROM `RoleMenu`  WHERE   `RoleId` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'    
===============================

2024-03-30 14:06:33.037 +08:00 [DBG] =========Yi-SQL耗时0.1586毫秒=====
2024-03-30 14:06:33.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`State` AS `State`,`MenuName` AS `MenuName`,`MenuType` AS `MenuType`,`PermissionCode` AS `PermissionCode`,`ParentId` AS `ParentId`,`MenuIcon` AS `MenuIcon`,`Router` AS `Router`,`IsLink` AS `IsLink`,`IsCache` AS `IsCache`,`IsShow` AS `IsShow`,`Remark` AS `Remark`,`Component` AS `Component`,`Query` AS `Query` FROM `Menu`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:06:33.037 +08:00 [DBG] =========Yi-SQL耗时0.15毫秒=====
2024-03-30 14:06:33.038 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-03-30 14:06:33.038 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 7.3664ms
2024-03-30 14:06:33.038 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 14:06:33.047 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO `LoginLog`  
           (`Id`,`CreationTime`,`LoginUser`,`LoginLocation`,`LoginIp`,`Browser`,`Os`,`LogMsg`,`CreatorId`)
     VALUES
           (N'1ea5395f-4f3e-5587-47ba-3a11a0245e41',CAST('2024-03-30 14:06:33.030' AS DATETIME),N'006238',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'006238登录系统',N'8ddb5f70-44a8-7f10-2635-3a11a01593a3') ;
===============================

2024-03-30 14:06:33.050 +08:00 [DBG] =========Yi-SQL耗时2.4547毫秒=====
2024-03-30 14:09:14.082 +08:00 [INF] 用户006238离开了，当前已连接1个
2024-03-30 14:09:14.083 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 14:09:14.083 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 14:09:14.234 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:09:14.235 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 14:09:14.236 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 14:09:14.249 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 14:09:14.249 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:09:14.251 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-03-30 14:09:14.251 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.0105ms
2024-03-30 14:09:14.251 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 14:09:14.375 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 14:09:14.375 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:09:14.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'    AND ( `IsDeleted` = 0 )  AND ( 1 = 1 )  
===============================

2024-03-30 14:09:14.378 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:09:14.378 +08:00 [DBG] =========Yi-SQL耗时0.8988毫秒=====
2024-03-30 14:09:14.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = '8ddb5f70-44a8-7f10-2635-3a11a01593a3'    
===============================

2024-03-30 14:09:14.380 +08:00 [DBG] =========Yi-SQL耗时0.7308毫秒=====
2024-03-30 14:09:14.381 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 14:09:14.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 ) AND ( 1 = 1 )    AND   `Id` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:09:14.382 +08:00 [DBG] =========Yi-SQL耗时0.5191毫秒=====
2024-03-30 14:09:14.383 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `RoleId` as aid,`MenuId` as bid FROM `RoleMenu`  WHERE   `RoleId` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'    
===============================

2024-03-30 14:09:14.383 +08:00 [DBG] =========Yi-SQL耗时0.2139毫秒=====
2024-03-30 14:09:14.383 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`State` AS `State`,`MenuName` AS `MenuName`,`MenuType` AS `MenuType`,`PermissionCode` AS `PermissionCode`,`ParentId` AS `ParentId`,`MenuIcon` AS `MenuIcon`,`Router` AS `Router`,`IsLink` AS `IsLink`,`IsCache` AS `IsCache`,`IsShow` AS `IsShow`,`Remark` AS `Remark`,`Component` AS `Component`,`Query` AS `Query` FROM `Menu`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:09:14.384 +08:00 [DBG] =========Yi-SQL耗时0.2309毫秒=====
2024-03-30 14:09:14.384 +08:00 [INF] Executing ObjectResult, writing value of type 'null'.
2024-03-30 14:09:14.384 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 8.9173ms
2024-03-30 14:09:14.384 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 14:09:14.407 +08:00 [INF] 2024/3/30 14:09:14：006238,lY_fe-Tw1tAHAfPVtQseLg连接服务端success，当前已连接0个
2024-03-30 14:09:30.117 +08:00 [INF] 用户006238离开了，当前已连接0个
2024-03-30 14:09:30.118 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 14:09:30.389 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:09:30.391 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 14:09:30.392 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 14:09:30.418 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 14:09:30.418 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 14:09:30.675 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:09:30.676 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 14:09:30.676 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 14:09:30.677 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 14:09:30.844 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:09:30.844 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 14:09:30.844 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-03-30 14:09:30.844 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:09:30.848 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`EntityVersion`,`TenantConnectionString`,`DbType`,`IsDeleted`,`DeleterId`,`DeletionTime`,`LastModificationTime`,`LastModifierId`,`CreationTime`,`CreatorId`,`ConcurrencyStamp` FROM `YiTenant`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:09:30.849 +08:00 [DBG] =========Yi-SQL耗时0.4878毫秒=====
2024-03-30 14:09:30.849 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:09:30.850 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 5.5739ms
2024-03-30 14:09:30.850 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 14:09:30.852 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-03-30 14:09:30.853 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 8.5566ms
2024-03-30 14:09:30.853 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:09:40.687 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:09:40.688 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:09:40.691 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-03-30 14:09:40.691 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 3.482ms
2024-03-30 14:09:40.691 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:09:43.221 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:09:43.221 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:09:43.224 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-03-30 14:09:43.224 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 2.6983ms
2024-03-30 14:09:43.224 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:09:47.253 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:09:47.254 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:09:47.254 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:09:47.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`   WHERE (( `UserName` = N'cc' ) AND ( `State` = 1 ))  AND ( `IsDeleted` = 0 )  ORDER BY DATETIME('now')    LIMIT 0,1
===============================

2024-03-30 14:09:47.259 +08:00 [DBG] =========Yi-SQL耗时0.3809毫秒=====
2024-03-30 14:09:47.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'd1c28168-8d08-38a8-2758-3a119a14c17a'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:09:47.261 +08:00 [DBG] =========Yi-SQL耗时0.1562毫秒=====
2024-03-30 14:09:47.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = 'd1c28168-8d08-38a8-2758-3a119a14c17a'    
===============================

2024-03-30 14:09:47.263 +08:00 [DBG] =========Yi-SQL耗时0.3543毫秒=====
2024-03-30 14:09:47.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:09:47.264 +08:00 [DBG] =========Yi-SQL耗时0.1174毫秒=====
2024-03-30 14:09:47.283 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-03-30 14:09:47.283 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 28.6919ms
2024-03-30 14:09:47.283 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:09:47.284 +08:00 [INF] 用户【d1c28168-8d08-38a8-2758-3a119a14c17a:cc】登入系统
2024-03-30 14:09:47.286 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO `LoginLog`  
           (`Id`,`CreationTime`,`LoginUser`,`LoginLocation`,`LoginIp`,`Browser`,`Os`,`LogMsg`,`CreatorId`)
     VALUES
           (N'7b5972c7-72d3-9304-b8dd-3a11a0275515',CAST('2024-03-30 14:09:47.285' AS DATETIME),N'cc',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'cc登录系统',N'd1c28168-8d08-38a8-2758-3a119a14c17a') ;
===============================

2024-03-30 14:09:47.289 +08:00 [DBG] =========Yi-SQL耗时2.6408毫秒=====
2024-03-30 14:09:47.293 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:09:47.295 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 14:09:47.296 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 14:09:47.305 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 14:09:47.305 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:09:47.307 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:09:47.308 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 14:09:47.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'd1c28168-8d08-38a8-2758-3a119a14c17a'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:09:47.309 +08:00 [DBG] =========Yi-SQL耗时0.9385毫秒=====
2024-03-30 14:09:47.312 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = 'd1c28168-8d08-38a8-2758-3a119a14c17a'    
===============================

2024-03-30 14:09:47.312 +08:00 [DBG] =========Yi-SQL耗时1.3015毫秒=====
2024-03-30 14:09:47.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:09:47.314 +08:00 [DBG] =========Yi-SQL耗时0.3241毫秒=====
2024-03-30 14:09:47.315 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-03-30 14:09:47.317 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 11.7543ms
2024-03-30 14:09:47.317 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 14:09:47.326 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 14:09:47.326 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:09:47.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'd1c28168-8d08-38a8-2758-3a119a14c17a'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:09:47.330 +08:00 [DBG] =========Yi-SQL耗时0.4945毫秒=====
2024-03-30 14:09:47.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = 'd1c28168-8d08-38a8-2758-3a119a14c17a'    
===============================

2024-03-30 14:09:47.333 +08:00 [DBG] =========Yi-SQL耗时0.5833毫秒=====
2024-03-30 14:09:47.333 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:09:47.333 +08:00 [DBG] =========Yi-SQL耗时0.1985毫秒=====
2024-03-30 14:09:47.334 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:09:47.334 +08:00 [DBG] =========Yi-SQL耗时0.1645毫秒=====
2024-03-30 14:09:47.338 +08:00 [INF] 2024/3/30 14:09:47：cc,UdUOdIP6McY_AaFBgBbIkA连接服务端success，当前已连接1个
2024-03-30 14:09:47.352 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:09:47.354 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 28.441ms
2024-03-30 14:09:47.354 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:11.586 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:11.586 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:11.586 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:11.587 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:11.595 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:11.595 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:11.599 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:11.599 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:11.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`OrderNum`,`State`,`Remark`,`ListClass`,`CssClass`,`DictType`,`DictLabel`,`DictValue`,`IsDefault`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime` FROM `Dictionary`  WHERE (( `DictType` = N'sys_normal_disable' ) AND ( `State` = 1 ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:10:11.604 +08:00 [DBG] =========Yi-SQL耗时0.5196毫秒=====
2024-03-30 14:10:11.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`OrderNum`,`State`,`Remark`,`ListClass`,`CssClass`,`DictType`,`DictLabel`,`DictValue`,`IsDefault`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime` FROM `Dictionary`  WHERE (( `DictType` = N'sys_user_sex' ) AND ( `State` = 1 ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:10:11.643 +08:00 [DBG] =========Yi-SQL耗时1.4344毫秒=====
2024-03-30 14:10:11.718 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:10:11.718 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:10:11.724 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 128.2253ms
2024-03-30 14:10:11.724 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 128.4579ms
2024-03-30 14:10:11.724 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:11.724 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:11.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 14:10:11.743 +08:00 [DBG] =========Yi-SQL耗时0.7785毫秒=====
2024-03-30 14:10:11.745 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`   WHERE ( `IsDeleted` = 0 )  ORDER BY `OrderNum` ASC LIMIT 0,10
===============================

2024-03-30 14:10:11.745 +08:00 [DBG] =========Yi-SQL耗时0.1851毫秒=====
2024-03-30 14:10:11.753 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 14:10:11.753 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:10:11.753 +08:00 [DBG] =========Yi-SQL耗时0.367毫秒=====
2024-03-30 14:10:11.753 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 14:10:11.754 +08:00 [DBG] =========Yi-SQL耗时0.2629毫秒=====
2024-03-30 14:10:11.756 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:10:11.757 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 157.8237ms
2024-03-30 14:10:11.757 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:11.763 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 163.481ms
2024-03-30 14:10:11.763 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:16.948 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:10:16.949 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.UpdateStateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:16.951 +08:00 [INF] Route matched with {action = "UpdateState", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto] UpdateStateAsync(System.Guid, Boolean) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:17.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:10:17.029 +08:00 [DBG] =========Yi-SQL耗时0.1938毫秒=====
2024-03-30 14:10:17.057 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE `User`  SET
           `IsDeleted`=0,`Name`=null,`Age`=null,`UserName`=N'006238',`Password`=N'TNYc_6DDC9Qy6TlmgAmsEAGG2_XcP9qUsqRascOb_0pcbDVmxNn5Ed3bmhQrhpaXprcda7w33eGwKH2SVBt3nw',`Salt`=N'6fipj0FMKElEVZJmw4mnwA==',`Icon`=null,`Nick`=N'lwl',`Email`=null,`Ip`=null,`Address`=null,`Phone`=null,`Introduction`=null,`Remark`=null,`Sex`=2,`DeptId`=N'23b716a6-10da-3fe5-7099-3a119a14c114',`CreationTime`=CAST('2024-03-30 13:50:23.645' AS DATETIME),`CreatorId`=N'd1c28168-8d08-38a8-2758-3a119a14c17a',`LastModifierId`=N'd1c28168-8d08-38a8-2758-3a119a14c17a',`LastModificationTime`=CAST('2024-03-30 14:10:17.043' AS DATETIME),`OrderNum`=0,`State`=0  WHERE `Id`=N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'
===============================

2024-03-30 14:10:17.059 +08:00 [DBG] =========Yi-SQL耗时2.7689毫秒=====
2024-03-30 14:10:17.079 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto'.
2024-03-30 14:10:17.114 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO `OperationLog`  
           (`Id`,`Title`,`OperType`,`RequestMethod`,`OperUser`,`OperIp`,`OperLocation`,`Method`,`RequestParam`,`RequestResult`,`CreationTime`,`CreatorId`)
     VALUES
           (N'818c5981-4cbf-0536-58f8-3a11a027c998',N'更新用户状态',2,N'PUT',N'cc',N'127.0.0.1',N'0 内网IP',N'/api/app/user/8ddb5f70-44a8-7f10-2635-3a11a01593a3/false',null,N'{"Name":null,"Age":null,"UserName":"006238","Icon":null,"Nick":"lwl","Email":null,"Ip":null,"Address":null,"Phone":null,"Introduction":null,"Remark":null,"Sex":2,"State":false,"CreationTime":"2024-03-30T13:50:23.6455946","DeptId":"23b716a6-10da-3fe5-7099-3a119a14c114","Dept":null,"Posts":null,"Roles":null,"Id":"8ddb5f70-44a8-7f10-2635-3a11a01593a3"}',CAST('2024-03-30 14:10:17.113' AS DATETIME),N'd1c28168-8d08-38a8-2758-3a119a14c17a') ;
===============================

2024-03-30 14:10:17.114 +08:00 [DBG] =========Yi-SQL耗时0.4637毫秒=====
2024-03-30 14:10:17.114 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.UpdateStateAsync (Yi.Framework.Rbac.Application) in 163.375ms
2024-03-30 14:10:17.114 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.UpdateStateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:20.013 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:10:20.014 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.UpdateStateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:20.014 +08:00 [INF] Route matched with {action = "UpdateState", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto] UpdateStateAsync(System.Guid, Boolean) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:20.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:10:20.016 +08:00 [DBG] =========Yi-SQL耗时0.197毫秒=====
2024-03-30 14:10:20.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE `User`  SET
           `IsDeleted`=0,`Name`=null,`Age`=null,`UserName`=N'006238',`Password`=N'TNYc_6DDC9Qy6TlmgAmsEAGG2_XcP9qUsqRascOb_0pcbDVmxNn5Ed3bmhQrhpaXprcda7w33eGwKH2SVBt3nw',`Salt`=N'6fipj0FMKElEVZJmw4mnwA==',`Icon`=null,`Nick`=N'lwl',`Email`=null,`Ip`=null,`Address`=null,`Phone`=null,`Introduction`=null,`Remark`=null,`Sex`=2,`DeptId`=N'23b716a6-10da-3fe5-7099-3a119a14c114',`CreationTime`=CAST('2024-03-30 13:50:23.645' AS DATETIME),`CreatorId`=N'd1c28168-8d08-38a8-2758-3a119a14c17a',`LastModifierId`=N'd1c28168-8d08-38a8-2758-3a119a14c17a',`LastModificationTime`=CAST('2024-03-30 14:10:20.017' AS DATETIME),`OrderNum`=0,`State`=1  WHERE `Id`=N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'
===============================

2024-03-30 14:10:20.018 +08:00 [DBG] =========Yi-SQL耗时1.3293毫秒=====
2024-03-30 14:10:20.019 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto'.
2024-03-30 14:10:20.021 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO `OperationLog`  
           (`Id`,`Title`,`OperType`,`RequestMethod`,`OperUser`,`OperIp`,`OperLocation`,`Method`,`RequestParam`,`RequestResult`,`CreationTime`,`CreatorId`)
     VALUES
           (N'9cbf40b6-2d90-e8c9-355a-3a11a027d4f4',N'更新用户状态',2,N'PUT',N'cc',N'127.0.0.1',N'0 内网IP',N'/api/app/user/8ddb5f70-44a8-7f10-2635-3a11a01593a3/true',null,N'{"Name":null,"Age":null,"UserName":"006238","Icon":null,"Nick":"lwl","Email":null,"Ip":null,"Address":null,"Phone":null,"Introduction":null,"Remark":null,"Sex":2,"State":true,"CreationTime":"2024-03-30T13:50:23.6455946","DeptId":"23b716a6-10da-3fe5-7099-3a119a14c114","Dept":null,"Posts":null,"Roles":null,"Id":"8ddb5f70-44a8-7f10-2635-3a11a01593a3"}',CAST('2024-03-30 14:10:20.021' AS DATETIME),N'd1c28168-8d08-38a8-2758-3a119a14c17a') ;
===============================

2024-03-30 14:10:20.022 +08:00 [DBG] =========Yi-SQL耗时0.4065毫秒=====
2024-03-30 14:10:20.022 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.UpdateStateAsync (Yi.Framework.Rbac.Application) in 7.677ms
2024-03-30 14:10:20.022 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.UpdateStateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:22.523 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:22.523 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:22.523 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:22.525 +08:00 [INF] Route matched with {action = "Get", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:22.526 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:22.526 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:22.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:10:22.532 +08:00 [DBG] =========Yi-SQL耗时0.3331毫秒=====
2024-03-30 14:10:22.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = '8ddb5f70-44a8-7f10-2635-3a11a01593a3'    
===============================

2024-03-30 14:10:22.533 +08:00 [DBG] =========Yi-SQL耗时0.1774毫秒=====
2024-03-30 14:10:22.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` = '825a7a31-a28d-0b1e-a7b7-3a119a14c16d'    
===============================

2024-03-30 14:10:22.534 +08:00 [DBG] =========Yi-SQL耗时0.2765毫秒=====
2024-03-30 14:10:22.535 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`PostId` as bid FROM `UserPost`  WHERE   `UserId` = '8ddb5f70-44a8-7f10-2635-3a11a01593a3'    
===============================

2024-03-30 14:10:22.536 +08:00 [DBG] =========Yi-SQL耗时0.3887毫秒=====
2024-03-30 14:10:22.536 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`State` AS `State`,`PostCode` AS `PostCode`,`PostName` AS `PostName`,`Remark` AS `Remark` FROM `Post`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)    
===============================

2024-03-30 14:10:22.537 +08:00 [DBG] =========Yi-SQL耗时0.2186毫秒=====
2024-03-30 14:10:22.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `Role`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:10:22.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `Post`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:10:22.543 +08:00 [DBG] =========Yi-SQL耗时0.3308毫秒=====
2024-03-30 14:10:22.543 +08:00 [DBG] =========Yi-SQL耗时0.3315毫秒=====
2024-03-30 14:10:22.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`State` AS `State`,`DeptName` AS `DeptName`,`DeptCode` AS `DeptCode`,`Leader` AS `Leader`,`ParentId` AS `ParentId`,`Remark` AS `Remark` FROM `Dept`  WHERE   `Id` = '23b716a6-10da-3fe5-7099-3a119a14c114'    
===============================

2024-03-30 14:10:22.545 +08:00 [DBG] =========Yi-SQL耗时1.423毫秒=====
2024-03-30 14:10:22.551 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`PostCode`,`PostName`,`Remark` FROM `Post`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 14:10:22.551 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 14:10:22.551 +08:00 [DBG] =========Yi-SQL耗时0.2348毫秒=====
2024-03-30 14:10:22.551 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto'.
2024-03-30 14:10:22.555 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application) in 29.5558ms
2024-03-30 14:10:22.555 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:22.555 +08:00 [DBG] =========Yi-SQL耗时4.912毫秒=====
2024-03-30 14:10:22.560 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:10:22.563 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 37.1846ms
2024-03-30 14:10:22.563 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:22.563 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:10:22.565 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 39.0116ms
2024-03-30 14:10:22.565 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:27.431 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:10:27.432 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:27.434 +08:00 [INF] Route matched with {action = "Update", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:27.463 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `User`   WHERE ((N'006238' = `UserName`) AND NOT (N'8ddb5f70-44a8-7f10-2635-3a11a01593a3' = `Id`) )  AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:10:27.463 +08:00 [DBG] =========Yi-SQL耗时0.2044毫秒=====
2024-03-30 14:10:27.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:10:27.464 +08:00 [DBG] =========Yi-SQL耗时0.1023毫秒=====
2024-03-30 14:10:27.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE `User`  SET
           `IsDeleted`=0,`Name`=null,`Age`=null,`UserName`=N'006238',`Password`=N'TNYc_6DDC9Qy6TlmgAmsEAGG2_XcP9qUsqRascOb_0pcbDVmxNn5Ed3bmhQrhpaXprcda7w33eGwKH2SVBt3nw',`Salt`=N'6fipj0FMKElEVZJmw4mnwA==',`Icon`=null,`Nick`=N'lwl',`Email`=null,`Ip`=null,`Address`=null,`Phone`=null,`Introduction`=null,`Remark`=null,`Sex`=2,`DeptId`=N'23b716a6-10da-3fe5-7099-3a119a14c114',`CreationTime`=CAST('2024-03-30 13:50:23.645' AS DATETIME),`CreatorId`=N'd1c28168-8d08-38a8-2758-3a119a14c17a',`LastModifierId`=N'd1c28168-8d08-38a8-2758-3a119a14c17a',`LastModificationTime`=CAST('2024-03-30 14:10:27.510' AS DATETIME),`OrderNum`=0,`State`=1  WHERE `Id`=N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'
===============================

2024-03-30 14:10:27.513 +08:00 [DBG] =========Yi-SQL耗时2.6213毫秒=====
2024-03-30 14:10:27.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM `UserRole` WHERE  (`UserId` IN ('8ddb5f70-44a8-7f10-2635-3a11a01593a3'))  
===============================

2024-03-30 14:10:27.528 +08:00 [DBG] =========Yi-SQL耗时0.4138毫秒=====
2024-03-30 14:10:27.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO `UserRole`  
           (`Id`,`RoleId`,`UserId`)
     VALUES
           (N'2e698d61-8018-91c1-505b-3a11a027f24b',N'f7324be2-5f20-cd42-e7f6-3a119a14c16d',N'8ddb5f70-44a8-7f10-2635-3a11a01593a3') ;
===============================

2024-03-30 14:10:27.532 +08:00 [DBG] =========Yi-SQL耗时0.1195毫秒=====
2024-03-30 14:10:27.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM `UserPost` WHERE  (`UserId` IN ('8ddb5f70-44a8-7f10-2635-3a11a01593a3'))  
===============================

2024-03-30 14:10:27.533 +08:00 [DBG] =========Yi-SQL耗时0.083毫秒=====
2024-03-30 14:10:27.534 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto'.
2024-03-30 14:10:27.536 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO `OperationLog`  
           (`Id`,`Title`,`OperType`,`RequestMethod`,`OperUser`,`OperIp`,`OperLocation`,`Method`,`RequestParam`,`RequestResult`,`CreationTime`,`CreatorId`)
     VALUES
           (N'361a1eb8-68de-9431-cac0-3a11a027f24f',N'更新用户',2,N'PUT',N'cc',N'127.0.0.1',N'0 内网IP',N'/api/app/user/8ddb5f70-44a8-7f10-2635-3a11a01593a3',null,N'{"Name":null,"Age":null,"UserName":"006238","Icon":null,"Nick":"lwl","Email":null,"Ip":null,"Address":null,"Phone":null,"Introduction":null,"Remark":null,"Sex":2,"State":true,"CreationTime":"2024-03-30T13:50:23.6455946","DeptId":"23b716a6-10da-3fe5-7099-3a119a14c114","Dept":null,"Posts":null,"Roles":null,"Id":"8ddb5f70-44a8-7f10-2635-3a11a01593a3"}',CAST('2024-03-30 14:10:27.536' AS DATETIME),N'd1c28168-8d08-38a8-2758-3a119a14c17a') ;
===============================

2024-03-30 14:10:27.537 +08:00 [DBG] =========Yi-SQL耗时0.4011毫秒=====
2024-03-30 14:10:27.537 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.UpdateAsync (Yi.Framework.Rbac.Application) in 102.4635ms
2024-03-30 14:10:27.537 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:27.556 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:27.556 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:27.560 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 14:10:27.560 +08:00 [DBG] =========Yi-SQL耗时0.5095毫秒=====
2024-03-30 14:10:27.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 14:10:27.561 +08:00 [DBG] =========Yi-SQL耗时0.3783毫秒=====
2024-03-30 14:10:27.562 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:10:27.562 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 6.4289ms
2024-03-30 14:10:27.562 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:29.798 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:29.798 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:29.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `Role`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:10:29.801 +08:00 [DBG] =========Yi-SQL耗时0.4475毫秒=====
2024-03-30 14:10:29.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 14:10:29.802 +08:00 [DBG] =========Yi-SQL耗时0.1466毫秒=====
2024-03-30 14:10:29.803 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:10:29.803 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 5.424ms
2024-03-30 14:10:29.803 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:32.889 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:32.889 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:32.892 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:32.892 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:32.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 14:10:32.899 +08:00 [DBG] =========Yi-SQL耗时0.3114毫秒=====
2024-03-30 14:10:32.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`  WHERE `Id` = N'825a7a31-a28d-0b1e-a7b7-3a119a14c16d'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:10:32.904 +08:00 [DBG] =========Yi-SQL耗时0.2252毫秒=====
2024-03-30 14:10:32.910 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-03-30 14:10:32.912 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 19.9213ms
2024-03-30 14:10:32.912 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:32.919 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:10:32.934 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 41.7288ms
2024-03-30 14:10:32.934 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:32.946 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:32.948 +08:00 [INF] Route matched with {action = "GetListRoleId", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:32.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu` `m`  WHERE (EXISTS ( SELECT * FROM `RoleMenu` `rm`  WHERE (( `RoleId` = N'825a7a31-a28d-0b1e-a7b7-3a119a14c16d' ) AND ( `MenuId` = `m`.`Id` )) ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:10:32.965 +08:00 [DBG] =========Yi-SQL耗时1.9422毫秒=====
2024-03-30 14:10:32.967 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:10:32.968 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application) in 19.5651ms
2024-03-30 14:10:32.968 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:47.386 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:47.386 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:47.386 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:47.386 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:47.387 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 14:10:47.388 +08:00 [DBG] =========Yi-SQL耗时0.5012毫秒=====
2024-03-30 14:10:47.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`  WHERE `Id` = N'825a7a31-a28d-0b1e-a7b7-3a119a14c16d'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:10:47.388 +08:00 [DBG] =========Yi-SQL耗时0.226毫秒=====
2024-03-30 14:10:47.389 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-03-30 14:10:47.389 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 2.4441ms
2024-03-30 14:10:47.389 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:47.400 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:10:47.405 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 19.162ms
2024-03-30 14:10:47.405 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:47.418 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:47.418 +08:00 [INF] Route matched with {action = "GetListRoleId", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:47.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu` `m`  WHERE (EXISTS ( SELECT * FROM `RoleMenu` `rm`  WHERE (( `RoleId` = N'825a7a31-a28d-0b1e-a7b7-3a119a14c16d' ) AND ( `MenuId` = `m`.`Id` )) ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:10:47.419 +08:00 [DBG] =========Yi-SQL耗时0.2977毫秒=====
2024-03-30 14:10:47.420 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:10:47.420 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application) in 1.888ms
2024-03-30 14:10:47.420 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:52.146 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:52.146 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:52.146 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:52.146 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:52.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 14:10:52.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`  WHERE `Id` = N'825a7a31-a28d-0b1e-a7b7-3a119a14c16d'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:10:52.148 +08:00 [DBG] =========Yi-SQL耗时0.1577毫秒=====
2024-03-30 14:10:52.148 +08:00 [DBG] =========Yi-SQL耗时0.3738毫秒=====
2024-03-30 14:10:52.148 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-03-30 14:10:52.148 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 2.4653ms
2024-03-30 14:10:52.149 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:52.161 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:10:52.165 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 19.2383ms
2024-03-30 14:10:52.165 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:52.179 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:52.179 +08:00 [INF] Route matched with {action = "GetListRoleId", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:52.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu` `m`  WHERE (EXISTS ( SELECT * FROM `RoleMenu` `rm`  WHERE (( `RoleId` = N'825a7a31-a28d-0b1e-a7b7-3a119a14c16d' ) AND ( `MenuId` = `m`.`Id` )) ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:10:52.180 +08:00 [DBG] =========Yi-SQL耗时0.2542毫秒=====
2024-03-30 14:10:52.181 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:10:52.181 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application) in 1.836ms
2024-03-30 14:10:52.181 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:55.201 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:55.201 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:55.202 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:55.202 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:55.203 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 14:10:55.203 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`  WHERE `Id` = N'b24b236b-ef34-3382-857f-3a119a14c16d'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:10:55.203 +08:00 [DBG] =========Yi-SQL耗时0.2246毫秒=====
2024-03-30 14:10:55.203 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-03-30 14:10:55.204 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 2.0603ms
2024-03-30 14:10:55.204 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:55.205 +08:00 [DBG] =========Yi-SQL耗时1.8099毫秒=====
2024-03-30 14:10:55.218 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:10:55.224 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 22.7603ms
2024-03-30 14:10:55.225 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:55.235 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:55.236 +08:00 [INF] Route matched with {action = "GetListRoleId", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:55.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu` `m`  WHERE (EXISTS ( SELECT * FROM `RoleMenu` `rm`  WHERE (( `RoleId` = N'b24b236b-ef34-3382-857f-3a119a14c16d' ) AND ( `MenuId` = `m`.`Id` )) ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:10:55.237 +08:00 [DBG] =========Yi-SQL耗时0.2864毫秒=====
2024-03-30 14:10:55.237 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:10:55.237 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application) in 1.6424ms
2024-03-30 14:10:55.237 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:57.809 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:57.809 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:57.809 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:57.809 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:57.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 14:10:57.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`  WHERE `Id` = N'139ea5d7-b6a3-2ee3-d5db-3a119a14c16c'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:10:57.811 +08:00 [DBG] =========Yi-SQL耗时0.2678毫秒=====
2024-03-30 14:10:57.811 +08:00 [DBG] =========Yi-SQL耗时0.3574毫秒=====
2024-03-30 14:10:57.812 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-03-30 14:10:57.812 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 2.786ms
2024-03-30 14:10:57.812 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:57.826 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:10:57.831 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 21.6121ms
2024-03-30 14:10:57.831 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:57.846 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:10:57.846 +08:00 [INF] Route matched with {action = "GetListRoleId", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:10:57.848 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu` `m`  WHERE (EXISTS ( SELECT * FROM `RoleMenu` `rm`  WHERE (( `RoleId` = N'139ea5d7-b6a3-2ee3-d5db-3a119a14c16c' ) AND ( `MenuId` = `m`.`Id` )) ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:10:57.848 +08:00 [DBG] =========Yi-SQL耗时0.2401毫秒=====
2024-03-30 14:10:57.848 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:10:57.848 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application) in 1.9445ms
2024-03-30 14:10:57.848 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:13.975 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:13.990 +08:00 [INF] Route matched with {action = "Get", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 14:11:13.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'c00802ab-536a-fe9c-2038-3a119a14c17d'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:11:13.993 +08:00 [DBG] =========Yi-SQL耗时0.4939毫秒=====
2024-03-30 14:11:13.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = 'c00802ab-536a-fe9c-2038-3a119a14c17d'    
===============================

2024-03-30 14:11:13.995 +08:00 [DBG] =========Yi-SQL耗时0.5229毫秒=====
2024-03-30 14:11:13.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)    
===============================

2024-03-30 14:11:13.996 +08:00 [DBG] =========Yi-SQL耗时0.2989毫秒=====
2024-03-30 14:11:13.997 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`PostId` as bid FROM `UserPost`  WHERE   `UserId` = 'c00802ab-536a-fe9c-2038-3a119a14c17d'    
===============================

2024-03-30 14:11:13.997 +08:00 [DBG] =========Yi-SQL耗时0.1733毫秒=====
2024-03-30 14:11:13.997 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`State` AS `State`,`PostCode` AS `PostCode`,`PostName` AS `PostName`,`Remark` AS `Remark` FROM `Post`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)    
===============================

2024-03-30 14:11:13.997 +08:00 [DBG] =========Yi-SQL耗时0.2085毫秒=====
2024-03-30 14:11:14.000 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`State` AS `State`,`DeptName` AS `DeptName`,`DeptCode` AS `DeptCode`,`Leader` AS `Leader`,`ParentId` AS `ParentId`,`Remark` AS `Remark` FROM `Dept`  WHERE   `Id` IN (null)    
===============================

2024-03-30 14:11:14.001 +08:00 [DBG] =========Yi-SQL耗时0.6292毫秒=====
2024-03-30 14:11:14.002 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto'.
2024-03-30 14:11:14.002 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application) in 12.1748ms
2024-03-30 14:11:14.002 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:21.963 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 14:11:21.965 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-03-30 14:11:21.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTenant`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:11:21.972 +08:00 [DBG] =========Yi-SQL耗时0.2482毫秒=====
2024-03-30 14:11:21.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`EntityVersion`,`TenantConnectionString`,`DbType`,`IsDeleted`,`DeleterId`,`DeletionTime`,`LastModificationTime`,`LastModifierId`,`CreationTime`,`CreatorId`,`ConcurrencyStamp` FROM `YiTenant`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 14:11:21.972 +08:00 [DBG] =========Yi-SQL耗时0.1453毫秒=====
2024-03-30 14:11:21.974 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:11:21.975 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 10.4313ms
2024-03-30 14:11:21.975 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 14:11:27.124 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:27.124 +08:00 [INF] Route matched with {action = "Get", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 14:11:27.125 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:11:27.125 +08:00 [DBG] =========Yi-SQL耗时0.2539毫秒=====
2024-03-30 14:11:27.126 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = '8ddb5f70-44a8-7f10-2635-3a11a01593a3'    
===============================

2024-03-30 14:11:27.127 +08:00 [DBG] =========Yi-SQL耗时0.4026毫秒=====
2024-03-30 14:11:27.128 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` = 'f7324be2-5f20-cd42-e7f6-3a119a14c16d'    
===============================

2024-03-30 14:11:27.128 +08:00 [DBG] =========Yi-SQL耗时0.5819毫秒=====
2024-03-30 14:11:27.129 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`PostId` as bid FROM `UserPost`  WHERE   `UserId` = '8ddb5f70-44a8-7f10-2635-3a11a01593a3'    
===============================

2024-03-30 14:11:27.129 +08:00 [DBG] =========Yi-SQL耗时0.1273毫秒=====
2024-03-30 14:11:27.129 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`State` AS `State`,`PostCode` AS `PostCode`,`PostName` AS `PostName`,`Remark` AS `Remark` FROM `Post`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)    
===============================

2024-03-30 14:11:27.129 +08:00 [DBG] =========Yi-SQL耗时0.1246毫秒=====
2024-03-30 14:11:27.130 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`State` AS `State`,`DeptName` AS `DeptName`,`DeptCode` AS `DeptCode`,`Leader` AS `Leader`,`ParentId` AS `ParentId`,`Remark` AS `Remark` FROM `Dept`  WHERE   `Id` = '23b716a6-10da-3fe5-7099-3a119a14c114'    
===============================

2024-03-30 14:11:27.130 +08:00 [DBG] =========Yi-SQL耗时0.1323毫秒=====
2024-03-30 14:11:27.131 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto'.
2024-03-30 14:11:27.131 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application) in 7.212ms
2024-03-30 14:11:27.131 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:32.670 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:32.670 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:32.670 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 14:11:32.670 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:11:32.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 14:11:32.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`  WHERE `Id` = N'f7324be2-5f20-cd42-e7f6-3a119a14c16d'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:11:32.671 +08:00 [DBG] =========Yi-SQL耗时0.3237毫秒=====
2024-03-30 14:11:32.671 +08:00 [DBG] =========Yi-SQL耗时0.1854毫秒=====
2024-03-30 14:11:32.671 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-03-30 14:11:32.672 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 1.8623ms
2024-03-30 14:11:32.672 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:32.683 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:11:32.694 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 23.8868ms
2024-03-30 14:11:32.694 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:32.714 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:32.714 +08:00 [INF] Route matched with {action = "GetListRoleId", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:11:32.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu` `m`  WHERE (EXISTS ( SELECT * FROM `RoleMenu` `rm`  WHERE (( `RoleId` = N'f7324be2-5f20-cd42-e7f6-3a119a14c16d' ) AND ( `MenuId` = `m`.`Id` )) ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:11:32.717 +08:00 [DBG] =========Yi-SQL耗时1.0894毫秒=====
2024-03-30 14:11:32.718 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:11:32.719 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application) in 4.2156ms
2024-03-30 14:11:32.719 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:35.954 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:11:35.955 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:35.957 +08:00 [INF] Route matched with {action = "Update", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 14:11:35.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`  WHERE `Id` = N'f7324be2-5f20-cd42-e7f6-3a119a14c16d'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:11:35.963 +08:00 [DBG] =========Yi-SQL耗时0.1248毫秒=====
2024-03-30 14:11:35.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE `Role`  SET
           `IsDeleted`=0,`CreationTime`=CAST('2024-03-29 09:51:46.539' AS DATETIME),`CreatorId`=null,`LastModifierId`=N'd1c28168-8d08-38a8-2758-3a119a14c17a',`LastModificationTime`=CAST('2024-03-30 14:11:35.968' AS DATETIME),`OrderNum`=1,`RoleName`=N'测试角色',`RoleCode`=N'test',`Remark`=N'测试用的角色',`DataScope`=0,`State`=1  WHERE `Id`=N'f7324be2-5f20-cd42-e7f6-3a119a14c16d'
===============================

2024-03-30 14:11:35.971 +08:00 [DBG] =========Yi-SQL耗时1.6686毫秒=====
2024-03-30 14:11:35.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM `RoleMenu` WHERE  (`RoleId` IN ('f7324be2-5f20-cd42-e7f6-3a119a14c16d'))  
===============================

2024-03-30 14:11:35.972 +08:00 [DBG] =========Yi-SQL耗时0.0792毫秒=====
2024-03-30 14:11:35.975 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO `RoleMenu`  (`Id`,`RoleId`,`MenuId`) VALUES('22f3690e-065f-862e-8ae1-3a11a028fda5','f7324be2-5f20-cd42-e7f6-3a119a14c16d','e7774576-5191-6bc6-dbc3-3a119a14c154'),  ('0ecc0625-0bde-ddfb-8493-3a11a028fda5','f7324be2-5f20-cd42-e7f6-3a119a14c16d','d0a5c163-42c2-a315-c30d-3a119a14c155'),  ('f873d452-e310-dc94-1af5-3a11a028fda6','f7324be2-5f20-cd42-e7f6-3a119a14c16d','a25cf472-c604-51d9-e769-3a119a14c155'),  ('f7e8f41e-229a-d209-2456-3a11a028fda6','f7324be2-5f20-cd42-e7f6-3a119a14c16d','7d7bdc79-0d6c-14c6-270a-3a119a14c155'),  ('8dd50013-cc9c-0552-8ac1-3a11a028fda6','f7324be2-5f20-cd42-e7f6-3a119a14c16d','3942eb39-8ecc-1e85-b303-3a119a14c155'),  ('c86d74ac-1eb2-44e5-6b3c-3a11a028fda6','f7324be2-5f20-cd42-e7f6-3a119a14c16d','f4d699b2-f11c-be72-37b4-3a119a14c18d'),  ('64428e38-1f69-b0de-82e6-3a11a028fda6','f7324be2-5f20-cd42-e7f6-3a119a14c16d','acff8381-b052-d246-e640-3a119a14c155') ;SELECT LAST_INSERT_ROWID();

===============================

2024-03-30 14:11:35.976 +08:00 [DBG] =========Yi-SQL耗时0.5102毫秒=====
2024-03-30 14:11:35.976 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-03-30 14:11:35.976 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.UpdateAsync (Yi.Framework.Rbac.Application) in 18.9167ms
2024-03-30 14:11:35.976 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:35.994 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:35.994 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 14:11:35.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `Role`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:11:35.997 +08:00 [DBG] =========Yi-SQL耗时0.3663毫秒=====
2024-03-30 14:11:35.997 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 14:11:35.997 +08:00 [DBG] =========Yi-SQL耗时0.2093毫秒=====
2024-03-30 14:11:35.999 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:11:35.999 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 5.1971ms
2024-03-30 14:11:35.999 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:41.282 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:41.282 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:41.283 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-03-30 14:11:41.283 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 14:11:41.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`  WHERE `Id` = N'f7324be2-5f20-cd42-e7f6-3a119a14c16d'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:11:41.284 +08:00 [DBG] =========Yi-SQL耗时0.2587毫秒=====
2024-03-30 14:11:41.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 14:11:41.285 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-03-30 14:11:41.285 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 2.0748ms
2024-03-30 14:11:41.285 +08:00 [DBG] =========Yi-SQL耗时0.232毫秒=====
2024-03-30 14:11:41.285 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:41.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`   WHERE ( `IsDeleted` = 0 )  ORDER BY `OrderNum` ASC LIMIT 0,10
===============================

2024-03-30 14:11:41.285 +08:00 [DBG] =========Yi-SQL耗时0.2398毫秒=====
2024-03-30 14:11:41.288 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:11:41.289 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 6.0237ms
2024-03-30 14:11:41.289 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:41.321 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:41.324 +08:00 [INF] Route matched with {action = "GetRoleId", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-03-30 14:11:41.327 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept` `d`  WHERE (EXISTS ( SELECT * FROM `RoleDept` `rd`  WHERE (( `RoleId` = N'f7324be2-5f20-cd42-e7f6-3a119a14c16d' ) AND ( `d`.`Id` = `DeptId` )) ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:11:41.328 +08:00 [DBG] =========Yi-SQL耗时0.3037毫秒=====
2024-03-30 14:11:41.328 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:11:41.328 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetRoleIdAsync (Yi.Framework.Rbac.Application) in 4.3987ms
2024-03-30 14:11:41.328 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:51.470 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:11:51.471 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:51.473 +08:00 [INF] Route matched with {action = "PostLogout", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] PostLogout() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:11:51.476 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-03-30 14:11:51.476 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application) in 3.0864ms
2024-03-30 14:11:51.476 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:51.483 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:11:51.484 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 14:11:51.484 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 14:11:51.484 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 14:11:51.484 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 14:11:51.521 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:11:51.522 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 14:11:51.522 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 14:11:51.522 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 14:11:51.558 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 14:11:51.559 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 14:11:51.559 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-03-30 14:11:51.559 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 14:11:51.694 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:11:51.695 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 14:11:51.695 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 14:11:51.696 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 14:11:51.696 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 14:11:51.836 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:11:51.837 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 14:11:51.837 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 14:11:51.838 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 14:11:51.940 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:51.940 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 14:11:51.940 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-03-30 14:11:51.940 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:11:51.942 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`EntityVersion`,`TenantConnectionString`,`DbType`,`IsDeleted`,`DeleterId`,`DeletionTime`,`LastModificationTime`,`LastModifierId`,`CreationTime`,`CreatorId`,`ConcurrencyStamp` FROM `YiTenant`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:11:51.942 +08:00 [DBG] =========Yi-SQL耗时0.3409毫秒=====
2024-03-30 14:11:51.942 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-03-30 14:11:51.942 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:11:51.942 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 2.229ms
2024-03-30 14:11:51.942 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:51.942 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 2.3394ms
2024-03-30 14:11:51.942 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 14:11:59.537 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:11:59.537 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:59.538 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:11:59.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`   WHERE (( `UserName` = N'006238' ) AND ( `State` = 1 ))  AND ( `IsDeleted` = 0 )  ORDER BY DATETIME('now')    LIMIT 0,1
===============================

2024-03-30 14:11:59.540 +08:00 [DBG] =========Yi-SQL耗时0.2432毫秒=====
2024-03-30 14:11:59.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:11:59.541 +08:00 [DBG] =========Yi-SQL耗时0.1138毫秒=====
2024-03-30 14:11:59.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = '8ddb5f70-44a8-7f10-2635-3a11a01593a3'    
===============================

2024-03-30 14:11:59.543 +08:00 [DBG] =========Yi-SQL耗时0.6061毫秒=====
2024-03-30 14:11:59.546 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` = 'f7324be2-5f20-cd42-e7f6-3a119a14c16d'     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:11:59.546 +08:00 [DBG] =========Yi-SQL耗时0.2085毫秒=====
2024-03-30 14:11:59.546 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `RoleId` as aid,`MenuId` as bid FROM `RoleMenu`  WHERE   `RoleId` = 'f7324be2-5f20-cd42-e7f6-3a119a14c16d'    
===============================

2024-03-30 14:11:59.546 +08:00 [DBG] =========Yi-SQL耗时0.1037毫秒=====
2024-03-30 14:11:59.547 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`State` AS `State`,`MenuName` AS `MenuName`,`MenuType` AS `MenuType`,`PermissionCode` AS `PermissionCode`,`ParentId` AS `ParentId`,`MenuIcon` AS `MenuIcon`,`Router` AS `Router`,`IsLink` AS `IsLink`,`IsCache` AS `IsCache`,`IsShow` AS `IsShow`,`Remark` AS `Remark`,`Component` AS `Component`,`Query` AS `Query` FROM `Menu`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN ('e7774576-5191-6bc6-dbc3-3a119a14c154','d0a5c163-42c2-a315-c30d-3a119a14c155','a25cf472-c604-51d9-e769-3a119a14c155','7d7bdc79-0d6c-14c6-270a-3a119a14c155','3942eb39-8ecc-1e85-b303-3a119a14c155','f4d699b2-f11c-be72-37b4-3a119a14c18d','acff8381-b052-d246-e640-3a119a14c155')     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:11:59.548 +08:00 [DBG] =========Yi-SQL耗时0.3787毫秒=====
2024-03-30 14:11:59.571 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-03-30 14:11:59.571 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 33.611ms
2024-03-30 14:11:59.571 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:59.572 +08:00 [INF] 用户【8ddb5f70-44a8-7f10-2635-3a11a01593a3:006238】登入系统
2024-03-30 14:11:59.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO `LoginLog`  
           (`Id`,`CreationTime`,`LoginUser`,`LoginLocation`,`LoginIp`,`Browser`,`Os`,`LogMsg`,`CreatorId`)
     VALUES
           (N'ef070068-d48e-e61f-22e0-3a11a02959d4',CAST('2024-03-30 14:11:59.572' AS DATETIME),N'006238',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'006238登录系统',N'8ddb5f70-44a8-7f10-2635-3a11a01593a3') ;
===============================

2024-03-30 14:11:59.578 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:11:59.579 +08:00 [DBG] =========Yi-SQL耗时6.6181毫秒=====
2024-03-30 14:11:59.580 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 14:11:59.580 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 14:11:59.588 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:59.588 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:11:59.589 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:11:59.589 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-03-30 14:11:59.589 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.3633ms
2024-03-30 14:11:59.589 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:59.590 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 14:11:59.597 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:59.597 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:11:59.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'    AND ( `IsDeleted` = 0 )  AND ( 1 = 1 )  
===============================

2024-03-30 14:11:59.599 +08:00 [DBG] =========Yi-SQL耗时0.2392毫秒=====
2024-03-30 14:11:59.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = '8ddb5f70-44a8-7f10-2635-3a11a01593a3'    
===============================

2024-03-30 14:11:59.601 +08:00 [DBG] =========Yi-SQL耗时0.5868毫秒=====
2024-03-30 14:11:59.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 ) AND ( 1 = 1 )    AND   `Id` = 'f7324be2-5f20-cd42-e7f6-3a119a14c16d'     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:11:59.602 +08:00 [DBG] =========Yi-SQL耗时0.2543毫秒=====
2024-03-30 14:11:59.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `RoleId` as aid,`MenuId` as bid FROM `RoleMenu`  WHERE   `RoleId` = 'f7324be2-5f20-cd42-e7f6-3a119a14c16d'    
===============================

2024-03-30 14:11:59.602 +08:00 [DBG] =========Yi-SQL耗时0.099毫秒=====
2024-03-30 14:11:59.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`State` AS `State`,`MenuName` AS `MenuName`,`MenuType` AS `MenuType`,`PermissionCode` AS `PermissionCode`,`ParentId` AS `ParentId`,`MenuIcon` AS `MenuIcon`,`Router` AS `Router`,`IsLink` AS `IsLink`,`IsCache` AS `IsCache`,`IsShow` AS `IsShow`,`Remark` AS `Remark`,`Component` AS `Component`,`Query` AS `Query` FROM `Menu`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN ('e7774576-5191-6bc6-dbc3-3a119a14c154','d0a5c163-42c2-a315-c30d-3a119a14c155','a25cf472-c604-51d9-e769-3a119a14c155','7d7bdc79-0d6c-14c6-270a-3a119a14c155','3942eb39-8ecc-1e85-b303-3a119a14c155','f4d699b2-f11c-be72-37b4-3a119a14c18d','acff8381-b052-d246-e640-3a119a14c155')     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:11:59.603 +08:00 [DBG] =========Yi-SQL耗时0.178毫秒=====
2024-03-30 14:11:59.603 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:11:59.603 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 5.9845ms
2024-03-30 14:11:59.603 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 14:11:59.618 +08:00 [INF] 2024/3/30 14:11:59：006238,Uk4zvjLY1g3fpZ650zoGNA连接服务端success，当前已连接1个
2024-03-30 14:12:18.464 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:12:18.465 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-03-30 14:12:18.465 +08:00 [INF] Route matched with {action = "PostLogout", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] PostLogout() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:12:18.466 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-03-30 14:12:18.466 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application) in 1.252ms
2024-03-30 14:12:18.466 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-03-30 14:12:18.475 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:12:18.476 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 14:12:18.476 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 14:12:18.476 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 14:12:18.477 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 14:12:18.506 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:12:18.507 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 14:12:18.507 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 14:12:18.508 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 14:12:18.513 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 14:12:18.514 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 14:12:18.515 +08:00 [INF] 用户006238离开了，当前已连接0个
2024-03-30 14:12:18.518 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 14:12:18.660 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:12:18.660 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 14:12:18.660 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 14:12:18.662 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 14:12:18.663 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 14:12:18.713 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:12:18.714 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 14:12:18.714 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 14:12:18.714 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 14:12:18.767 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 14:12:18.767 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-03-30 14:12:18.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`EntityVersion`,`TenantConnectionString`,`DbType`,`IsDeleted`,`DeleterId`,`DeletionTime`,`LastModificationTime`,`LastModifierId`,`CreationTime`,`CreatorId`,`ConcurrencyStamp` FROM `YiTenant`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:12:18.770 +08:00 [DBG] =========Yi-SQL耗时0.3514毫秒=====
2024-03-30 14:12:18.770 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:12:18.770 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 2.7252ms
2024-03-30 14:12:18.770 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 14:12:18.774 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:12:18.774 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:12:18.776 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-03-30 14:12:18.776 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 1.9607ms
2024-03-30 14:12:18.776 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:12:23.007 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 14:12:34.332 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-03-30 14:12:34.343 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-03-30 14:12:38.574 +08:00 [INF] Loaded ABP modules:
2024-03-30 14:12:38.575 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-03-30 14:12:38.575 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-03-30 14:12:38.575 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-03-30 14:12:38.575 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-03-30 14:12:38.575 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-03-30 14:12:38.575 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-03-30 14:12:38.575 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-03-30 14:12:38.575 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-03-30 14:12:38.575 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-03-30 14:12:38.575 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-03-30 14:12:38.575 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-03-30 14:12:38.575 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-03-30 14:12:38.575 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-03-30 14:12:38.575 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-03-30 14:12:38.575 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-03-30 14:12:38.575 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-03-30 14:12:38.575 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-03-30 14:12:38.575 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-03-30 14:12:38.575 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-03-30 14:12:38.575 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-03-30 14:12:38.575 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-03-30 14:12:38.575 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-03-30 14:12:38.575 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-03-30 14:12:38.575 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-03-30 14:12:38.575 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-03-30 14:12:38.575 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-03-30 14:12:38.575 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-03-30 14:12:38.575 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-03-30 14:12:38.575 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-03-30 14:12:38.575 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-03-30 14:12:38.575 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-03-30 14:12:38.575 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-03-30 14:12:38.575 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-03-30 14:12:38.575 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-03-30 14:12:38.575 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-03-30 14:12:38.575 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-03-30 14:12:38.575 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-03-30 14:12:38.575 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-03-30 14:12:38.575 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-03-30 14:12:38.575 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-03-30 14:12:38.575 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-03-30 14:12:38.575 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-03-30 14:12:38.575 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-03-30 14:12:38.575 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-03-30 14:12:38.575 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-03-30 14:12:38.575 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-03-30 14:12:38.575 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-03-30 14:12:38.575 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-03-30 14:12:38.575 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-03-30 14:12:38.575 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-03-30 14:12:38.575 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-03-30 14:12:38.575 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-03-30 14:12:38.575 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-03-30 14:12:38.575 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-03-30 14:12:38.575 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-03-30 14:12:38.575 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-03-30 14:12:38.575 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-03-30 14:12:38.575 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-03-30 14:12:38.575 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-03-30 14:12:38.575 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-03-30 14:12:38.575 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-03-30 14:12:38.575 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-03-30 14:12:38.575 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-03-30 14:12:38.575 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-03-30 14:12:38.575 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-03-30 14:12:38.575 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-03-30 14:12:38.575 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-03-30 14:12:38.575 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-03-30 14:12:38.575 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-03-30 14:12:38.575 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-03-30 14:12:38.575 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-03-30 14:12:38.575 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-03-30 14:12:38.575 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-03-30 14:12:38.575 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-03-30 14:12:38.575 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-03-30 14:12:38.575 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-03-30 14:12:38.575 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-03-30 14:12:38.575 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-03-30 14:12:38.575 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-03-30 14:12:38.575 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-03-30 14:12:38.575 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-03-30 14:12:38.575 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-03-30 14:12:38.575 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-03-30 14:12:38.575 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-03-30 14:12:38.575 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-03-30 14:12:38.575 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-03-30 14:12:38.575 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-03-30 14:12:38.575 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-03-30 14:12:38.575 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-03-30 14:12:38.575 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-03-30 14:12:38.575 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-03-30 14:12:38.575 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-03-30 14:12:38.575 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-03-30 14:12:38.580 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-03-30 14:12:38.584 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：DataSource=yi-abp-dev.db
数据库类型：Sqlite
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-03-30 14:12:38.791 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.793 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.818 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.820 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.821 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.825 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.827 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.827 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_LoginUser'
===============================

2024-03-30 14:12:38.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.833 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.833 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.836 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.838 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.840 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.840 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.841 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.841 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_UserName'
===============================

2024-03-30 14:12:38.844 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.844 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.845 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.845 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.847 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.848 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.848 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_UserId'
===============================

2024-03-30 14:12:38.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.851 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.851 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.851 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_CreatorId'
===============================

2024-03-30 14:12:38.851 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_CreatorId_DiscussId'
===============================

2024-03-30 14:12:38.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.853 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.854 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_Name'
===============================

2024-03-30 14:12:38.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.854 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_ParentId'
===============================

2024-03-30 14:12:38.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.854 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_DiscussId'
===============================

2024-03-30 14:12:38.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.855 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.855 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_DiscussId'
===============================

2024-03-30 14:12:38.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_ParentId'
===============================

2024-03-30 14:12:38.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.860 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.860 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_Title'
===============================

2024-03-30 14:12:38.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_PlateId'
===============================

2024-03-30 14:12:38.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_CreationTime'
===============================

2024-03-30 14:12:38.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.862 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.862 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.863 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.863 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.864 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.866 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.866 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.867 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.867 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.867 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_AuditLogId'
===============================

2024-03-30 14:12:38.867 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.867 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_TenantId_ExecutionTime'
===============================

2024-03-30 14:12:38.867 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.872 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_ExecutionTime'
===============================

2024-03-30 14:12:38.872 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.872 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_ExecutionTime_UserId'
===============================

2024-03-30 14:12:38.872 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.873 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.873 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.873 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_AuditLogId'
===============================

2024-03-30 14:12:38.873 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.873 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_TenantId_EntityId'
===============================

2024-03-30 14:12:38.873 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.874 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT count(*) FROM sqlite_master WHERE name = 'index_EntityChangeId'
===============================

2024-03-30 14:12:38.874 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.875 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
select Name from sqlite_master where type='table' and name<>'sqlite_sequence' order by name;
===============================

2024-03-30 14:12:38.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:12:38.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Dept`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:12:38.961 +08:00 [DBG] =========Yi-SQL耗时3.5217毫秒=====
2024-03-30 14:12:38.974 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Dictionary`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:12:38.974 +08:00 [DBG] =========Yi-SQL耗时0.1864毫秒=====
2024-03-30 14:12:38.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `DictionaryType`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:12:38.977 +08:00 [DBG] =========Yi-SQL耗时0.1282毫秒=====
2024-03-30 14:12:38.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Menu`   WHERE ( `MenuName` = N'系统管理' )  AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:12:38.983 +08:00 [DBG] =========Yi-SQL耗时0.9612毫秒=====
2024-03-30 14:12:38.985 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Post`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:12:38.985 +08:00 [DBG] =========Yi-SQL耗时0.1154毫秒=====
2024-03-30 14:12:38.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Role`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:12:38.987 +08:00 [DBG] =========Yi-SQL耗时0.097毫秒=====
2024-03-30 14:12:38.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `User`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:12:38.992 +08:00 [DBG] =========Yi-SQL耗时0.0942毫秒=====
2024-03-30 14:12:38.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Banner`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:12:38.994 +08:00 [DBG] =========Yi-SQL耗时0.0874毫秒=====
2024-03-30 14:12:38.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `DictionaryType`   WHERE ( `DictType` = N'bbs_type_lable' )  AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:12:38.995 +08:00 [DBG] =========Yi-SQL耗时0.0927毫秒=====
2024-03-30 14:12:38.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Menu`   WHERE ( `MenuName` = N'BBS' )  AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:12:38.998 +08:00 [DBG] =========Yi-SQL耗时0.1988毫秒=====
2024-03-30 14:12:39.000 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `BbsUserExtraInfo`   WHERE ( 1 = 1 )    LIMIT 0,1
===============================

2024-03-30 14:12:39.000 +08:00 [DBG] =========Yi-SQL耗时0.1417毫秒=====
2024-03-30 14:12:39.003 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Config`   WHERE ( 1 = 1 )   AND ( `IsDeleted` = 0 )   LIMIT 0,1
===============================

2024-03-30 14:12:39.003 +08:00 [DBG] =========Yi-SQL耗时0.1093毫秒=====
2024-03-30 14:12:39.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `Level`   WHERE ( 1 = 1 )    LIMIT 0,1
===============================

2024-03-30 14:12:39.005 +08:00 [DBG] =========Yi-SQL耗时0.0768毫秒=====
2024-03-30 14:12:39.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM `YiTemplate`   WHERE ( 1 = 1 )    LIMIT 0,1
===============================

2024-03-30 14:12:39.007 +08:00 [DBG] =========Yi-SQL耗时0.0829毫秒=====
2024-03-30 14:12:39.014 +08:00 [DBG] 耗时-432ms,已加载模块-Yi.Framework.SqlSugarCore
2024-03-30 14:12:39.075 +08:00 [DBG] 耗时-58ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-03-30 14:12:39.080 +08:00 [DBG] 耗时-4ms,已加载模块-Volo.Abp.EventBus
2024-03-30 14:12:39.093 +08:00 [DBG] 耗时-13ms,已加载模块-Volo.Abp.AspNetCore
2024-03-30 14:12:39.098 +08:00 [DBG] 耗时-4ms,已加载模块-Volo.Abp.Quartz
2024-03-30 14:12:39.125 +08:00 [DBG] 耗时-26ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-03-30 14:12:39.150 +08:00 [DBG] 耗时-25ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-03-30 14:12:39.357 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-03-30 14:12:39.424 +08:00 [DBG] 耗时-274ms,已加载模块-Yi.Abp.Web
2024-03-30 14:12:39.431 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-03-30 14:12:39.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`CurrentLevel`,`MinExperience`,`Name`,`Nick`,`Logo` FROM `Level`  
===============================

2024-03-30 14:12:39.440 +08:00 [DBG] =========Yi-SQL耗时0.3048毫秒=====
2024-03-30 14:12:39.508 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-03-30 14:12:39.508 +08:00 [DBG] 耗时-83ms,已加载模块-Yi.Framework.Bbs.Domain
2024-03-30 14:12:39.509 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【920ms】==========
2024-03-30 14:12:39.603 +08:00 [INF] Now listening on: http://[::]:19001
2024-03-30 14:12:39.603 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-03-30 14:12:39.603 +08:00 [INF] Hosting environment: Development
2024-03-30 14:12:39.603 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-03-30 14:12:49.709 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:12:49.754 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 14:12:49.756 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 14:12:49.857 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 14:12:49.882 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 14:12:50.040 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:12:50.042 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 14:12:50.042 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 14:12:50.044 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 14:12:50.167 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:12:50.167 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 14:12:50.215 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-03-30 14:12:50.215 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:12:50.300 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`EntityVersion`,`TenantConnectionString`,`DbType`,`IsDeleted`,`DeleterId`,`DeletionTime`,`LastModificationTime`,`LastModifierId`,`CreationTime`,`CreatorId`,`ConcurrencyStamp` FROM `YiTenant`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:12:50.300 +08:00 [DBG] =========Yi-SQL耗时0.8806毫秒=====
2024-03-30 14:12:50.313 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:12:50.386 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 166.8996ms
2024-03-30 14:12:50.387 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 14:12:50.425 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-03-30 14:12:50.434 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 217.0255ms
2024-03-30 14:12:50.434 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:13:03.455 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:13:03.456 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:13:03.458 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-03-30 14:13:03.458 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 2.1749ms
2024-03-30 14:13:03.458 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:13:08.947 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:13:08.948 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:13:08.958 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:13:09.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`   WHERE (( `UserName` = N'cc' ) AND ( `State` = 1 ))  AND ( `IsDeleted` = 0 )  ORDER BY DATETIME('now')    LIMIT 0,1
===============================

2024-03-30 14:13:09.007 +08:00 [DBG] =========Yi-SQL耗时0.8004毫秒=====
2024-03-30 14:13:09.022 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'd1c28168-8d08-38a8-2758-3a119a14c17a'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:13:09.023 +08:00 [DBG] =========Yi-SQL耗时0.5471毫秒=====
2024-03-30 14:13:09.042 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = 'd1c28168-8d08-38a8-2758-3a119a14c17a'    
===============================

2024-03-30 14:13:09.042 +08:00 [DBG] =========Yi-SQL耗时0.3086毫秒=====
2024-03-30 14:13:09.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:13:09.050 +08:00 [DBG] =========Yi-SQL耗时0.2191毫秒=====
2024-03-30 14:13:09.102 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-03-30 14:13:09.106 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 148.0802ms
2024-03-30 14:13:09.107 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:13:09.112 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:13:09.121 +08:00 [INF] 用户【d1c28168-8d08-38a8-2758-3a119a14c17a:cc】登入系统
2024-03-30 14:13:09.134 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 14:13:09.134 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 14:13:09.138 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 14:13:09.139 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:13:09.140 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:13:09.140 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 14:13:09.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'd1c28168-8d08-38a8-2758-3a119a14c17a'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:13:09.149 +08:00 [DBG] =========Yi-SQL耗时1.4403毫秒=====
2024-03-30 14:13:09.150 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = 'd1c28168-8d08-38a8-2758-3a119a14c17a'    
===============================

2024-03-30 14:13:09.151 +08:00 [DBG] =========Yi-SQL耗时0.6429毫秒=====
2024-03-30 14:13:09.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:13:09.152 +08:00 [DBG] =========Yi-SQL耗时0.2141毫秒=====
2024-03-30 14:13:09.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO `LoginLog`  
           (`Id`,`CreationTime`,`LoginUser`,`LoginLocation`,`LoginIp`,`Browser`,`Os`,`LogMsg`,`CreatorId`)
     VALUES
           (N'26b0ace5-d3d8-2c6a-9999-3a11a02a698f',CAST('2024-03-30 14:13:09.140' AS DATETIME),N'cc',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'cc登录系统',N'd1c28168-8d08-38a8-2758-3a119a14c17a') ;
===============================

2024-03-30 14:13:09.164 +08:00 [DBG] =========Yi-SQL耗时3.9287毫秒=====
2024-03-30 14:13:09.169 +08:00 [INF] 2024/3/30 14:13:09：cc,VjD2aSNoccvsYwvGY4ZD_w连接服务端success，当前已连接1个
2024-03-30 14:13:09.185 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-03-30 14:13:09.194 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 53.4451ms
2024-03-30 14:13:09.194 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 14:13:09.201 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 14:13:09.203 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:13:09.205 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'd1c28168-8d08-38a8-2758-3a119a14c17a'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:13:09.205 +08:00 [DBG] =========Yi-SQL耗时0.3987毫秒=====
2024-03-30 14:13:09.206 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = 'd1c28168-8d08-38a8-2758-3a119a14c17a'    
===============================

2024-03-30 14:13:09.207 +08:00 [DBG] =========Yi-SQL耗时0.6125毫秒=====
2024-03-30 14:13:09.208 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:13:09.208 +08:00 [DBG] =========Yi-SQL耗时0.1853毫秒=====
2024-03-30 14:13:09.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:13:09.210 +08:00 [DBG] =========Yi-SQL耗时0.1798毫秒=====
2024-03-30 14:13:09.233 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:13:09.237 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 34.1201ms
2024-03-30 14:13:09.237 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 14:13:18.482 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:13:18.483 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-03-30 14:13:18.485 +08:00 [INF] Route matched with {action = "PostLogout", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] PostLogout() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:13:18.488 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-03-30 14:13:18.489 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application) in 3.6453ms
2024-03-30 14:13:18.489 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-03-30 14:13:18.495 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:13:18.495 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 14:13:18.495 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 14:13:18.495 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 14:13:18.496 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 14:13:18.529 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:13:18.530 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 14:13:18.530 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 14:13:18.532 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 14:13:18.585 +08:00 [INF] 用户cc离开了，当前已连接1个
2024-03-30 14:13:18.588 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 14:13:18.588 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 14:13:18.588 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 14:13:18.691 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:13:18.692 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 14:13:18.692 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 14:13:18.704 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 14:13:18.704 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 14:13:18.744 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:13:18.744 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 14:13:18.745 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 14:13:18.745 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 14:13:18.801 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:13:18.802 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:13:18.802 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 14:13:18.802 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-03-30 14:13:18.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`EntityVersion`,`TenantConnectionString`,`DbType`,`IsDeleted`,`DeleterId`,`DeletionTime`,`LastModificationTime`,`LastModifierId`,`CreationTime`,`CreatorId`,`ConcurrencyStamp` FROM `YiTenant`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:13:18.804 +08:00 [DBG] =========Yi-SQL耗时0.4716毫秒=====
2024-03-30 14:13:18.805 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:13:18.805 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 3.5137ms
2024-03-30 14:13:18.805 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 14:13:18.808 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-03-30 14:13:18.808 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 6.8546ms
2024-03-30 14:13:18.808 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:13:19.717 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:13:19.717 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:13:19.719 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-03-30 14:13:19.719 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 1.9965ms
2024-03-30 14:13:19.719 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:09.852 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:14:09.853 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 14:14:09.853 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 14:14:09.854 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 14:14:09.854 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 14:14:10.038 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:14:10.040 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 14:14:10.040 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 14:14:10.040 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 14:14:10.103 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 14:14:10.104 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:10.104 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-03-30 14:14:10.104 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:10.106 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`EntityVersion`,`TenantConnectionString`,`DbType`,`IsDeleted`,`DeleterId`,`DeletionTime`,`LastModificationTime`,`LastModifierId`,`CreationTime`,`CreatorId`,`ConcurrencyStamp` FROM `YiTenant`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:10.107 +08:00 [DBG] =========Yi-SQL耗时0.5666毫秒=====
2024-03-30 14:14:10.107 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-03-30 14:14:10.107 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:14:10.107 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 3.6724ms
2024-03-30 14:14:10.107 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 3.8098ms
2024-03-30 14:14:10.107 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:10.107 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 14:14:16.081 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:14:16.082 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:16.083 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:16.086 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`   WHERE (( `UserName` = N'cc' ) AND ( `State` = 1 ))  AND ( `IsDeleted` = 0 )  ORDER BY DATETIME('now')    LIMIT 0,1
===============================

2024-03-30 14:14:16.086 +08:00 [DBG] =========Yi-SQL耗时0.2705毫秒=====
2024-03-30 14:14:16.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'd1c28168-8d08-38a8-2758-3a119a14c17a'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:16.087 +08:00 [DBG] =========Yi-SQL耗时0.1536毫秒=====
2024-03-30 14:14:16.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = 'd1c28168-8d08-38a8-2758-3a119a14c17a'    
===============================

2024-03-30 14:14:16.089 +08:00 [DBG] =========Yi-SQL耗时0.4135毫秒=====
2024-03-30 14:14:16.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:14:16.090 +08:00 [DBG] =========Yi-SQL耗时0.131毫秒=====
2024-03-30 14:14:16.107 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-03-30 14:14:16.107 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 24.4566ms
2024-03-30 14:14:16.107 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:16.108 +08:00 [INF] 用户【d1c28168-8d08-38a8-2758-3a119a14c17a:cc】登入系统
2024-03-30 14:14:16.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO `LoginLog`  
           (`Id`,`CreationTime`,`LoginUser`,`LoginLocation`,`LoginIp`,`Browser`,`Os`,`LogMsg`,`CreatorId`)
     VALUES
           (N'd02bed4f-fe02-9ae0-17df-3a11a02b6f2d',CAST('2024-03-30 14:14:16.109' AS DATETIME),N'cc',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'cc登录系统',N'd1c28168-8d08-38a8-2758-3a119a14c17a') ;
===============================

2024-03-30 14:14:16.112 +08:00 [DBG] =========Yi-SQL耗时1.7615毫秒=====
2024-03-30 14:14:16.115 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:14:16.117 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 14:14:16.117 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 14:14:16.123 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:16.123 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:16.124 +08:00 [INF] CORS policy execution successful.
2024-03-30 14:14:16.125 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'd1c28168-8d08-38a8-2758-3a119a14c17a'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:16.125 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 14:14:16.125 +08:00 [DBG] =========Yi-SQL耗时0.3014毫秒=====
2024-03-30 14:14:16.127 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = 'd1c28168-8d08-38a8-2758-3a119a14c17a'    
===============================

2024-03-30 14:14:16.128 +08:00 [DBG] =========Yi-SQL耗时0.8334毫秒=====
2024-03-30 14:14:16.129 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:14:16.129 +08:00 [DBG] =========Yi-SQL耗时0.15毫秒=====
2024-03-30 14:14:16.129 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-03-30 14:14:16.130 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 7.3767ms
2024-03-30 14:14:16.130 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:16.138 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:16.138 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:16.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'd1c28168-8d08-38a8-2758-3a119a14c17a'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:16.139 +08:00 [DBG] =========Yi-SQL耗时0.282毫秒=====
2024-03-30 14:14:16.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = 'd1c28168-8d08-38a8-2758-3a119a14c17a'    
===============================

2024-03-30 14:14:16.141 +08:00 [DBG] =========Yi-SQL耗时0.5695毫秒=====
2024-03-30 14:14:16.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)     AND  ( `IsDeleted` = 0 )  
===============================

2024-03-30 14:14:16.142 +08:00 [DBG] =========Yi-SQL耗时0.1445毫秒=====
2024-03-30 14:14:16.143 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:16.143 +08:00 [DBG] =========Yi-SQL耗时0.1297毫秒=====
2024-03-30 14:14:16.144 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:14:16.145 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 6.7274ms
2024-03-30 14:14:16.145 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:16.148 +08:00 [INF] 2024/3/30 14:14:16：cc,uY7glogKFEAcpGVZ5s9KEA连接服务端success，当前已连接2个
2024-03-30 14:14:19.133 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:19.133 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:19.133 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:19.134 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:19.137 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:19.137 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:19.140 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:19.140 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:19.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`OrderNum`,`State`,`Remark`,`ListClass`,`CssClass`,`DictType`,`DictLabel`,`DictValue`,`IsDefault`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime` FROM `Dictionary`  WHERE (( `DictType` = N'sys_user_sex' ) AND ( `State` = 1 ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:19.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`OrderNum`,`State`,`Remark`,`ListClass`,`CssClass`,`DictType`,`DictLabel`,`DictValue`,`IsDefault`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime` FROM `Dictionary`  WHERE (( `DictType` = N'sys_normal_disable' ) AND ( `State` = 1 ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:19.147 +08:00 [DBG] =========Yi-SQL耗时0.8283毫秒=====
2024-03-30 14:14:19.150 +08:00 [DBG] =========Yi-SQL耗时3.7594毫秒=====
2024-03-30 14:14:19.222 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:14:19.222 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:14:19.225 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 87.9313ms
2024-03-30 14:14:19.225 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 88.2476ms
2024-03-30 14:14:19.225 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:19.225 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:19.245 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 14:14:19.246 +08:00 [DBG] =========Yi-SQL耗时0.7636毫秒=====
2024-03-30 14:14:19.246 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`   WHERE ( `IsDeleted` = 0 )  ORDER BY `OrderNum` ASC LIMIT 0,10
===============================

2024-03-30 14:14:19.247 +08:00 [DBG] =========Yi-SQL耗时0.2648毫秒=====
2024-03-30 14:14:19.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )   WHERE ( `user`.`IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 14:14:19.256 +08:00 [DBG] =========Yi-SQL耗时0.4843毫秒=====
2024-03-30 14:14:19.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `user`.`Id` AS `Id` ,`user`.`Name` AS `Name` ,`user`.`Age` AS `Age` ,`user`.`UserName` AS `UserName` ,`user`.`Icon` AS `Icon` ,`user`.`Nick` AS `Nick` ,`user`.`Email` AS `Email` ,`user`.`Ip` AS `Ip` ,`user`.`Address` AS `Address` ,`user`.`Phone` AS `Phone` ,`user`.`Introduction` AS `Introduction` ,`user`.`Remark` AS `Remark` ,`user`.`Sex` AS `Sex` ,`user`.`DeptId` AS `DeptId` ,`user`.`CreationTime` AS `CreationTime` ,`user`.`CreatorId` AS `CreatorId` ,`user`.`State` AS `State` ,`dept`.`DeptName` AS `DeptName` FROM  (SELECT * FROM  (SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE ( `State` = 1 )  AND ( `IsDeleted` = 0 ) ) MergeTable ) `user` Left JOIN `Dept` `dept` ON ( `user`.`DeptId` = `dept`.`Id` ) AND ( `dept`.`IsDeleted` = 0 )    WHERE ( `user`.`IsDeleted` = 0 )  ORDER BY `user`.`CreationTime` DESC LIMIT 0,10
===============================

2024-03-30 14:14:19.258 +08:00 [DBG] =========Yi-SQL耗时0.7393毫秒=====
2024-03-30 14:14:19.259 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:14:19.261 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:14:19.263 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 123.0021ms
2024-03-30 14:14:19.263 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:19.267 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 126.8079ms
2024-03-30 14:14:19.267 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:22.160 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:22.163 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:22.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `Role`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:22.175 +08:00 [DBG] =========Yi-SQL耗时0.3548毫秒=====
2024-03-30 14:14:22.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 14:14:22.182 +08:00 [DBG] =========Yi-SQL耗时0.4496毫秒=====
2024-03-30 14:14:22.189 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:14:22.192 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 28.2075ms
2024-03-30 14:14:22.192 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:24.527 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:24.527 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:24.529 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:24.529 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:24.536 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 14:14:24.536 +08:00 [DBG] =========Yi-SQL耗时0.2894毫秒=====
2024-03-30 14:14:24.560 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:14:24.574 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 44.9321ms
2024-03-30 14:14:24.575 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:24.580 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:24.582 +08:00 [INF] Route matched with {action = "GetListRoleId", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:24.592 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`  WHERE `Id` = N'f7324be2-5f20-cd42-e7f6-3a119a14c16d'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:24.593 +08:00 [DBG] =========Yi-SQL耗时0.4429毫秒=====
2024-03-30 14:14:24.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu` `m`  WHERE (EXISTS ( SELECT * FROM `RoleMenu` `rm`  WHERE (( `RoleId` = N'f7324be2-5f20-cd42-e7f6-3a119a14c16d' ) AND ( `MenuId` = `m`.`Id` )) ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:24.598 +08:00 [DBG] =========Yi-SQL耗时0.295毫秒=====
2024-03-30 14:14:24.599 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:14:24.600 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application) in 17.8129ms
2024-03-30 14:14:24.600 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:24.602 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-03-30 14:14:24.604 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 74.2893ms
2024-03-30 14:14:24.604 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:29.559 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 14:14:29.562 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-03-30 14:14:29.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTenant`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:29.570 +08:00 [DBG] =========Yi-SQL耗时0.2632毫秒=====
2024-03-30 14:14:29.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`EntityVersion`,`TenantConnectionString`,`DbType`,`IsDeleted`,`DeleterId`,`DeletionTime`,`LastModificationTime`,`LastModifierId`,`CreationTime`,`CreatorId`,`ConcurrencyStamp` FROM `YiTenant`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 14:14:29.570 +08:00 [DBG] =========Yi-SQL耗时0.1475毫秒=====
2024-03-30 14:14:29.572 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:14:29.574 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 12.2587ms
2024-03-30 14:14:29.574 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 14:14:33.801 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:33.801 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:33.801 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:33.803 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:33.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `Role`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:33.804 +08:00 [DBG] =========Yi-SQL耗时0.2484毫秒=====
2024-03-30 14:14:33.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 14:14:33.804 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:33.804 +08:00 [DBG] =========Yi-SQL耗时0.209毫秒=====
2024-03-30 14:14:33.805 +08:00 [INF] Route matched with {action = "Get", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:33.806 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:14:33.806 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 4.6676ms
2024-03-30 14:14:33.806 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:33.812 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`Name`,`Age`,`UserName`,`Password`,`Salt`,`Icon`,`Nick`,`Email`,`Ip`,`Address`,`Phone`,`Introduction`,`Remark`,`Sex`,`DeptId`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State` FROM `User`  WHERE `Id` = N'8ddb5f70-44a8-7f10-2635-3a11a01593a3'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:33.812 +08:00 [DBG] =========Yi-SQL耗时0.2766毫秒=====
2024-03-30 14:14:33.812 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `Post`  WHERE ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:33.812 +08:00 [DBG] =========Yi-SQL耗时0.1869毫秒=====
2024-03-30 14:14:33.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`RoleId` as bid FROM `UserRole`  WHERE   `UserId` = '8ddb5f70-44a8-7f10-2635-3a11a01593a3'    
===============================

2024-03-30 14:14:33.813 +08:00 [DBG] =========Yi-SQL耗时0.3434毫秒=====
2024-03-30 14:14:33.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`RoleName` AS `RoleName`,`RoleCode` AS `RoleCode`,`Remark` AS `Remark`,`DataScope` AS `DataScope`,`State` AS `State` FROM `Role`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` = 'f7324be2-5f20-cd42-e7f6-3a119a14c16d'    
===============================

2024-03-30 14:14:33.816 +08:00 [DBG] =========Yi-SQL耗时0.2972毫秒=====
2024-03-30 14:14:33.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `UserId` as aid,`PostId` as bid FROM `UserPost`  WHERE   `UserId` = '8ddb5f70-44a8-7f10-2635-3a11a01593a3'    
===============================

2024-03-30 14:14:33.818 +08:00 [DBG] =========Yi-SQL耗时0.3331毫秒=====
2024-03-30 14:14:33.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`State` AS `State`,`PostCode` AS `PostCode`,`PostName` AS `PostName`,`Remark` AS `Remark` FROM `Post`  WHERE  ( `IsDeleted` = 0 )   AND   `Id` IN (null)    
===============================

2024-03-30 14:14:33.819 +08:00 [DBG] =========Yi-SQL耗时0.3018毫秒=====
2024-03-30 14:14:33.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`PostCode`,`PostName`,`Remark` FROM `Post`   WHERE ( `IsDeleted` = 0 )   LIMIT 0,10
===============================

2024-03-30 14:14:33.825 +08:00 [DBG] =========Yi-SQL耗时0.278毫秒=====
2024-03-30 14:14:33.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id` AS `Id`,`IsDeleted` AS `IsDeleted`,`CreationTime` AS `CreationTime`,`CreatorId` AS `CreatorId`,`LastModifierId` AS `LastModifierId`,`LastModificationTime` AS `LastModificationTime`,`OrderNum` AS `OrderNum`,`State` AS `State`,`DeptName` AS `DeptName`,`DeptCode` AS `DeptCode`,`Leader` AS `Leader`,`ParentId` AS `ParentId`,`Remark` AS `Remark` FROM `Dept`  WHERE   `Id` = '23b716a6-10da-3fe5-7099-3a119a14c114'    
===============================

2024-03-30 14:14:33.825 +08:00 [DBG] =========Yi-SQL耗时0.1213毫秒=====
2024-03-30 14:14:33.831 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:14:33.833 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 28.945ms
2024-03-30 14:14:33.833 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:33.840 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto'.
2024-03-30 14:14:33.844 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application) in 39.0272ms
2024-03-30 14:14:33.844 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:39.537 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:39.537 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:39.537 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:39.537 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:39.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`  WHERE `Id` = N'f7324be2-5f20-cd42-e7f6-3a119a14c16d'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:39.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`  WHERE ( `IsDeleted` = 0 ) ) CountTable 
===============================

2024-03-30 14:14:39.539 +08:00 [DBG] =========Yi-SQL耗时0.278毫秒=====
2024-03-30 14:14:39.539 +08:00 [DBG] =========Yi-SQL耗时0.214毫秒=====
2024-03-30 14:14:39.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept`   WHERE ( `IsDeleted` = 0 )  ORDER BY `OrderNum` ASC LIMIT 0,10
===============================

2024-03-30 14:14:39.539 +08:00 [DBG] =========Yi-SQL耗时0.1679毫秒=====
2024-03-30 14:14:39.540 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-03-30 14:14:39.540 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 2.233ms
2024-03-30 14:14:39.540 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:39.542 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:14:39.542 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 5.336ms
2024-03-30 14:14:39.542 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:39.572 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:39.575 +08:00 [INF] Route matched with {action = "GetRoleId", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:39.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`DeptName`,`DeptCode`,`Leader`,`ParentId`,`Remark` FROM `Dept` `d`  WHERE (EXISTS ( SELECT * FROM `RoleDept` `rd`  WHERE (( `RoleId` = N'f7324be2-5f20-cd42-e7f6-3a119a14c16d' ) AND ( `d`.`Id` = `DeptId` )) ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:39.578 +08:00 [DBG] =========Yi-SQL耗时0.2385毫秒=====
2024-03-30 14:14:39.578 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:14:39.579 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetRoleIdAsync (Yi.Framework.Rbac.Application) in 4.036ms
2024-03-30 14:14:39.579 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:41.239 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:41.239 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:41.240 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:41.240 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:41.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`  WHERE `Id` = N'f7324be2-5f20-cd42-e7f6-3a119a14c16d'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:41.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 14:14:41.241 +08:00 [DBG] =========Yi-SQL耗时0.2688毫秒=====
2024-03-30 14:14:41.241 +08:00 [DBG] =========Yi-SQL耗时0.3106毫秒=====
2024-03-30 14:14:41.242 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-03-30 14:14:41.242 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 2.3136ms
2024-03-30 14:14:41.242 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:41.261 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:14:41.268 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 27.9322ms
2024-03-30 14:14:41.268 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:41.280 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:41.281 +08:00 [INF] Route matched with {action = "GetListRoleId", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:41.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu` `m`  WHERE (EXISTS ( SELECT * FROM `RoleMenu` `rm`  WHERE (( `RoleId` = N'f7324be2-5f20-cd42-e7f6-3a119a14c16d' ) AND ( `MenuId` = `m`.`Id` )) ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:41.284 +08:00 [DBG] =========Yi-SQL耗时0.7526毫秒=====
2024-03-30 14:14:41.295 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:14:41.296 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application) in 15.0307ms
2024-03-30 14:14:41.296 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:44.551 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:44.551 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:44.551 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:44.551 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:44.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 14:14:44.553 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`  WHERE `Id` = N'825a7a31-a28d-0b1e-a7b7-3a119a14c16d'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:44.553 +08:00 [DBG] =========Yi-SQL耗时0.1659毫秒=====
2024-03-30 14:14:44.553 +08:00 [DBG] =========Yi-SQL耗时0.3063毫秒=====
2024-03-30 14:14:44.553 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-03-30 14:14:44.553 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 1.9434ms
2024-03-30 14:14:44.553 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:44.563 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:14:44.568 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 16.1632ms
2024-03-30 14:14:44.568 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:44.579 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:44.580 +08:00 [INF] Route matched with {action = "GetListRoleId", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:44.581 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu` `m`  WHERE (EXISTS ( SELECT * FROM `RoleMenu` `rm`  WHERE (( `RoleId` = N'825a7a31-a28d-0b1e-a7b7-3a119a14c16d' ) AND ( `MenuId` = `m`.`Id` )) ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:44.581 +08:00 [DBG] =========Yi-SQL耗时0.5171毫秒=====
2024-03-30 14:14:44.582 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:14:44.583 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application) in 2.9875ms
2024-03-30 14:14:44.583 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:46.615 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:46.615 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:46.615 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:46.615 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:46.616 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`  WHERE `Id` = N'f7324be2-5f20-cd42-e7f6-3a119a14c16d'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:46.616 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 14:14:46.617 +08:00 [DBG] =========Yi-SQL耗时0.2789毫秒=====
2024-03-30 14:14:46.617 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-03-30 14:14:46.617 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 2.06ms
2024-03-30 14:14:46.617 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:46.623 +08:00 [DBG] =========Yi-SQL耗时6.4935毫秒=====
2024-03-30 14:14:46.635 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:14:46.640 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 25.2064ms
2024-03-30 14:14:46.640 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:46.650 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:14:46.651 +08:00 [INF] Route matched with {action = "GetListRoleId", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:14:46.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu` `m`  WHERE (EXISTS ( SELECT * FROM `RoleMenu` `rm`  WHERE (( `RoleId` = N'f7324be2-5f20-cd42-e7f6-3a119a14c16d' ) AND ( `MenuId` = `m`.`Id` )) ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:14:46.652 +08:00 [DBG] =========Yi-SQL耗时0.3515毫秒=====
2024-03-30 14:14:46.654 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:14:46.655 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application) in 4.0347ms
2024-03-30 14:14:46.655 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:15:01.100 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:15:01.100 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:15:01.101 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 14:15:01.101 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:15:01.102 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`RoleName`,`RoleCode`,`Remark`,`DataScope`,`State` FROM `Role`  WHERE `Id` = N'f7324be2-5f20-cd42-e7f6-3a119a14c16d'    AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:15:01.102 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu`  WHERE ( `IsDeleted` = 0 )ORDER BY `OrderNum` DESC 
===============================

2024-03-30 14:15:01.103 +08:00 [DBG] =========Yi-SQL耗时0.4059毫秒=====
2024-03-30 14:15:01.103 +08:00 [DBG] =========Yi-SQL耗时0.4929毫秒=====
2024-03-30 14:15:01.103 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-03-30 14:15:01.103 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 2.762ms
2024-03-30 14:15:01.103 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:15:01.123 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:15:01.128 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 27.2577ms
2024-03-30 14:15:01.128 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:15:01.146 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:15:01.146 +08:00 [INF] Route matched with {action = "GetListRoleId", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 14:15:01.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`IsDeleted`,`CreationTime`,`CreatorId`,`LastModifierId`,`LastModificationTime`,`OrderNum`,`State`,`MenuName`,`MenuType`,`PermissionCode`,`ParentId`,`MenuIcon`,`Router`,`IsLink`,`IsCache`,`IsShow`,`Remark`,`Component`,`Query` FROM `Menu` `m`  WHERE (EXISTS ( SELECT * FROM `RoleMenu` `rm`  WHERE (( `RoleId` = N'f7324be2-5f20-cd42-e7f6-3a119a14c16d' ) AND ( `MenuId` = `m`.`Id` )) ))  AND ( `IsDeleted` = 0 ) 
===============================

2024-03-30 14:15:01.148 +08:00 [DBG] =========Yi-SQL耗时0.3615毫秒=====
2024-03-30 14:15:01.150 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:15:01.150 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application) in 3.8454ms
2024-03-30 14:15:01.150 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 14:15:10.634 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 14:15:10.637 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-03-30 14:15:10.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 14:15:10.649 +08:00 [DBG] =========Yi-SQL耗时0.3872毫秒=====
2024-03-30 14:15:10.650 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT `Id`,`Name`,`Description`,`ConcurrencyStamp` FROM `YiTable`   WHERE ( 1 = 1 )    LIMIT 0,10
===============================

2024-03-30 14:15:10.650 +08:00 [DBG] =========Yi-SQL耗时0.2817毫秒=====
2024-03-30 14:15:10.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM `YiTable`  WHERE ( 1 = 1 )  
===============================

2024-03-30 14:15:10.654 +08:00 [DBG] =========Yi-SQL耗时0.3067毫秒=====
2024-03-30 14:15:10.665 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 14:15:10.668 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 30.5773ms
2024-03-30 14:15:10.668 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-03-30 14:30:01.551 +08:00 [INF] 用户cc离开了，当前已连接1个
2024-03-30 14:30:01.553 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 14:30:01.553 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 14:30:01.553 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 14:54:50.311 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-03-30 14:54:50.335 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-03-30 14:54:55.304 +08:00 [INF] Loaded ABP modules:
2024-03-30 14:54:55.304 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-03-30 14:54:55.304 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-03-30 14:54:55.304 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-03-30 14:54:55.304 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-03-30 14:54:55.304 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-03-30 14:54:55.304 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-03-30 14:54:55.304 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-03-30 14:54:55.304 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-03-30 14:54:55.304 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-03-30 14:54:55.304 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-03-30 14:54:55.304 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-03-30 14:54:55.304 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-03-30 14:54:55.304 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-03-30 14:54:55.304 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-03-30 14:54:55.304 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-03-30 14:54:55.304 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-03-30 14:54:55.304 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-03-30 14:54:55.304 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-03-30 14:54:55.304 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-03-30 14:54:55.304 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-03-30 14:54:55.304 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-03-30 14:54:55.304 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-03-30 14:54:55.304 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-03-30 14:54:55.304 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-03-30 14:54:55.304 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-03-30 14:54:55.304 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-03-30 14:54:55.304 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-03-30 14:54:55.304 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-03-30 14:54:55.304 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-03-30 14:54:55.304 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-03-30 14:54:55.304 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-03-30 14:54:55.304 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-03-30 14:54:55.304 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-03-30 14:54:55.304 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-03-30 14:54:55.305 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-03-30 14:54:55.305 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-03-30 14:54:55.305 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-03-30 14:54:55.305 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-03-30 14:54:55.305 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-03-30 14:54:55.305 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-03-30 14:54:55.305 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-03-30 14:54:55.305 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-03-30 14:54:55.305 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-03-30 14:54:55.305 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-03-30 14:54:55.305 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-03-30 14:54:55.305 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-03-30 14:54:55.305 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-03-30 14:54:55.305 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-03-30 14:54:55.305 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-03-30 14:54:55.305 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-03-30 14:54:55.305 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-03-30 14:54:55.305 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-03-30 14:54:55.305 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-03-30 14:54:55.305 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-03-30 14:54:55.305 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-03-30 14:54:55.305 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-03-30 14:54:55.305 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-03-30 14:54:55.305 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-03-30 14:54:55.305 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-03-30 14:54:55.305 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-03-30 14:54:55.305 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-03-30 14:54:55.305 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-03-30 14:54:55.305 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-03-30 14:54:55.305 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-03-30 14:54:55.305 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-03-30 14:54:55.305 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-03-30 14:54:55.305 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-03-30 14:54:55.305 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-03-30 14:54:55.305 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-03-30 14:54:55.305 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-03-30 14:54:55.305 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-03-30 14:54:55.305 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-03-30 14:54:55.305 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-03-30 14:54:55.305 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-03-30 14:54:55.305 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-03-30 14:54:55.305 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-03-30 14:54:55.305 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-03-30 14:54:55.305 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-03-30 14:54:55.305 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-03-30 14:54:55.305 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-03-30 14:54:55.305 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-03-30 14:54:55.305 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-03-30 14:54:55.305 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-03-30 14:54:55.305 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-03-30 14:54:55.305 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-03-30 14:54:55.305 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-03-30 14:54:55.305 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-03-30 14:54:55.305 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-03-30 14:54:55.305 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-03-30 14:54:55.305 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-03-30 14:54:55.305 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-03-30 14:54:55.305 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-03-30 14:54:55.305 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-03-30 14:54:55.314 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-03-30 14:54:55.319 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-03-30 14:54:56.003 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.011 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "yitenant"(
"id" uuid NOT NULL  ,
"name" varchar(255) NOT NULL  ,
"entityversion" int4 NOT NULL  ,
"tenantconnectionstring" varchar(255) NOT NULL  ,
"dbtype" int4 NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"deleterid" uuid DEFAULT NULL  ,
"deletiontime" timestamp DEFAULT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"creationtime" timestamp NOT NULL  ,
"creatorid" uuid DEFAULT NULL  ,
"concurrencystamp" varchar(255) NOT NULL   , Primary key("id"))
===============================

2024-03-30 14:54:56.062 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.066 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.076 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.080 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-03-30 14:54:56.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.097 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.098 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.111 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-03-30 14:54:56.116 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-03-30 14:54:56.119 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-03-30 14:54:56.119 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-03-30 14:54:56.119 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-03-30 14:54:56.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-03-30 14:54:56.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-03-30 14:54:56.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-03-30 14:54:56.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-03-30 14:54:56.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-03-30 14:54:56.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-03-30 14:54:56.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.130 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.130 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-03-30 14:54:56.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.146 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-03-30 14:54:56.148 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-03-30 14:54:56.148 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-03-30 14:54:56.149 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-03-30 14:54:56.149 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-03-30 14:54:56.149 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-03-30 14:54:56.149 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-03-30 14:54:56.149 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-03-30 14:54:56.149 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.150 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.156 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.156 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-03-30 14:54:56.158 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.163 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.163 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-03-30 14:54:56.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-03-30 14:54:56.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-03-30 14:54:56.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-03-30 14:54:56.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-03-30 14:54:56.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 14:54:56.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 14:54:56.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-03-30 14:54:56.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-03-30 14:54:56.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-03-30 14:54:56.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-03-30 14:54:56.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-03-30 14:54:56.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-03-30 14:54:56.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-03-30 14:54:56.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-03-30 14:54:56.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.178 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-03-30 14:54:56.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.186 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.192 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.192 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-03-30 14:54:56.194 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-03-30 14:54:56.194 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-03-30 14:54:56.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-03-30 14:54:56.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-03-30 14:54:56.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-03-30 14:54:56.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-03-30 14:54:56.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-03-30 14:54:56.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-03-30 14:54:56.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-03-30 14:54:56.196 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-03-30 14:54:56.196 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-03-30 14:54:56.196 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.202 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.202 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-03-30 14:54:56.204 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.208 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-03-30 14:54:56.218 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.218 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-03-30 14:54:56.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-03-30 14:54:56.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-03-30 14:54:56.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-03-30 14:54:56.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-03-30 14:54:56.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-03-30 14:54:56.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-03-30 14:54:56.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.225 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-03-30 14:54:56.226 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.234 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-03-30 14:54:56.245 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.245 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-03-30 14:54:56.246 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.246 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-03-30 14:54:56.246 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.246 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-03-30 14:54:56.246 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.246 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-03-30 14:54:56.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.260 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-03-30 14:54:56.269 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-03-30 14:54:56.269 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-03-30 14:54:56.269 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-03-30 14:54:56.270 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.270 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-03-30 14:54:56.270 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.270 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-03-30 14:54:56.270 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.270 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-03-30 14:54:56.270 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.271 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 14:54:56.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-03-30 14:54:56.286 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.290 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.292 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.292 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.298 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-03-30 14:54:56.300 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-03-30 14:54:56.301 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-03-30 14:54:56.301 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-03-30 14:54:56.301 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-03-30 14:54:56.301 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 14:54:56.301 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 14:54:56.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-03-30 14:54:56.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-03-30 14:54:56.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-03-30 14:54:56.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-03-30 14:54:56.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-03-30 14:54:56.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-03-30 14:54:56.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-03-30 14:54:56.303 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-03-30 14:54:56.303 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-03-30 14:54:56.303 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-03-30 14:54:56.303 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-03-30 14:54:56.303 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-03-30 14:54:56.303 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-03-30 14:54:56.312 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.320 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.326 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.326 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-03-30 14:54:56.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-03-30 14:54:56.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-03-30 14:54:56.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-03-30 14:54:56.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.335 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.335 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-03-30 14:54:56.337 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.341 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.348 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.349 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-03-30 14:54:56.351 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.351 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-03-30 14:54:56.351 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.351 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-03-30 14:54:56.351 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.351 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-03-30 14:54:56.351 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.351 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-03-30 14:54:56.351 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 14:54:56.352 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 14:54:56.352 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-03-30 14:54:56.352 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-03-30 14:54:56.352 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-03-30 14:54:56.352 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-03-30 14:54:56.352 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-03-30 14:54:56.352 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-03-30 14:54:56.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.358 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.358 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-03-30 14:54:56.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.363 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.365 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-03-30 14:54:56.372 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.372 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-03-30 14:54:56.373 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.373 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-03-30 14:54:56.373 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.373 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-03-30 14:54:56.373 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.373 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-03-30 14:54:56.373 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.373 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-03-30 14:54:56.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.386 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.387 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.392 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.392 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-03-30 14:54:56.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-03-30 14:54:56.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-03-30 14:54:56.396 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.396 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-03-30 14:54:56.396 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.396 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-03-30 14:54:56.396 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.396 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 14:54:56.396 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.396 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 14:54:56.396 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.396 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-03-30 14:54:56.396 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.396 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-03-30 14:54:56.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-03-30 14:54:56.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-03-30 14:54:56.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-03-30 14:54:56.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-03-30 14:54:56.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-03-30 14:54:56.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.403 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.403 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-03-30 14:54:56.405 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.410 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-03-30 14:54:56.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-03-30 14:54:56.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-03-30 14:54:56.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-03-30 14:54:56.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.440 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-03-30 14:54:56.442 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.443 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-03-30 14:54:56.443 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.443 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-03-30 14:54:56.443 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.443 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-03-30 14:54:56.443 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.443 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-03-30 14:54:56.443 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.443 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-03-30 14:54:56.444 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.444 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-03-30 14:54:56.444 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.444 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-03-30 14:54:56.444 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.444 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-03-30 14:54:56.444 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.444 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-03-30 14:54:56.444 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.444 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-03-30 14:54:56.444 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.444 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-03-30 14:54:56.444 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.444 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-03-30 14:54:56.444 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.444 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-03-30 14:54:56.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-03-30 14:54:56.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-03-30 14:54:56.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-03-30 14:54:56.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-03-30 14:54:56.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-03-30 14:54:56.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-03-30 14:54:56.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 14:54:56.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 14:54:56.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-03-30 14:54:56.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-03-30 14:54:56.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-03-30 14:54:56.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 14:54:56.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-03-30 14:54:56.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.472 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-03-30 14:54:56.474 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.474 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-03-30 14:54:56.474 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.474 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-03-30 14:54:56.475 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.475 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-03-30 14:54:56.475 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.475 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-03-30 14:54:56.475 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.475 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-03-30 14:54:56.483 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.492 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-03-30 14:54:56.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-03-30 14:54:56.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-03-30 14:54:56.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-03-30 14:54:56.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-03-30 14:54:56.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.501 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.501 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-03-30 14:54:56.503 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.507 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.508 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.508 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.514 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-03-30 14:54:56.517 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.517 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-03-30 14:54:56.517 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.517 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.522 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.522 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-03-30 14:54:56.524 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.537 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-03-30 14:54:56.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.544 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-03-30 14:54:56.547 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.551 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.551 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.557 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-03-30 14:54:56.560 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.560 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-03-30 14:54:56.560 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.560 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-03-30 14:54:56.560 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.560 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-03-30 14:54:56.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-03-30 14:54:56.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-03-30 14:54:56.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-03-30 14:54:56.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-03-30 14:54:56.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-03-30 14:54:56.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-03-30 14:54:56.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 14:54:56.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-03-30 14:54:56.570 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.581 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.581 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-03-30 14:54:56.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.588 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-03-30 14:54:56.590 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.593 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.594 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.595 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-03-30 14:54:56.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-03-30 14:54:56.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-03-30 14:54:56.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-03-30 14:54:56.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-03-30 14:54:56.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-03-30 14:54:56.603 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-03-30 14:54:56.603 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.609 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-03-30 14:54:56.611 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.615 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.616 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.616 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.622 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-03-30 14:54:56.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-03-30 14:54:56.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-03-30 14:54:56.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-03-30 14:54:56.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 14:54:56.625 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.631 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.631 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-03-30 14:54:56.633 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.643 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.643 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-03-30 14:54:56.645 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.645 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-03-30 14:54:56.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-03-30 14:54:56.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 14:54:56.647 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.647 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-03-30 14:54:56.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.658 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.659 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.659 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.665 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.665 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-03-30 14:54:56.667 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-03-30 14:54:56.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 14:54:56.669 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 14:54:56.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 14:54:56.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-03-30 14:54:56.678 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.684 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.689 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-03-30 14:54:56.692 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.692 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-03-30 14:54:56.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.704 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.711 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-03-30 14:54:56.714 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.714 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-03-30 14:54:56.714 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.714 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-03-30 14:54:56.715 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 14:54:56.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 14:54:56.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.722 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.722 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-03-30 14:54:56.724 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.731 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.738 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.738 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-03-30 14:54:56.740 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-03-30 14:54:56.740 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-03-30 14:54:56.740 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.741 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-03-30 14:54:56.741 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.741 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 14:54:56.742 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.742 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 14:54:56.742 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.742 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 14:54:56.743 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.749 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.750 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-03-30 14:54:56.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.754 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.756 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.756 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.761 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.761 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-03-30 14:54:56.764 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.764 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.769 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-03-30 14:54:56.771 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.773 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.775 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.775 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-03-30 14:54:56.784 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.784 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-03-30 14:54:56.784 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.784 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.789 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.789 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-03-30 14:54:56.791 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.794 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.796 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.796 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.801 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-03-30 14:54:56.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.809 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-03-30 14:54:56.811 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.817 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.817 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-03-30 14:54:56.824 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-03-30 14:54:56.825 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-03-30 14:54:56.833 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-03-30 14:54:56.845 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-03-30 14:54:56.846 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-03-30 14:54:56.846 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-03-30 14:54:56.846 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-03-30 14:54:56.846 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-03-30 14:54:56.847 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-03-30 14:54:56.847 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-03-30 14:54:56.847 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-03-30 14:54:56.847 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-03-30 14:54:56.856 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.859 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.868 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-03-30 14:54:56.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-03-30 14:54:56.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-03-30 14:54:56.872 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.872 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-03-30 14:54:56.872 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.872 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-03-30 14:54:56.872 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.872 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-03-30 14:54:56.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.884 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.886 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.886 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "yiauditlogaction"(
"id" uuid NOT NULL  ,
"tenantid" uuid DEFAULT NULL  ,
"auditlogid" uuid NOT NULL  ,
"servicename" varchar(255) DEFAULT NULL  ,
"methodname" varchar(255) DEFAULT NULL  ,
"parameters" varchar(255) DEFAULT NULL  ,
"executiontime" timestamp DEFAULT NULL  ,
"executionduration" int4 DEFAULT NULL   , Primary key("id"))
===============================

2024-03-30 14:54:56.892 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 14:54:56.893 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.896 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE  INDEX index_AuditLogId ON "yiauditlogaction"("auditlogid" Asc)
===============================

2024-03-30 14:54:56.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 14:54:56.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE  INDEX index_TenantId_ExecutionTime ON "yiauditlogaction"("tenantid" Asc,"servicename" Asc,"methodname" Asc,"executiontime" Asc)
===============================

2024-03-30 14:54:56.902 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-03-30 14:54:56.909 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.918 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.918 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "yiauditlog"(
"id" uuid NOT NULL  ,
"applicationname" varchar(255) DEFAULT NULL  ,
"userid" uuid DEFAULT NULL  ,
"username" varchar(255) DEFAULT NULL  ,
"tenantname" varchar(255) DEFAULT NULL  ,
"impersonatoruserid" uuid DEFAULT NULL  ,
"impersonatorusername" varchar(255) DEFAULT NULL  ,
"impersonatortenantid" uuid DEFAULT NULL  ,
"impersonatortenantname" varchar(255) DEFAULT NULL  ,
"executiontime" timestamp DEFAULT NULL  ,
"executionduration" int4 DEFAULT NULL  ,
"clientipaddress" varchar(255) DEFAULT NULL  ,
"clientname" varchar(255) DEFAULT NULL  ,
"clientid" varchar(255) DEFAULT NULL  ,
"correlationid" varchar(255) DEFAULT NULL  ,
"browserinfo" varchar(255) DEFAULT NULL  ,
"httpmethod" varchar(255) DEFAULT NULL  ,
"url" varchar(255) DEFAULT NULL  ,
"exceptions" varchar(255) DEFAULT NULL  ,
"comments" varchar(255) DEFAULT NULL  ,
"httpstatuscode" int4 DEFAULT NULL  ,
"tenantid" uuid DEFAULT NULL  ,
"concurrencystamp" varchar(255) NOT NULL   , Primary key("id"))
===============================

2024-03-30 14:54:56.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 14:54:56.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE  INDEX index_ExecutionTime ON "yiauditlog"("tenantid" Asc,"executiontime" Asc)
===============================

2024-03-30 14:54:56.929 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.929 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 14:54:56.931 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.931 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE  INDEX index_ExecutionTime_UserId ON "yiauditlog"("tenantid" Asc,"userid" Asc,"executiontime" Asc)
===============================

2024-03-30 14:54:56.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.940 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-03-30 14:54:56.943 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.952 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.953 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "yientitychange"(
"id" uuid NOT NULL  ,
"auditlogid" uuid NOT NULL  ,
"tenantid" uuid DEFAULT NULL  ,
"changetime" timestamp DEFAULT NULL  ,
"changetype" int4 DEFAULT NULL  ,
"entitytenantid" uuid DEFAULT NULL  ,
"entityid" varchar(255) DEFAULT NULL  ,
"entitytypefullname" varchar(255) DEFAULT NULL   , Primary key("id"))
===============================

2024-03-30 14:54:56.966 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.966 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 14:54:56.968 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.968 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 14:54:56.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE  INDEX index_TenantId_EntityId ON "yientitychange"("tenantid" Asc,"entitytypefullname" Asc,"entityid" Asc)
===============================

2024-03-30 14:54:56.971 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:56.977 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-03-30 14:54:56.979 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:56.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.985 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "yientitypropertychange"(
"id" uuid NOT NULL  ,
"tenantid" uuid DEFAULT NULL  ,
"entitychangeid" uuid DEFAULT NULL  ,
"newvalue" varchar(255) DEFAULT NULL  ,
"originalvalue" varchar(255) DEFAULT NULL  ,
"propertyname" varchar(255) DEFAULT NULL  ,
"propertytypefullname" varchar(255) DEFAULT NULL   , Primary key("id"))
===============================

2024-03-30 14:54:56.993 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 14:54:56.995 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE  INDEX index_EntityChangeId ON "yientitypropertychange"("entitychangeid" Asc)
===============================

2024-03-30 14:54:56.998 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:56.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:57.003 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.003 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-03-30 14:54:57.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:57.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "yifield"(
"id" uuid NOT NULL  ,
"name" varchar(255) NOT NULL  ,
"description" varchar(255) DEFAULT NULL  ,
"ordernum" int4 NOT NULL  ,
"length" int4 NOT NULL  ,
"fieldtype" int4 NOT NULL  ,
"tableid" uuid NOT NULL  ,
"isrequired" boolean NOT NULL  ,
"iskey" boolean NOT NULL  ,
"isautoadd" boolean NOT NULL  ,
"ispublic" boolean NOT NULL   , Primary key("id"))
===============================

2024-03-30 14:54:57.022 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-03-30 14:54:57.024 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-03-30 14:54:57.024 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-03-30 14:54:57.024 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-03-30 14:54:57.024 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-03-30 14:54:57.024 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:57.030 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-03-30 14:54:57.032 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:57.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "yitable"(
"id" uuid NOT NULL  ,
"name" varchar(255) NOT NULL  ,
"description" varchar(255) DEFAULT NULL  ,
"concurrencystamp" varchar(255) NOT NULL   , Primary key("id"))
===============================

2024-03-30 14:54:57.045 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-03-30 14:54:57.046 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.046 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-03-30 14:54:57.046 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.046 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:57.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-03-30 14:54:57.054 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.058 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 14:54:57.059 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.059 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "yitemplate"(
"id" uuid NOT NULL  ,
"templatestr" text NOT NULL  ,
"buildpath" varchar(255) NOT NULL  ,
"name" varchar(255) NOT NULL  ,
"remarks" varchar(255) DEFAULT NULL   , Primary key("id"))
===============================

2024-03-30 14:54:57.067 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.067 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-03-30 14:54:57.067 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.068 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-03-30 14:54:57.068 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.068 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-03-30 14:54:57.068 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.068 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-03-30 14:54:57.068 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.068 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 14:54:57.074 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.074 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-03-30 14:54:57.076 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 14:54:57.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 14:54:57.182 +08:00 [DBG] =========Yi-SQL耗时11.5369毫秒=====
2024-03-30 14:54:57.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 14:54:57.198 +08:00 [DBG] =========Yi-SQL耗时1.4078毫秒=====
2024-03-30 14:54:57.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 14:54:57.203 +08:00 [DBG] =========Yi-SQL耗时1.3711毫秒=====
2024-03-30 14:54:57.209 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 14:54:57.212 +08:00 [DBG] =========Yi-SQL耗时3.3829毫秒=====
2024-03-30 14:54:57.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 14:54:57.216 +08:00 [DBG] =========Yi-SQL耗时1.4472毫秒=====
2024-03-30 14:54:57.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 14:54:57.221 +08:00 [DBG] =========Yi-SQL耗时1.4218毫秒=====
2024-03-30 14:54:57.226 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 14:54:57.228 +08:00 [DBG] =========Yi-SQL耗时1.605毫秒=====
2024-03-30 14:54:57.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "banner"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 14:54:57.233 +08:00 [DBG] =========Yi-SQL耗时1.8248毫秒=====
2024-03-30 14:54:57.235 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( "dicttype" = N'bbs_type_lable' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 14:54:57.235 +08:00 [DBG] =========Yi-SQL耗时0.5336毫秒=====
2024-03-30 14:54:57.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'BBS' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 14:54:57.240 +08:00 [DBG] =========Yi-SQL耗时0.9171毫秒=====
2024-03-30 14:54:57.249 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "bbsuserextrainfo"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 14:54:57.251 +08:00 [DBG] =========Yi-SQL耗时1.8752毫秒=====
2024-03-30 14:54:57.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "config"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 14:54:57.256 +08:00 [DBG] =========Yi-SQL耗时1.2552毫秒=====
2024-03-30 14:54:57.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "level"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 14:54:57.260 +08:00 [DBG] =========Yi-SQL耗时1.2868毫秒=====
2024-03-30 14:54:57.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 14:54:57.263 +08:00 [DBG] =========Yi-SQL耗时0.8801毫秒=====
2024-03-30 14:54:57.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "yitemplate"  ("id","templatestr","buildpath","name","remarks") VALUES 
 (  '7c83e923-9346-88bf-1f8c-3a11a050aef7' , 'using SqlSugar;
using lo.Abp;
using lo.Abp.Auditing;
using lo.Abp.Domain.Entities;
using Yi.Framework.Core.Data;

namespace Yi.Framework.Rbac.Domain.Entities
{
    /// <summary>
    /// 实体
    /// </summary>
    [SugarTable("@Model")]
    public class @ModelEntity : Entity<Guid>
    {
@field
    }
}
' , 'D:\code\Entities\@ModelEntity.cs' , 'Entity' , '实体' ),
 (  'c0d5ea70-8d5f-396c-7be1-3a11a050aefd' , 'using Yi.Framework.Ddd;
using Yi.Framework.Ddd.Application.Contracts;

namespace Yi.Framework.Rbac.Application.Contracts.Dtos.@Model
{
    /// <summary>
    /// 查询参数
    /// </summary>
    public class @ModelGetListInput : PagedAllResultRequestDto
    {
@field
    }
}
' , 'D:\code\Dtos\@Model\@ModelGetListInput.cs' , 'GetListInput' , '列表查询参数' ),
 (  '9f0d007e-4c8c-dd46-c9be-3a11a050aefe' , 'using lo.Abp.Application.Dtos;

namespace Yi.Framework.Rbac.Application.Contracts.Dtos.@Model
{
    public class @ModelGetListOutputDto : EntityDto<Guid>
    {
@field
    }
}
' , 'D:\code\Dtos\@Model\@ModelGetListOutputDto.cs' , 'GetListOutputDto' , '列表返回dto' ),
 (  '18d9ef00-eec8-9408-e045-3a11a050aefe' , 'using lo.Abp.Application.Dtos;

namespace Yi.Framework.Rbac.Application.Contracts.Dtos.@Model
{
    public class @ModelGetOutputDto : EntityDto<Guid>
    {
@field
    }
}
' , 'D:\code\Dtos\@Model\@ModelGetOutputDto.cs' , 'GetOutputDto' , '单返回dto' ),
 (  '6404420e-c125-9fb4-ff62-3a11a050aefe' , 'namespace Yi.Framework.Rbac.Application.Contracts.Dtos.@Model
{
    public class @ModelUpdateInput
    {
@field
    }
}
' , 'D:\code\Dtos\@Model\@ModelUpdateInput.cs' , 'UpdateInput' , '更新输入' ),
 (  '7e3702d6-39ab-f652-e65a-3a11a050aefe' , 'namespace Yi.Framework.Rbac.Application.Contracts.Dtos.@Model
{
    /// <summary>
    /// @Model输入创建对象
    /// </summary>
    public class @ModelCreateInput
    {
@field
    }
}
' , 'D:\code\Dtos\@Model\@ModelCreateInput.cs' , 'CreateInput' , '创建dto' ),
 (  'e125af9f-e059-58ce-da1d-3a11a050aefe' , 'using lo.Abp.Application.Services;
using Yi.Framework.Ddd.Application.Contracts;
using Yi.Framework.Rbac.Application.Contracts.Dtos.@Model;

namespace Yi.Framework.Rbac.Application.Contracts.IServices
{
    /// <summary>
    /// @Model服务抽象
    /// </summary>
    public interface I@ModelService : IYiCrudAppService<@ModelGetOutputDto, @ModelGetListOutputDto, Guid, @ModelGetListInput, @ModelCreateInput, @ModelUpdateInput>
    {

    }
}
' , 'D:\code\IServices\I@ModelService.cs' , 'IServices' , '应用服务抽象' ),
 (  'e6e27075-cc59-0904-3dca-3a11a050aefe' , 'using SqlSugar;
using lo.Abp.Application.Dtos;
using lo.Abp.Application.Services;
using Yi.Framework.Ddd.Application;
using Yi.Framework.Rbac.Application.Contracts.Dtos.@Model;
using Yi.Framework.Rbac.Application.Contracts.IServices;
using Yi.Framework.Rbac.Domain.Entities;
using Yi.Framework.SqlSugarCore.Abstractions;

namespace Yi.Framework.Rbac.Application.Services
{
    /// <summary>
    /// @Model服务实现
    /// </summary>
    public class @ModelService : YiCrudAppService<@ModelEntity, @ModelGetOutputDto, @ModelGetListOutputDto, Guid, @ModelGetListInput, @ModelCreateInput, @ModelUpdateInput>,
       I@ModelService
    {
        private ISqlSugarRepository<@ModelEntity, Guid> _repository;
        public @ModelService(ISqlSugarRepository<@ModelEntity, Guid> repository) : base(repository)
        {
            _repository = repository;
        }

        /// <summary>
        /// 多查
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public override async Task<PagedResultDto<@ModelGetListOutputDto>> GetListAsync(@ModelGetListInput input)
        {
            RefAsync<int> total = 0;

            var entities = await _repository._DbQueryable.WhereIF(!string.IsNullOrEmpty(input.@ModelKey), x => x.@ModelKey.Contains(input.@ModelKey!))
                          .WhereIF(!string.IsNullOrEmpty(input.@ModelName), x => x.@ModelName!.Contains(input.@ModelName!))
                          .WhereIF(input.StartTime is not null && input.EndTime is not null, x => x.CreationTime >= input.StartTime && x.CreationTime <= input.EndTime)
                          .ToPageListAsync(input.SkipCount, input.MaxResultCount, total);
            return new PagedResultDto<@ModelGetListOutputDto>(total, await MapToGetListOutputDtosAsync(entities));
        }
    }
}
' , 'D:\code\Services\@ModelService.cs' , 'Service' , '应用服务' ),
 (  'ea58c13b-1548-3d1f-816c-3a11a050aefe' , 'import request from ''@/utils/request''

// 分页查询
export function listData(query) {
  return request({
    url: ''/@model'',
    method: ''get'',
    params: query
  })
}

// id查询
export function getData(id) {
  return request({
    url: `/@model/${id}`,
    method: ''get''
  })
}

// 新增
export function addData(data) {
  return request({
    url: ''/@model'',
    method: ''post'',
    data: data
  })
}

// 修改
export function updateData(id,data) {
  return request({
    url: `/@model/${id}`,
    method: ''put'',
    data: data
  })
}

// 删除
export function delData(ids) {
  return request({
    url: `/@model`,
    method: ''delete'',
    params:{id:ids}
  })
}
' , 'D:\code\Api\@ModelApi.vue' , 'api' , '前端api' )
;

===============================

2024-03-30 14:54:57.287 +08:00 [DBG] =========Yi-SQL耗时2.5003毫秒=====
2024-03-30 14:54:57.302 +08:00 [DBG] 耗时-1987ms,已加载模块-Yi.Framework.SqlSugarCore
2024-03-30 14:54:57.414 +08:00 [DBG] 耗时-110ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-03-30 14:54:57.418 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-03-30 14:54:57.437 +08:00 [DBG] 耗时-19ms,已加载模块-Volo.Abp.AspNetCore
2024-03-30 14:54:57.443 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-03-30 14:54:57.465 +08:00 [DBG] 耗时-22ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-03-30 14:54:57.468 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-03-30 14:54:57.727 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-03-30 14:54:57.807 +08:00 [DBG] 耗时-339ms,已加载模块-Yi.Abp.Web
2024-03-30 14:54:57.814 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-03-30 14:54:57.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","currentlevel","minexperience","name","nick","logo" FROM "level"  
===============================

2024-03-30 14:54:57.825 +08:00 [DBG] =========Yi-SQL耗时0.9671毫秒=====
2024-03-30 14:54:57.900 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-03-30 14:54:57.900 +08:00 [DBG] 耗时-92ms,已加载模块-Yi.Framework.Bbs.Domain
2024-03-30 14:54:57.900 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2580ms】==========
2024-03-30 14:54:57.990 +08:00 [INF] Now listening on: http://[::]:19001
2024-03-30 14:54:57.990 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-03-30 14:54:57.990 +08:00 [INF] Hosting environment: Development
2024-03-30 14:54:57.990 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-03-30 14:59:57.531 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-03-30 14:59:57.545 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-03-30 15:00:02.162 +08:00 [INF] Loaded ABP modules:
2024-03-30 15:00:02.162 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-03-30 15:00:02.162 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-03-30 15:00:02.162 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-03-30 15:00:02.162 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-03-30 15:00:02.162 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-03-30 15:00:02.162 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-03-30 15:00:02.162 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-03-30 15:00:02.162 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-03-30 15:00:02.162 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-03-30 15:00:02.162 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-03-30 15:00:02.162 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-03-30 15:00:02.162 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-03-30 15:00:02.162 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-03-30 15:00:02.162 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-03-30 15:00:02.162 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-03-30 15:00:02.162 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-03-30 15:00:02.162 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-03-30 15:00:02.162 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-03-30 15:00:02.162 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-03-30 15:00:02.162 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-03-30 15:00:02.162 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-03-30 15:00:02.162 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-03-30 15:00:02.162 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-03-30 15:00:02.162 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-03-30 15:00:02.162 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-03-30 15:00:02.162 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-03-30 15:00:02.162 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-03-30 15:00:02.162 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-03-30 15:00:02.162 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-03-30 15:00:02.162 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-03-30 15:00:02.162 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-03-30 15:00:02.162 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-03-30 15:00:02.162 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-03-30 15:00:02.162 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-03-30 15:00:02.162 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-03-30 15:00:02.162 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-03-30 15:00:02.162 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-03-30 15:00:02.162 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-03-30 15:00:02.162 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-03-30 15:00:02.162 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-03-30 15:00:02.162 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-03-30 15:00:02.162 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-03-30 15:00:02.162 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-03-30 15:00:02.162 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-03-30 15:00:02.162 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-03-30 15:00:02.162 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-03-30 15:00:02.162 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-03-30 15:00:02.162 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-03-30 15:00:02.162 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-03-30 15:00:02.162 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-03-30 15:00:02.162 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-03-30 15:00:02.162 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-03-30 15:00:02.162 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-03-30 15:00:02.162 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-03-30 15:00:02.162 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-03-30 15:00:02.162 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-03-30 15:00:02.162 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-03-30 15:00:02.162 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-03-30 15:00:02.162 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-03-30 15:00:02.162 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-03-30 15:00:02.162 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-03-30 15:00:02.162 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-03-30 15:00:02.162 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-03-30 15:00:02.162 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-03-30 15:00:02.162 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-03-30 15:00:02.162 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-03-30 15:00:02.162 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-03-30 15:00:02.162 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-03-30 15:00:02.162 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-03-30 15:00:02.162 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-03-30 15:00:02.162 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-03-30 15:00:02.162 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-03-30 15:00:02.162 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-03-30 15:00:02.162 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-03-30 15:00:02.162 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-03-30 15:00:02.162 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-03-30 15:00:02.162 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-03-30 15:00:02.162 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-03-30 15:00:02.162 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-03-30 15:00:02.162 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-03-30 15:00:02.162 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-03-30 15:00:02.162 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-03-30 15:00:02.162 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-03-30 15:00:02.162 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-03-30 15:00:02.162 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-03-30 15:00:02.162 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-03-30 15:00:02.162 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-03-30 15:00:02.162 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-03-30 15:00:02.162 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-03-30 15:00:02.162 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-03-30 15:00:02.162 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-03-30 15:00:02.162 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-03-30 15:00:02.162 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-03-30 15:00:02.168 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-03-30 15:00:02.172 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-03-30 15:00:02.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:02.912 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:02.929 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:02.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:02.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-03-30 15:00:02.944 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:02.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:02.959 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:02.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-03-30 15:00:02.961 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:02.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:02.972 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:02.973 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:02.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:02.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-03-30 15:00:02.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:02.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-03-30 15:00:02.986 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:02.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-03-30 15:00:02.986 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:02.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-03-30 15:00:02.986 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:02.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-03-30 15:00:02.986 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:02.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-03-30 15:00:02.986 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:02.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-03-30 15:00:02.986 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:02.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-03-30 15:00:02.986 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:02.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-03-30 15:00:02.987 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:02.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-03-30 15:00:02.987 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:02.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-03-30 15:00:02.988 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:02.988 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:02.995 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:02.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-03-30 15:00:02.997 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.002 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.003 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.010 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.010 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-03-30 15:00:03.012 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.012 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-03-30 15:00:03.012 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.012 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-03-30 15:00:03.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-03-30 15:00:03.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-03-30 15:00:03.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-03-30 15:00:03.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-03-30 15:00:03.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-03-30 15:00:03.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.019 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.019 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-03-30 15:00:03.021 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.026 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.032 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.032 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-03-30 15:00:03.034 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.034 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-03-30 15:00:03.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-03-30 15:00:03.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-03-30 15:00:03.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-03-30 15:00:03.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 15:00:03.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 15:00:03.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-03-30 15:00:03.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-03-30 15:00:03.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-03-30 15:00:03.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-03-30 15:00:03.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-03-30 15:00:03.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-03-30 15:00:03.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-03-30 15:00:03.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-03-30 15:00:03.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.043 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.043 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-03-30 15:00:03.045 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.049 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.050 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.056 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.056 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-03-30 15:00:03.058 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.059 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-03-30 15:00:03.059 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.059 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-03-30 15:00:03.059 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.059 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-03-30 15:00:03.059 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.059 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-03-30 15:00:03.059 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-03-30 15:00:03.060 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-03-30 15:00:03.060 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-03-30 15:00:03.060 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-03-30 15:00:03.060 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-03-30 15:00:03.060 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-03-30 15:00:03.060 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-03-30 15:00:03.060 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.066 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.066 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-03-30 15:00:03.069 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.080 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.080 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-03-30 15:00:03.082 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-03-30 15:00:03.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-03-30 15:00:03.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-03-30 15:00:03.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-03-30 15:00:03.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-03-30 15:00:03.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-03-30 15:00:03.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-03-30 15:00:03.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.084 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.090 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-03-30 15:00:03.092 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.098 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.098 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.103 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.104 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-03-30 15:00:03.106 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.106 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-03-30 15:00:03.106 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.106 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-03-30 15:00:03.106 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.106 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-03-30 15:00:03.107 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.107 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.113 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-03-30 15:00:03.114 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.124 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.125 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.130 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-03-30 15:00:03.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-03-30 15:00:03.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-03-30 15:00:03.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-03-30 15:00:03.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-03-30 15:00:03.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-03-30 15:00:03.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-03-30 15:00:03.135 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:00:03.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.149 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-03-30 15:00:03.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.156 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.157 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.164 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.164 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-03-30 15:00:03.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-03-30 15:00:03.167 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-03-30 15:00:03.167 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-03-30 15:00:03.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-03-30 15:00:03.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 15:00:03.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 15:00:03.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-03-30 15:00:03.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-03-30 15:00:03.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-03-30 15:00:03.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-03-30 15:00:03.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-03-30 15:00:03.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-03-30 15:00:03.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-03-30 15:00:03.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-03-30 15:00:03.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-03-30 15:00:03.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-03-30 15:00:03.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-03-30 15:00:03.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-03-30 15:00:03.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.176 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-03-30 15:00:03.178 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.186 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.186 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.192 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.192 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-03-30 15:00:03.194 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-03-30 15:00:03.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-03-30 15:00:03.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-03-30 15:00:03.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.202 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.202 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-03-30 15:00:03.204 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.207 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.209 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.209 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.215 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-03-30 15:00:03.217 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-03-30 15:00:03.218 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.218 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-03-30 15:00:03.218 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.218 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-03-30 15:00:03.218 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.218 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-03-30 15:00:03.218 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.218 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 15:00:03.218 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.218 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 15:00:03.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-03-30 15:00:03.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-03-30 15:00:03.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-03-30 15:00:03.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-03-30 15:00:03.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-03-30 15:00:03.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-03-30 15:00:03.220 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.227 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.227 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-03-30 15:00:03.229 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.233 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.235 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.235 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-03-30 15:00:03.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-03-30 15:00:03.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-03-30 15:00:03.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-03-30 15:00:03.244 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-03-30 15:00:03.244 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.250 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.250 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-03-30 15:00:03.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-03-30 15:00:03.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-03-30 15:00:03.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-03-30 15:00:03.268 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.268 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-03-30 15:00:03.268 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.268 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-03-30 15:00:03.268 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.268 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 15:00:03.268 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.268 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 15:00:03.268 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.268 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-03-30 15:00:03.269 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-03-30 15:00:03.269 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-03-30 15:00:03.269 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-03-30 15:00:03.269 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-03-30 15:00:03.269 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-03-30 15:00:03.269 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.270 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-03-30 15:00:03.270 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.270 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-03-30 15:00:03.280 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.290 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-03-30 15:00:03.293 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.293 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-03-30 15:00:03.294 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.294 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-03-30 15:00:03.294 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.294 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.299 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.299 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-03-30 15:00:03.301 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.306 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.307 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.307 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.313 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-03-30 15:00:03.315 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-03-30 15:00:03.316 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-03-30 15:00:03.316 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-03-30 15:00:03.316 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-03-30 15:00:03.316 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-03-30 15:00:03.316 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-03-30 15:00:03.316 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-03-30 15:00:03.316 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-03-30 15:00:03.316 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-03-30 15:00:03.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-03-30 15:00:03.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-03-30 15:00:03.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-03-30 15:00:03.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-03-30 15:00:03.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-03-30 15:00:03.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-03-30 15:00:03.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-03-30 15:00:03.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-03-30 15:00:03.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-03-30 15:00:03.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-03-30 15:00:03.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 15:00:03.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 15:00:03.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-03-30 15:00:03.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-03-30 15:00:03.319 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-03-30 15:00:03.319 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:00:03.320 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.326 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.326 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-03-30 15:00:03.328 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.358 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.358 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-03-30 15:00:03.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.360 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-03-30 15:00:03.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-03-30 15:00:03.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-03-30 15:00:03.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-03-30 15:00:03.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.367 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.367 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-03-30 15:00:03.369 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.372 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.373 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.373 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-03-30 15:00:03.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-03-30 15:00:03.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-03-30 15:00:03.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-03-30 15:00:03.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-03-30 15:00:03.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.386 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.387 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-03-30 15:00:03.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.400 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.400 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-03-30 15:00:03.402 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.402 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-03-30 15:00:03.402 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.402 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.408 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-03-30 15:00:03.410 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-03-30 15:00:03.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.431 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-03-30 15:00:03.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.437 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.438 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.443 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.443 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-03-30 15:00:03.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-03-30 15:00:03.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-03-30 15:00:03.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-03-30 15:00:03.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-03-30 15:00:03.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-03-30 15:00:03.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-03-30 15:00:03.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-03-30 15:00:03.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-03-30 15:00:03.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-03-30 15:00:03.449 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:00:03.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.457 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-03-30 15:00:03.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.463 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.464 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.470 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-03-30 15:00:03.472 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.478 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-03-30 15:00:03.480 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.484 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.484 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-03-30 15:00:03.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-03-30 15:00:03.492 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-03-30 15:00:03.492 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-03-30 15:00:03.492 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-03-30 15:00:03.492 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-03-30 15:00:03.492 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-03-30 15:00:03.492 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.499 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.499 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-03-30 15:00:03.501 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.504 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.505 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.505 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.511 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.511 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-03-30 15:00:03.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-03-30 15:00:03.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-03-30 15:00:03.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-03-30 15:00:03.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.514 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:00:03.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.515 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.519 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.519 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-03-30 15:00:03.521 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.525 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-03-30 15:00:03.533 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-03-30 15:00:03.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-03-30 15:00:03.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:00:03.535 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.535 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.540 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-03-30 15:00:03.542 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.546 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.547 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.547 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-03-30 15:00:03.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-03-30 15:00:03.557 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:00:03.559 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:00:03.560 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.560 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:00:03.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-03-30 15:00:03.570 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-03-30 15:00:03.585 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.591 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-03-30 15:00:03.593 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.597 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.598 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.604 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.604 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-03-30 15:00:03.606 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-03-30 15:00:03.606 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-03-30 15:00:03.606 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.607 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:00:03.607 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.607 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:00:03.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.613 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.614 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-03-30 15:00:03.615 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.622 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.627 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.628 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-03-30 15:00:03.629 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.630 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-03-30 15:00:03.630 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.630 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-03-30 15:00:03.630 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.630 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-03-30 15:00:03.630 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.630 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:00:03.631 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.631 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:00:03.632 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.632 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:00:03.633 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.633 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.639 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-03-30 15:00:03.642 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.645 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.647 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-03-30 15:00:03.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.662 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-03-30 15:00:03.665 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-03-30 15:00:03.677 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.677 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-03-30 15:00:03.677 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.683 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.683 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-03-30 15:00:03.685 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.691 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.691 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.698 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.698 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-03-30 15:00:03.701 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.707 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-03-30 15:00:03.709 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.714 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.715 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.720 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.721 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-03-30 15:00:03.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-03-30 15:00:03.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-03-30 15:00:03.731 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.734 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.735 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.740 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-03-30 15:00:03.742 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.742 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-03-30 15:00:03.743 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-03-30 15:00:03.743 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-03-30 15:00:03.743 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-03-30 15:00:03.743 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-03-30 15:00:03.743 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-03-30 15:00:03.743 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-03-30 15:00:03.743 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-03-30 15:00:03.743 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.749 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.749 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-03-30 15:00:03.750 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.753 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.754 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.755 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.760 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.760 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-03-30 15:00:03.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-03-30 15:00:03.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-03-30 15:00:03.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-03-30 15:00:03.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-03-30 15:00:03.763 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.768 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.768 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-03-30 15:00:03.769 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.773 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.775 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.775 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-03-30 15:00:03.782 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.782 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:00:03.783 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.783 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:00:03.784 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.784 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.789 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.789 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-03-30 15:00:03.791 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.797 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-03-30 15:00:03.806 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:00:03.807 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.807 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:00:03.808 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.808 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.814 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.814 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-03-30 15:00:03.816 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.820 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.826 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.826 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-03-30 15:00:03.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:00:03.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:00:03.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-03-30 15:00:03.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.840 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.842 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.847 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-03-30 15:00:03.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:00:03.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.855 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.855 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-03-30 15:00:03.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.862 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.862 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.867 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.867 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-03-30 15:00:03.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-03-30 15:00:03.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-03-30 15:00:03.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-03-30 15:00:03.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-03-30 15:00:03.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-03-30 15:00:03.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.875 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-03-30 15:00:03.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.882 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.887 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.887 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-03-30 15:00:03.889 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-03-30 15:00:03.890 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.890 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-03-30 15:00:03.890 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.890 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.895 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-03-30 15:00:03.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.900 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:00:03.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.908 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-03-30 15:00:03.910 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.910 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-03-30 15:00:03.910 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.910 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-03-30 15:00:03.911 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.911 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-03-30 15:00:03.911 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.911 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-03-30 15:00:03.911 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.911 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:00:03.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:03.917 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-03-30 15:00:03.919 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:00:04.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:00:04.017 +08:00 [DBG] =========Yi-SQL耗时9.9783毫秒=====
2024-03-30 15:00:04.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:00:04.031 +08:00 [DBG] =========Yi-SQL耗时1.0024毫秒=====
2024-03-30 15:00:04.034 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:00:04.035 +08:00 [DBG] =========Yi-SQL耗时0.7702毫秒=====
2024-03-30 15:00:04.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:00:04.043 +08:00 [DBG] =========Yi-SQL耗时2.6729毫秒=====
2024-03-30 15:00:04.046 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:00:04.047 +08:00 [DBG] =========Yi-SQL耗时0.8195毫秒=====
2024-03-30 15:00:04.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:00:04.051 +08:00 [DBG] =========Yi-SQL耗时0.8597毫秒=====
2024-03-30 15:00:04.056 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:00:04.057 +08:00 [DBG] =========Yi-SQL耗时1.0984毫秒=====
2024-03-30 15:00:04.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "banner"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:00:04.061 +08:00 [DBG] =========Yi-SQL耗时0.7313毫秒=====
2024-03-30 15:00:04.063 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( "dicttype" = N'bbs_type_lable' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:00:04.063 +08:00 [DBG] =========Yi-SQL耗时0.4304毫秒=====
2024-03-30 15:00:04.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'BBS' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:00:04.066 +08:00 [DBG] =========Yi-SQL耗时0.4355毫秒=====
2024-03-30 15:00:04.068 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "bbsuserextrainfo"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 15:00:04.069 +08:00 [DBG] =========Yi-SQL耗时0.6986毫秒=====
2024-03-30 15:00:04.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "config"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:00:04.072 +08:00 [DBG] =========Yi-SQL耗时0.6309毫秒=====
2024-03-30 15:00:04.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "level"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 15:00:04.076 +08:00 [DBG] =========Yi-SQL耗时0.7424毫秒=====
2024-03-30 15:00:04.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 15:00:04.079 +08:00 [DBG] =========Yi-SQL耗时0.7463毫秒=====
2024-03-30 15:00:04.088 +08:00 [DBG] 耗时-1918ms,已加载模块-Yi.Framework.SqlSugarCore
2024-03-30 15:00:04.149 +08:00 [DBG] 耗时-58ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-03-30 15:00:04.152 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-03-30 15:00:04.167 +08:00 [DBG] 耗时-14ms,已加载模块-Volo.Abp.AspNetCore
2024-03-30 15:00:04.173 +08:00 [DBG] 耗时-6ms,已加载模块-Volo.Abp.Quartz
2024-03-30 15:00:04.195 +08:00 [DBG] 耗时-22ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-03-30 15:00:04.198 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-03-30 15:00:04.442 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-03-30 15:00:04.514 +08:00 [DBG] 耗时-316ms,已加载模块-Yi.Abp.Web
2024-03-30 15:00:04.521 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-03-30 15:00:04.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","currentlevel","minexperience","name","nick","logo" FROM "level"  
===============================

2024-03-30 15:00:04.534 +08:00 [DBG] =========Yi-SQL耗时3.7442毫秒=====
2024-03-30 15:00:04.608 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-03-30 15:00:04.609 +08:00 [DBG] 耗时-93ms,已加载模块-Yi.Framework.Bbs.Domain
2024-03-30 15:00:04.609 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2433ms】==========
2024-03-30 15:00:04.695 +08:00 [INF] Now listening on: http://[::]:19001
2024-03-30 15:00:04.695 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-03-30 15:00:04.695 +08:00 [INF] Hosting environment: Development
2024-03-30 15:00:04.695 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-03-30 15:00:18.335 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:00:18.359 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-03-30 15:00:18.463 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:00:18.464 +08:00 [DBG] =========Yi-SQL耗时0.8928毫秒=====
2024-03-30 15:00:18.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-03-30 15:00:18.473 +08:00 [DBG] =========Yi-SQL耗时1.2238毫秒=====
2024-03-30 15:00:18.505 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:00:18.530 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 169.48ms
2024-03-30 15:00:18.531 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:08.642 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-03-30 15:06:08.654 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-03-30 15:06:13.242 +08:00 [INF] Loaded ABP modules:
2024-03-30 15:06:13.243 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-03-30 15:06:13.243 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-03-30 15:06:13.243 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-03-30 15:06:13.243 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-03-30 15:06:13.243 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-03-30 15:06:13.243 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-03-30 15:06:13.243 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-03-30 15:06:13.243 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-03-30 15:06:13.243 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-03-30 15:06:13.243 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-03-30 15:06:13.243 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-03-30 15:06:13.243 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-03-30 15:06:13.243 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-03-30 15:06:13.243 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-03-30 15:06:13.243 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-03-30 15:06:13.243 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-03-30 15:06:13.243 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-03-30 15:06:13.243 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-03-30 15:06:13.243 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-03-30 15:06:13.243 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-03-30 15:06:13.243 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-03-30 15:06:13.243 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-03-30 15:06:13.243 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-03-30 15:06:13.243 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-03-30 15:06:13.243 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-03-30 15:06:13.243 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-03-30 15:06:13.243 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-03-30 15:06:13.243 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-03-30 15:06:13.243 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-03-30 15:06:13.243 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-03-30 15:06:13.243 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-03-30 15:06:13.243 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-03-30 15:06:13.243 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-03-30 15:06:13.243 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-03-30 15:06:13.243 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-03-30 15:06:13.243 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-03-30 15:06:13.243 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-03-30 15:06:13.243 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-03-30 15:06:13.243 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-03-30 15:06:13.243 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-03-30 15:06:13.243 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-03-30 15:06:13.243 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-03-30 15:06:13.243 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-03-30 15:06:13.243 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-03-30 15:06:13.243 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-03-30 15:06:13.243 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-03-30 15:06:13.243 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-03-30 15:06:13.243 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-03-30 15:06:13.243 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-03-30 15:06:13.243 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-03-30 15:06:13.243 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-03-30 15:06:13.243 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-03-30 15:06:13.243 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-03-30 15:06:13.243 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-03-30 15:06:13.243 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-03-30 15:06:13.243 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-03-30 15:06:13.243 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-03-30 15:06:13.243 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-03-30 15:06:13.243 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-03-30 15:06:13.243 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-03-30 15:06:13.243 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-03-30 15:06:13.243 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-03-30 15:06:13.243 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-03-30 15:06:13.243 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-03-30 15:06:13.243 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-03-30 15:06:13.243 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-03-30 15:06:13.243 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-03-30 15:06:13.243 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-03-30 15:06:13.243 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-03-30 15:06:13.243 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-03-30 15:06:13.243 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-03-30 15:06:13.243 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-03-30 15:06:13.243 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-03-30 15:06:13.243 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-03-30 15:06:13.243 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-03-30 15:06:13.243 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-03-30 15:06:13.243 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-03-30 15:06:13.243 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-03-30 15:06:13.243 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-03-30 15:06:13.243 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-03-30 15:06:13.243 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-03-30 15:06:13.243 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-03-30 15:06:13.243 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-03-30 15:06:13.243 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-03-30 15:06:13.243 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-03-30 15:06:13.243 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-03-30 15:06:13.243 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-03-30 15:06:13.243 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-03-30 15:06:13.243 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-03-30 15:06:13.243 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-03-30 15:06:13.243 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-03-30 15:06:13.243 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-03-30 15:06:13.243 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-03-30 15:06:13.249 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-03-30 15:06:13.253 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-03-30 15:06:13.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:13.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.896 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:13.903 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-03-30 15:06:13.910 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.915 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:13.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-03-30 15:06:13.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:13.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:13.945 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.945 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-03-30 15:06:13.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-03-30 15:06:13.949 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.949 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-03-30 15:06:13.949 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.949 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-03-30 15:06:13.949 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.949 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-03-30 15:06:13.950 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-03-30 15:06:13.950 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-03-30 15:06:13.950 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-03-30 15:06:13.950 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-03-30 15:06:13.950 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-03-30 15:06:13.950 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-03-30 15:06:13.951 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:13.959 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-03-30 15:06:13.961 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.965 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:13.966 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.967 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:13.972 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.973 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-03-30 15:06:13.975 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.976 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-03-30 15:06:13.976 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.976 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-03-30 15:06:13.976 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.976 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-03-30 15:06:13.976 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.976 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-03-30 15:06:13.977 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-03-30 15:06:13.977 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-03-30 15:06:13.977 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-03-30 15:06:13.977 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:13.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-03-30 15:06:13.985 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.988 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:13.990 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:13.996 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-03-30 15:06:13.998 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-03-30 15:06:13.998 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-03-30 15:06:13.998 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-03-30 15:06:13.999 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.999 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-03-30 15:06:13.999 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.999 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 15:06:13.999 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.999 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 15:06:13.999 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.999 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-03-30 15:06:13.999 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.999 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-03-30 15:06:13.999 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:13.999 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-03-30 15:06:14.000 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.000 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-03-30 15:06:14.000 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.000 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-03-30 15:06:14.000 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.000 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-03-30 15:06:14.000 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.000 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-03-30 15:06:14.000 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.000 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-03-30 15:06:14.000 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.000 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.007 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-03-30 15:06:14.009 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.015 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.021 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.021 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-03-30 15:06:14.024 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-03-30 15:06:14.024 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-03-30 15:06:14.024 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-03-30 15:06:14.025 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.025 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-03-30 15:06:14.025 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.025 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-03-30 15:06:14.025 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.025 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-03-30 15:06:14.025 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.025 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-03-30 15:06:14.026 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-03-30 15:06:14.026 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-03-30 15:06:14.026 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-03-30 15:06:14.026 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-03-30 15:06:14.026 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.027 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-03-30 15:06:14.038 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.043 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.044 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.044 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.050 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-03-30 15:06:14.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-03-30 15:06:14.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-03-30 15:06:14.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-03-30 15:06:14.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-03-30 15:06:14.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-03-30 15:06:14.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-03-30 15:06:14.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-03-30 15:06:14.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.058 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.059 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-03-30 15:06:14.060 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.066 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.066 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.072 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-03-30 15:06:14.074 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.074 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-03-30 15:06:14.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-03-30 15:06:14.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-03-30 15:06:14.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.081 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-03-30 15:06:14.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.090 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-03-30 15:06:14.098 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.098 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-03-30 15:06:14.099 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-03-30 15:06:14.099 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-03-30 15:06:14.099 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-03-30 15:06:14.099 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-03-30 15:06:14.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-03-30 15:06:14.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:06:14.111 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.111 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.117 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-03-30 15:06:14.119 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.124 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.125 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.125 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-03-30 15:06:14.136 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-03-30 15:06:14.137 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-03-30 15:06:14.138 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-03-30 15:06:14.138 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-03-30 15:06:14.138 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 15:06:14.138 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 15:06:14.138 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-03-30 15:06:14.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-03-30 15:06:14.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-03-30 15:06:14.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-03-30 15:06:14.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-03-30 15:06:14.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-03-30 15:06:14.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-03-30 15:06:14.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-03-30 15:06:14.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-03-30 15:06:14.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-03-30 15:06:14.141 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-03-30 15:06:14.141 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-03-30 15:06:14.141 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.149 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-03-30 15:06:14.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.158 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.160 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-03-30 15:06:14.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-03-30 15:06:14.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-03-30 15:06:14.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-03-30 15:06:14.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-03-30 15:06:14.175 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.180 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.186 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.186 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-03-30 15:06:14.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-03-30 15:06:14.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-03-30 15:06:14.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-03-30 15:06:14.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-03-30 15:06:14.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 15:06:14.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 15:06:14.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-03-30 15:06:14.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-03-30 15:06:14.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-03-30 15:06:14.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-03-30 15:06:14.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-03-30 15:06:14.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-03-30 15:06:14.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.190 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-03-30 15:06:14.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.202 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.202 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.207 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.207 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-03-30 15:06:14.209 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.209 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-03-30 15:06:14.209 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-03-30 15:06:14.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-03-30 15:06:14.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-03-30 15:06:14.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.215 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-03-30 15:06:14.217 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.223 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-03-30 15:06:14.230 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-03-30 15:06:14.230 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-03-30 15:06:14.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-03-30 15:06:14.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-03-30 15:06:14.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 15:06:14.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 15:06:14.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-03-30 15:06:14.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-03-30 15:06:14.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-03-30 15:06:14.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-03-30 15:06:14.232 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-03-30 15:06:14.232 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-03-30 15:06:14.232 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-03-30 15:06:14.232 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-03-30 15:06:14.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.244 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.249 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.249 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-03-30 15:06:14.251 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-03-30 15:06:14.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-03-30 15:06:14.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.257 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-03-30 15:06:14.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.271 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.271 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-03-30 15:06:14.273 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-03-30 15:06:14.274 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-03-30 15:06:14.274 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-03-30 15:06:14.274 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-03-30 15:06:14.274 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-03-30 15:06:14.274 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-03-30 15:06:14.275 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.275 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-03-30 15:06:14.275 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.275 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-03-30 15:06:14.275 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.275 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-03-30 15:06:14.275 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.275 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-03-30 15:06:14.275 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.275 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-03-30 15:06:14.275 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.275 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-03-30 15:06:14.275 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.275 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-03-30 15:06:14.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-03-30 15:06:14.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-03-30 15:06:14.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-03-30 15:06:14.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-03-30 15:06:14.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-03-30 15:06:14.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-03-30 15:06:14.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-03-30 15:06:14.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-03-30 15:06:14.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-03-30 15:06:14.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-03-30 15:06:14.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-03-30 15:06:14.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:06:14.278 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-03-30 15:06:14.286 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.289 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.290 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.296 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.296 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-03-30 15:06:14.298 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-03-30 15:06:14.298 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-03-30 15:06:14.298 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-03-30 15:06:14.298 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-03-30 15:06:14.298 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.304 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.304 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-03-30 15:06:14.306 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.315 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-03-30 15:06:14.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-03-30 15:06:14.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-03-30 15:06:14.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-03-30 15:06:14.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-03-30 15:06:14.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.323 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.323 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-03-30 15:06:14.325 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.336 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-03-30 15:06:14.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-03-30 15:06:14.365 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-03-30 15:06:14.373 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.386 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.386 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-03-30 15:06:14.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-03-30 15:06:14.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.400 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.402 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.402 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.408 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-03-30 15:06:14.410 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-03-30 15:06:14.411 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-03-30 15:06:14.411 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-03-30 15:06:14.411 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-03-30 15:06:14.411 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-03-30 15:06:14.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-03-30 15:06:14.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-03-30 15:06:14.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-03-30 15:06:14.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-03-30 15:06:14.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:06:14.414 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.414 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.420 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-03-30 15:06:14.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-03-30 15:06:14.435 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.440 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-03-30 15:06:14.442 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.452 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.452 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-03-30 15:06:14.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-03-30 15:06:14.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-03-30 15:06:14.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-03-30 15:06:14.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-03-30 15:06:14.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-03-30 15:06:14.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-03-30 15:06:14.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-03-30 15:06:14.462 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.466 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.467 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.472 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-03-30 15:06:14.474 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.474 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-03-30 15:06:14.474 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.474 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-03-30 15:06:14.475 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.475 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-03-30 15:06:14.475 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.475 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:06:14.476 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.476 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-03-30 15:06:14.484 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-03-30 15:06:14.496 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.496 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-03-30 15:06:14.497 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.497 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-03-30 15:06:14.497 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.497 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:06:14.498 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.498 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.503 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.503 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-03-30 15:06:14.505 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.512 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.512 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.517 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.518 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-03-30 15:06:14.519 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.520 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-03-30 15:06:14.520 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.520 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:06:14.521 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:06:14.523 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.523 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:06:14.524 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-03-30 15:06:14.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.535 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.537 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.543 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-03-30 15:06:14.545 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.545 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.550 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.551 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-03-30 15:06:14.553 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.559 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.560 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.565 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.565 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-03-30 15:06:14.567 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-03-30 15:06:14.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-03-30 15:06:14.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:06:14.570 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:06:14.572 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.572 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.579 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.579 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-03-30 15:06:14.581 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.590 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.591 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.592 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.598 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-03-30 15:06:14.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-03-30 15:06:14.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-03-30 15:06:14.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-03-30 15:06:14.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:06:14.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:06:14.603 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:06:14.604 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.604 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.610 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.610 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-03-30 15:06:14.612 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.615 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.617 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.617 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-03-30 15:06:14.625 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.631 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.631 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-03-30 15:06:14.634 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.644 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.644 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-03-30 15:06:14.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-03-30 15:06:14.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-03-30 15:06:14.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.659 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.659 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.666 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.666 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-03-30 15:06:14.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-03-30 15:06:14.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.679 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.681 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.681 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.688 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.688 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-03-30 15:06:14.691 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.691 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-03-30 15:06:14.691 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.692 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.699 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.699 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-03-30 15:06:14.701 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.704 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-03-30 15:06:14.714 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-03-30 15:06:14.715 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-03-30 15:06:14.715 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-03-30 15:06:14.715 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-03-30 15:06:14.715 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-03-30 15:06:14.715 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-03-30 15:06:14.715 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-03-30 15:06:14.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-03-30 15:06:14.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.722 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.722 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-03-30 15:06:14.724 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.729 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.734 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.734 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-03-30 15:06:14.736 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-03-30 15:06:14.736 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-03-30 15:06:14.737 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.737 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-03-30 15:06:14.737 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.737 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-03-30 15:06:14.737 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.737 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.742 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.742 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-03-30 15:06:14.745 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.748 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.750 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.750 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.755 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.755 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-03-30 15:06:14.757 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.757 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:06:14.758 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:06:14.759 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.759 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.764 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.765 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-03-30 15:06:14.766 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.772 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.773 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.774 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-03-30 15:06:14.784 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.784 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:06:14.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:06:14.786 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.786 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.792 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.792 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-03-30 15:06:14.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.799 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.805 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-03-30 15:06:14.808 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.808 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:06:14.809 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:06:14.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.815 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.816 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-03-30 15:06:14.817 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.827 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-03-30 15:06:14.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-03-30 15:06:14.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.836 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-03-30 15:06:14.838 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-03-30 15:06:14.851 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-03-30 15:06:14.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-03-30 15:06:14.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-03-30 15:06:14.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-03-30 15:06:14.853 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-03-30 15:06:14.853 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.862 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.862 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-03-30 15:06:14.864 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.868 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.874 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-03-30 15:06:14.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-03-30 15:06:14.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-03-30 15:06:14.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.882 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-03-30 15:06:14.884 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.887 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-03-30 15:06:14.889 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.894 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-03-30 15:06:14.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-03-30 15:06:14.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-03-30 15:06:14.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-03-30 15:06:14.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-03-30 15:06:14.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-03-30 15:06:14.905 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-03-30 15:06:14.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-03-30 15:06:14.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:06:15.004 +08:00 [DBG] =========Yi-SQL耗时9.7137毫秒=====
2024-03-30 15:06:15.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:06:15.018 +08:00 [DBG] =========Yi-SQL耗时0.847毫秒=====
2024-03-30 15:06:15.021 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:06:15.022 +08:00 [DBG] =========Yi-SQL耗时0.7676毫秒=====
2024-03-30 15:06:15.027 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:06:15.030 +08:00 [DBG] =========Yi-SQL耗时2.8497毫秒=====
2024-03-30 15:06:15.033 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:06:15.034 +08:00 [DBG] =========Yi-SQL耗时0.7322毫秒=====
2024-03-30 15:06:15.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:06:15.037 +08:00 [DBG] =========Yi-SQL耗时0.6125毫秒=====
2024-03-30 15:06:15.042 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:06:15.043 +08:00 [DBG] =========Yi-SQL耗时0.8859毫秒=====
2024-03-30 15:06:15.046 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "banner"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:06:15.047 +08:00 [DBG] =========Yi-SQL耗时0.6677毫秒=====
2024-03-30 15:06:15.048 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( "dicttype" = N'bbs_type_lable' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:06:15.049 +08:00 [DBG] =========Yi-SQL耗时0.4404毫秒=====
2024-03-30 15:06:15.051 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'BBS' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:06:15.051 +08:00 [DBG] =========Yi-SQL耗时0.4324毫秒=====
2024-03-30 15:06:15.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "bbsuserextrainfo"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 15:06:15.054 +08:00 [DBG] =========Yi-SQL耗时0.6982毫秒=====
2024-03-30 15:06:15.057 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "config"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:06:15.058 +08:00 [DBG] =========Yi-SQL耗时0.6362毫秒=====
2024-03-30 15:06:15.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "level"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 15:06:15.062 +08:00 [DBG] =========Yi-SQL耗时0.8715毫秒=====
2024-03-30 15:06:15.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-03-30 15:06:15.065 +08:00 [DBG] =========Yi-SQL耗时0.6111毫秒=====
2024-03-30 15:06:15.074 +08:00 [DBG] 耗时-1824ms,已加载模块-Yi.Framework.SqlSugarCore
2024-03-30 15:06:15.076 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-03-30 15:06:15.131 +08:00 [DBG] 耗时-53ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-03-30 15:06:15.134 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-03-30 15:06:15.148 +08:00 [DBG] 耗时-14ms,已加载模块-Volo.Abp.AspNetCore
2024-03-30 15:06:15.154 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-03-30 15:06:15.176 +08:00 [DBG] 耗时-21ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-03-30 15:06:15.178 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-03-30 15:06:15.431 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-03-30 15:06:15.505 +08:00 [DBG] 耗时-326ms,已加载模块-Yi.Abp.Web
2024-03-30 15:06:15.513 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-03-30 15:06:15.522 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","currentlevel","minexperience","name","nick","logo" FROM "level"  
===============================

2024-03-30 15:06:15.526 +08:00 [DBG] =========Yi-SQL耗时3.429毫秒=====
2024-03-30 15:06:15.598 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-03-30 15:06:15.598 +08:00 [DBG] 耗时-92ms,已加载模块-Yi.Framework.Bbs.Domain
2024-03-30 15:06:15.599 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2342ms】==========
2024-03-30 15:06:15.690 +08:00 [INF] Now listening on: http://[::]:19001
2024-03-30 15:06:15.690 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-03-30 15:06:15.690 +08:00 [INF] Hosting environment: Development
2024-03-30 15:06:15.690 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-03-30 15:06:34.772 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:06:34.842 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:34.842 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 15:06:34.847 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 15:06:34.860 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:06:34.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'd1c28168-8d08-38a8-2758-3a119a14c17a'    AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:06:34.963 +08:00 [DBG] =========Yi-SQL耗时3.8829毫秒=====
2024-03-30 15:06:35.016 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:06:35.019 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 15:06:35.035 +08:00 [WRN] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "数据错误，用户id：userId 不存在，请重新登录",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-03-30 15:06:35.036 +08:00 [WRN] 数据错误，用户id：userId 不存在，请重新登录
Volo.Abp.UserFriendlyException: 数据错误，用户id：userId 不存在，请重新登录
   at Yi.Framework.Rbac.SqlSugarCore.Repositories.UserRepository.GetUserAllInfoAsync(Guid userId) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.SqlSugarCore\Repositories\UserRepository.cs:line 36
   at Yi.Framework.Rbac.Application.Services.AccountService.Get() in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\AccountService.cs:line 280
   at lambda_method1495(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-03-30 15:06:35.036 +08:00 [WRN] Code:
2024-03-30 15:06:35.036 +08:00 [WRN] Details:
2024-03-30 15:06:35.065 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-03-30 15:06:35.149 +08:00 [INF] 2024/3/30 15:06:35：cc,Gnj82-6iXSsgoxW7kxo2NQ连接服务端success，当前已连接0个
2024-03-30 15:06:35.164 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 300.394ms
2024-03-30 15:06:35.165 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:35.178 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:06:35.179 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:35.181 +08:00 [INF] Route matched with {action = "PostLogout", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] PostLogout() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:06:35.191 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-03-30 15:06:35.192 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application) in 10.8581ms
2024-03-30 15:06:35.192 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:35.215 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:06:35.216 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:06:35.217 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:06:35.218 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 15:06:35.218 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 15:06:35.284 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:06:35.284 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:06:35.284 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:06:35.285 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 15:06:35.308 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 15:06:35.309 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:35.312 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-03-30 15:06:35.312 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:06:35.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:06:35.321 +08:00 [DBG] =========Yi-SQL耗时2.4009毫秒=====
2024-03-30 15:06:35.326 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:06:35.329 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 17.1151ms
2024-03-30 15:06:35.330 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 15:06:35.371 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-03-30 15:06:35.373 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 60.6326ms
2024-03-30 15:06:35.373 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:47.268 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:06:47.269 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:47.277 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:06:47.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"   WHERE (( "username" = N'cc' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:06:47.316 +08:00 [DBG] =========Yi-SQL耗时0.9372毫秒=====
2024-03-30 15:06:47.324 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:06:47.325 +08:00 [DBG] =========Yi-SQL耗时0.6882毫秒=====
2024-03-30 15:06:47.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-03-30 15:06:47.340 +08:00 [DBG] =========Yi-SQL耗时1.2046毫秒=====
2024-03-30 15:06:47.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:06:47.347 +08:00 [DBG] =========Yi-SQL耗时0.3324毫秒=====
2024-03-30 15:06:47.395 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-03-30 15:06:47.396 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 119.585ms
2024-03-30 15:06:47.397 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:47.401 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:06:47.403 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 15:06:47.403 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 15:06:47.406 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:47.407 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:06:47.408 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:06:47.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:06:47.409 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 15:06:47.414 +08:00 [INF] 用户【e94b7363-80d1-10a3-eb2c-3a119a976151:cc】登入系统
2024-03-30 15:06:47.431 +08:00 [INF] 2024/3/30 15:06:47：cc,DcgOrD_FqUo_7JtEYWfvsw连接服务端success，当前已连接2个
2024-03-30 15:06:47.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "loginlog"  
           ("id","creationtime","loginuser","loginlocation","loginip","browser","os","logmsg","creatorid")
     VALUES
           (N'0ed42dac-81e5-5f6e-d9d6-3a11a05b8506',CAST('2024-03-30 15:06:47.435' AS DATETIME),N'cc',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'cc登录系统',N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-03-30 15:06:47.457 +08:00 [DBG] =========Yi-SQL耗时6.3729毫秒=====
2024-03-30 15:06:47.468 +08:00 [DBG] =========Yi-SQL耗时59.1983毫秒=====
2024-03-30 15:06:47.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-03-30 15:06:47.470 +08:00 [DBG] =========Yi-SQL耗时0.2714毫秒=====
2024-03-30 15:06:47.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:06:47.471 +08:00 [DBG] =========Yi-SQL耗时0.541毫秒=====
2024-03-30 15:06:47.494 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-03-30 15:06:47.501 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 94.3496ms
2024-03-30 15:06:47.501 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:47.508 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:47.509 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:06:47.511 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:06:47.512 +08:00 [DBG] =========Yi-SQL耗时0.6986毫秒=====
2024-03-30 15:06:47.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-03-30 15:06:47.514 +08:00 [DBG] =========Yi-SQL耗时0.908毫秒=====
2024-03-30 15:06:47.515 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:06:47.515 +08:00 [DBG] =========Yi-SQL耗时0.3328毫秒=====
2024-03-30 15:06:47.517 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:06:47.518 +08:00 [DBG] =========Yi-SQL耗时1.0487毫秒=====
2024-03-30 15:06:47.541 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:06:47.544 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 34.2648ms
2024-03-30 15:06:47.544 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:52.164 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:52.164 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:52.164 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:52.164 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:52.167 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 15:06:52.167 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 15:06:52.169 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 15:06:52.169 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-03-30 15:06:52.182 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:06:52.198 +08:00 [DBG] =========Yi-SQL耗时15.8016毫秒=====
2024-03-30 15:06:52.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:06:52.226 +08:00 [DBG] =========Yi-SQL耗时3.1763毫秒=====
2024-03-30 15:06:52.328 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:06:52.328 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:06:52.331 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 163.8049ms
2024-03-30 15:06:52.331 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 163.9796ms
2024-03-30 15:06:52.331 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:52.331 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:52.349 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-03-30 15:06:52.351 +08:00 [DBG] =========Yi-SQL耗时1.7741毫秒=====
2024-03-30 15:06:52.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-03-30 15:06:52.353 +08:00 [DBG] =========Yi-SQL耗时1.312毫秒=====
2024-03-30 15:06:52.358 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-03-30 15:06:52.360 +08:00 [DBG] =========Yi-SQL耗时1.7438毫秒=====
2024-03-30 15:06:52.363 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-03-30 15:06:52.365 +08:00 [DBG] =========Yi-SQL耗时1.5697毫秒=====
2024-03-30 15:06:52.368 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:06:52.368 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:06:52.371 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 201.8671ms
2024-03-30 15:06:52.371 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:52.373 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 203.8941ms
2024-03-30 15:06:52.373 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:54.348 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:54.348 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:54.352 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-03-30 15:06:54.352 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 15:06:54.362 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "post"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:06:54.362 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:06:54.363 +08:00 [DBG] =========Yi-SQL耗时0.7771毫秒=====
2024-03-30 15:06:54.363 +08:00 [DBG] =========Yi-SQL耗时0.8128毫秒=====
2024-03-30 15:06:54.375 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-03-30 15:06:54.375 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-03-30 15:06:54.376 +08:00 [DBG] =========Yi-SQL耗时1.1188毫秒=====
2024-03-30 15:06:54.376 +08:00 [DBG] =========Yi-SQL耗时1.0624毫秒=====
2024-03-30 15:06:54.387 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:06:54.387 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:06:54.392 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 39.9478ms
2024-03-30 15:06:54.392 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:06:54.392 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 40.2886ms
2024-03-30 15:06:54.392 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:07:19.291 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:07:19.292 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:07:19.294 +08:00 [INF] Route matched with {action = "Create", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto] CreateAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserCreateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 15:07:19.333 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE  (N'006238' = "username")   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:07:19.334 +08:00 [DBG] =========Yi-SQL耗时0.7529毫秒=====
2024-03-30 15:07:19.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "user"  
           ("id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state")
     VALUES
           (N'14034830-d11c-db5d-ea3e-3a11a05c01b1',0,null,null,N'006238',N'x_y1MH9uPKcBOombSSuYpWUp4fGCxKkDlrgamzEODegCwV262YnI9La5Xj-yRcAKNv1BnF4C1-yUtwjnoYd_2Q',N'gIVETVCHtEQB9MImBNz//w==',null,N'123',null,null,null,null,null,null,2,null,CAST('2024-03-30 15:07:19.342' AS DATETIME),N'e94b7363-80d1-10a3-eb2c-3a119a976151',null,null,0,1) ;
===============================

2024-03-30 15:07:19.350 +08:00 [DBG] =========Yi-SQL耗时2.5222毫秒=====
2024-03-30 15:07:19.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM "userrole" WHERE  ("userid" IN ('14034830-d11c-db5d-ea3e-3a11a05c01b1'))  
===============================

2024-03-30 15:07:19.362 +08:00 [DBG] =========Yi-SQL耗时1.2592毫秒=====
2024-03-30 15:07:19.367 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "userrole"  
           ("id","roleid","userid")
     VALUES
           (N'f701be3d-7569-9e4a-4997-3a11a05c01c6',N'3580f6ed-3e5e-0cb3-ee9a-3a119a976148',N'14034830-d11c-db5d-ea3e-3a11a05c01b1') ;
===============================

2024-03-30 15:07:19.369 +08:00 [DBG] =========Yi-SQL耗时1.8214毫秒=====
2024-03-30 15:07:19.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM "userpost" WHERE  ("userid" IN ('14034830-d11c-db5d-ea3e-3a11a05c01b1'))  
===============================

2024-03-30 15:07:19.372 +08:00 [DBG] =========Yi-SQL耗时1.0623毫秒=====
2024-03-30 15:07:19.386 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto'.
2024-03-30 15:07:19.410 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:07:19.410 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 15:07:19.429 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "operationlog"  
           ("id","title","opertype","requestmethod","operuser","operip","operlocation","method","requestparam","requestresult","creationtime","creatorid")
     VALUES
           (N'b04e314e-68dd-9bf4-9cb5-3a11a05c01fa',N'添加用户',1,N'POST',N'cc',N'127.0.0.1',N'0 内网IP',N'/api/app/user',null,N'{"Name":null,"Age":null,"UserName":"006238","Icon":null,"Nick":"123","Email":null,"Ip":null,"Address":null,"Phone":null,"Introduction":null,"Remark":null,"Sex":2,"State":true,"CreationTime":"2024-03-30T15:07:19.3422091+08:00","DeptId":null,"Dept":null,"Posts":null,"Roles":null,"Id":"14034830-d11c-db5d-ea3e-3a11a05c01b1"}',CAST('2024-03-30 15:07:19.419' AS DATETIME),N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-03-30 15:07:19.439 +08:00 [DBG] =========Yi-SQL耗时9.8748毫秒=====
2024-03-30 15:07:19.445 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.CreateAsync (Yi.Framework.Rbac.Application) in 150.1064ms
2024-03-30 15:07:19.445 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:07:19.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-03-30 15:07:19.454 +08:00 [DBG] =========Yi-SQL耗时2.5024毫秒=====
2024-03-30 15:07:19.457 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-03-30 15:07:19.462 +08:00 [DBG] =========Yi-SQL耗时4.798毫秒=====
2024-03-30 15:07:19.464 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:07:19.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "bbsuserextrainfo"  
           ("id","userid","userlimit","level","money","experience","discussnumber","commentnumber","agreenumber")
     VALUES
           (N'1c2119a6-008c-ded8-49a3-3a11a05c021b',N'14034830-d11c-db5d-ea3e-3a11a05c01b1',0,1,0,0,0,0,0) ;
===============================

2024-03-30 15:07:19.464 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 54.1921ms
2024-03-30 15:07:19.464 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:07:19.469 +08:00 [DBG] =========Yi-SQL耗时4.5889毫秒=====
2024-03-30 15:07:26.294 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:07:26.294 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 15:07:26.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-03-30 15:07:26.300 +08:00 [DBG] =========Yi-SQL耗时1.3359毫秒=====
2024-03-30 15:07:26.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-03-30 15:07:26.304 +08:00 [DBG] =========Yi-SQL耗时1.0135毫秒=====
2024-03-30 15:07:26.305 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:07:26.305 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 10.9529ms
2024-03-30 15:07:26.305 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:07:29.633 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:07:29.634 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 15:07:29.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:07:29.638 +08:00 [DBG] =========Yi-SQL耗时0.9743毫秒=====
2024-03-30 15:07:29.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-03-30 15:07:29.642 +08:00 [DBG] =========Yi-SQL耗时0.8527毫秒=====
2024-03-30 15:07:29.643 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:07:29.643 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 9.4105ms
2024-03-30 15:07:29.643 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:07:34.467 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:07:34.469 +08:00 [INF] Route matched with {action = "Get", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 15:07:34.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'14034830-d11c-db5d-ea3e-3a11a05c01b1'    AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:07:34.473 +08:00 [DBG] =========Yi-SQL耗时0.6885毫秒=====
2024-03-30 15:07:34.476 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-03-30 15:07:34.477 +08:00 [DBG] =========Yi-SQL耗时0.7065毫秒=====
2024-03-30 15:07:34.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-03-30 15:07:34.479 +08:00 [DBG] =========Yi-SQL耗时0.6652毫秒=====
2024-03-30 15:07:34.480 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"postid" as bid FROM "userpost"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-03-30 15:07:34.480 +08:00 [DBG] =========Yi-SQL耗时0.2449毫秒=====
2024-03-30 15:07:34.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","postcode" AS "postcode","postname" AS "postname","remark" AS "remark" FROM "post"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)    
===============================

2024-03-30 15:07:34.481 +08:00 [DBG] =========Yi-SQL耗时0.746毫秒=====
2024-03-30 15:07:34.485 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","deptname" AS "deptname","deptcode" AS "deptcode","leader" AS "leader","parentid" AS "parentid","remark" AS "remark" FROM "dept"  WHERE   "id" IN (null)    
===============================

2024-03-30 15:07:34.485 +08:00 [DBG] =========Yi-SQL耗时0.3024毫秒=====
2024-03-30 15:07:34.486 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto'.
2024-03-30 15:07:34.487 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application) in 17.9908ms
2024-03-30 15:07:34.487 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:07:40.180 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:07:40.180 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:07:40.182 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 15:07:40.182 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 15:07:40.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-03-30 15:07:40.190 +08:00 [DBG] =========Yi-SQL耗时0.7005毫秒=====
2024-03-30 15:07:40.210 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:07:40.232 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 49.4083ms
2024-03-30 15:07:40.232 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:07:40.234 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:07:40.236 +08:00 [INF] Route matched with {action = "GetListRoleId", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 15:07:40.246 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"  WHERE "id" = N'3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:07:40.247 +08:00 [DBG] =========Yi-SQL耗时0.7361毫秒=====
2024-03-30 15:07:40.249 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu" "m"  WHERE (EXISTS ( SELECT * FROM "rolemenu" "rm"  WHERE (( "roleid" = N'3580f6ed-3e5e-0cb3-ee9a-3a119a976148' ) AND ( "menuid" = "m"."id" )) ))  AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:07:40.250 +08:00 [DBG] =========Yi-SQL耗时1.6648毫秒=====
2024-03-30 15:07:40.252 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:07:40.252 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application) in 15.7828ms
2024-03-30 15:07:40.252 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:07:40.258 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-03-30 15:07:40.260 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 77.6737ms
2024-03-30 15:07:40.260 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:07:59.084 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:07:59.085 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:07:59.087 +08:00 [INF] Route matched with {action = "Update", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 15:07:59.104 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"  WHERE "id" = N'3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:07:59.105 +08:00 [DBG] =========Yi-SQL耗时0.788毫秒=====
2024-03-30 15:07:59.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "role"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-03-29 12:14:27.143' AS DATETIME),"creatorid"=null,"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-03-30 15:07:59.122' AS DATETIME),"ordernum"=1,"rolename"=N'测试角色',"rolecode"=N'test',"remark"=N'测试用的角色',"datascope"=0,"state"=1  WHERE "id"=N'3580f6ed-3e5e-0cb3-ee9a-3a119a976148'
===============================

2024-03-30 15:07:59.134 +08:00 [DBG] =========Yi-SQL耗时0.6884毫秒=====
2024-03-30 15:07:59.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM "rolemenu" WHERE  ("roleid" IN ('3580f6ed-3e5e-0cb3-ee9a-3a119a976148'))  
===============================

2024-03-30 15:07:59.136 +08:00 [DBG] =========Yi-SQL耗时0.6264毫秒=====
2024-03-30 15:07:59.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "rolemenu"  ("id","roleid","menuid") VALUES 
 (  '6593f6b8-c342-ff51-116f-3a11a05c9d21' , '3580f6ed-3e5e-0cb3-ee9a-3a119a976148' , 'e6bf52fd-b827-33d0-b83c-3a119a97612e' ),
 (  'cb8333e9-ac61-2181-cb6a-3a11a05c9d22' , '3580f6ed-3e5e-0cb3-ee9a-3a119a976148' , '60604454-c644-fd31-e57c-3a119a97612e' ),
 (  '19d8748c-9061-b1ae-861c-3a11a05c9d23' , '3580f6ed-3e5e-0cb3-ee9a-3a119a976148' , 'e893eea8-99b8-2d23-4c3f-3a119a97612e' ),
 (  'd2949676-83f7-4be6-3f9a-3a11a05c9d23' , '3580f6ed-3e5e-0cb3-ee9a-3a119a976148' , 'ceecb9ff-5230-f3e0-79fe-3a119a97612e' ),
 (  '91c6c946-61f8-4bd1-da0a-3a11a05c9d23' , '3580f6ed-3e5e-0cb3-ee9a-3a119a976148' , '0965b770-1de8-1c24-7e9f-3a119a97612e' ),
 (  '24b1e7fa-7769-b00e-a7ad-3a11a05c9d23' , '3580f6ed-3e5e-0cb3-ee9a-3a119a976148' , '49d3225a-5f55-53fe-01fd-3a119a97612e' ),
 (  '4f16298e-af84-f64f-b809-3a11a05c9d23' , '3580f6ed-3e5e-0cb3-ee9a-3a119a976148' , '51121df1-70bc-842c-6592-3a119a97616a' ),
 (  'ddba18ac-480b-cdf3-6275-3a11a05c9d23' , '3580f6ed-3e5e-0cb3-ee9a-3a119a976148' , '33197b18-4bca-93d8-d456-3a119a97612e' ),
 (  '02463318-50dc-d0b4-6948-3a11a05c9d23' , '3580f6ed-3e5e-0cb3-ee9a-3a119a976148' , '46c0eabd-f0f6-163e-9c8d-3a119a97612e' )
;

===============================

2024-03-30 15:07:59.141 +08:00 [DBG] =========Yi-SQL耗时0.9551毫秒=====
2024-03-30 15:07:59.141 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-03-30 15:07:59.142 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.UpdateAsync (Yi.Framework.Rbac.Application) in 54.0109ms
2024-03-30 15:07:59.142 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:07:59.180 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:07:59.180 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 15:07:59.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:07:59.186 +08:00 [DBG] =========Yi-SQL耗时1.5026毫秒=====
2024-03-30 15:07:59.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-03-30 15:07:59.189 +08:00 [DBG] =========Yi-SQL耗时0.8961毫秒=====
2024-03-30 15:07:59.191 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:07:59.192 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 12.212ms
2024-03-30 15:07:59.192 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:04.280 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:08:04.281 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:04.281 +08:00 [INF] Route matched with {action = "PostLogout", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] PostLogout() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:04.282 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-03-30 15:08:04.282 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application) in 1.03ms
2024-03-30 15:08:04.282 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:04.288 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:08:04.289 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:08:04.289 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:08:04.289 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 15:08:04.290 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 15:08:04.327 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:08:04.327 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:08:04.327 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:08:04.328 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 15:08:04.431 +08:00 [INF] 用户cc离开了，当前已连接2个
2024-03-30 15:08:04.432 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-03-30 15:08:04.434 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 15:08:04.434 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 15:08:04.434 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 15:08:04.434 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 15:08:04.527 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:08:04.528 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:08:04.528 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:08:04.534 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 15:08:04.535 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 15:08:04.604 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:08:04.605 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:08:04.605 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:08:04.606 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 15:08:04.663 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:04.663 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:04.664 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 15:08:04.664 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-03-30 15:08:04.665 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:08:04.667 +08:00 [DBG] =========Yi-SQL耗时2.1569毫秒=====
2024-03-30 15:08:04.669 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:08:04.670 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-03-30 15:08:04.670 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 6.0774ms
2024-03-30 15:08:04.670 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 6.8049ms
2024-03-30 15:08:04.670 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:04.671 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 15:08:06.565 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:08:06.566 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:06.566 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:06.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"   WHERE (( "username" = N'006238' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:08:06.569 +08:00 [DBG] =========Yi-SQL耗时0.8357毫秒=====
2024-03-30 15:08:06.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'14034830-d11c-db5d-ea3e-3a11a05c01b1'    AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:08:06.572 +08:00 [DBG] =========Yi-SQL耗时0.906毫秒=====
2024-03-30 15:08:06.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-03-30 15:08:06.573 +08:00 [DBG] =========Yi-SQL耗时0.2108毫秒=====
2024-03-30 15:08:06.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:08:06.574 +08:00 [DBG] =========Yi-SQL耗时0.3233毫秒=====
2024-03-30 15:08:06.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "roleid" as aid,"menuid" as bid FROM "rolemenu"  WHERE   "roleid" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-03-30 15:08:06.575 +08:00 [DBG] =========Yi-SQL耗时0.2564毫秒=====
2024-03-30 15:08:06.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","menuname" AS "menuname","menutype" AS "menutype","permissioncode" AS "permissioncode","parentid" AS "parentid","menuicon" AS "menuicon","router" AS "router","islink" AS "islink","iscache" AS "iscache","isshow" AS "isshow","remark" AS "remark","component" AS "component","query" AS "query" FROM "menu"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN ('e6bf52fd-b827-33d0-b83c-3a119a97612e','60604454-c644-fd31-e57c-3a119a97612e','e893eea8-99b8-2d23-4c3f-3a119a97612e','ceecb9ff-5230-f3e0-79fe-3a119a97612e','0965b770-1de8-1c24-7e9f-3a119a97612e','49d3225a-5f55-53fe-01fd-3a119a97612e','51121df1-70bc-842c-6592-3a119a97616a','33197b18-4bca-93d8-d456-3a119a97612e','46c0eabd-f0f6-163e-9c8d-3a119a97612e')     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:08:06.577 +08:00 [DBG] =========Yi-SQL耗时0.7571毫秒=====
2024-03-30 15:08:06.603 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-03-30 15:08:06.603 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 36.9642ms
2024-03-30 15:08:06.604 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:06.604 +08:00 [INF] 用户【14034830-d11c-db5d-ea3e-3a11a05c01b1:006238】登入系统
2024-03-30 15:08:06.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "loginlog"  
           ("id","creationtime","loginuser","loginlocation","loginip","browser","os","logmsg","creatorid")
     VALUES
           (N'181fc95b-3ec1-f45c-a47b-3a11a05cba4c',CAST('2024-03-30 15:08:06.605' AS DATETIME),N'006238',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'006238登录系统',N'14034830-d11c-db5d-ea3e-3a11a05c01b1') ;
===============================

2024-03-30 15:08:06.606 +08:00 [DBG] =========Yi-SQL耗时0.7984毫秒=====
2024-03-30 15:08:06.610 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:08:06.612 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 15:08:06.613 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 15:08:06.615 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:06.615 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:06.617 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:08:06.617 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 15:08:06.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'14034830-d11c-db5d-ea3e-3a11a05c01b1'    AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  
===============================

2024-03-30 15:08:06.624 +08:00 [DBG] =========Yi-SQL耗时0.862毫秒=====
2024-03-30 15:08:06.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-03-30 15:08:06.627 +08:00 [DBG] =========Yi-SQL耗时0.2567毫秒=====
2024-03-30 15:08:06.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 ) AND ( 1 = 1 )    AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:08:06.627 +08:00 [DBG] =========Yi-SQL耗时0.2796毫秒=====
2024-03-30 15:08:06.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "roleid" as aid,"menuid" as bid FROM "rolemenu"  WHERE   "roleid" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-03-30 15:08:06.628 +08:00 [DBG] =========Yi-SQL耗时0.2083毫秒=====
2024-03-30 15:08:06.628 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","menuname" AS "menuname","menutype" AS "menutype","permissioncode" AS "permissioncode","parentid" AS "parentid","menuicon" AS "menuicon","router" AS "router","islink" AS "islink","iscache" AS "iscache","isshow" AS "isshow","remark" AS "remark","component" AS "component","query" AS "query" FROM "menu"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN ('e6bf52fd-b827-33d0-b83c-3a119a97612e','60604454-c644-fd31-e57c-3a119a97612e','e893eea8-99b8-2d23-4c3f-3a119a97612e','ceecb9ff-5230-f3e0-79fe-3a119a97612e','0965b770-1de8-1c24-7e9f-3a119a97612e','49d3225a-5f55-53fe-01fd-3a119a97612e','51121df1-70bc-842c-6592-3a119a97616a','33197b18-4bca-93d8-d456-3a119a97612e','46c0eabd-f0f6-163e-9c8d-3a119a97612e')     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:08:06.629 +08:00 [DBG] =========Yi-SQL耗时0.5246毫秒=====
2024-03-30 15:08:06.633 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-03-30 15:08:06.635 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 19.3007ms
2024-03-30 15:08:06.635 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:06.640 +08:00 [INF] 2024/3/30 15:08:06：006238,C2Y7RMNychN6bUTWteYRAA连接服务端success，当前已连接1个
2024-03-30 15:08:06.641 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:06.641 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:06.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'14034830-d11c-db5d-ea3e-3a11a05c01b1'    AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  
===============================

2024-03-30 15:08:06.643 +08:00 [DBG] =========Yi-SQL耗时0.6063毫秒=====
2024-03-30 15:08:06.645 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-03-30 15:08:06.645 +08:00 [DBG] =========Yi-SQL耗时0.3264毫秒=====
2024-03-30 15:08:06.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 ) AND ( 1 = 1 )    AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:08:06.646 +08:00 [DBG] =========Yi-SQL耗时0.3058毫秒=====
2024-03-30 15:08:06.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "roleid" as aid,"menuid" as bid FROM "rolemenu"  WHERE   "roleid" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-03-30 15:08:06.647 +08:00 [DBG] =========Yi-SQL耗时0.3176毫秒=====
2024-03-30 15:08:06.647 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","menuname" AS "menuname","menutype" AS "menutype","permissioncode" AS "permissioncode","parentid" AS "parentid","menuicon" AS "menuicon","router" AS "router","islink" AS "islink","iscache" AS "iscache","isshow" AS "isshow","remark" AS "remark","component" AS "component","query" AS "query" FROM "menu"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN ('e6bf52fd-b827-33d0-b83c-3a119a97612e','60604454-c644-fd31-e57c-3a119a97612e','e893eea8-99b8-2d23-4c3f-3a119a97612e','ceecb9ff-5230-f3e0-79fe-3a119a97612e','0965b770-1de8-1c24-7e9f-3a119a97612e','49d3225a-5f55-53fe-01fd-3a119a97612e','51121df1-70bc-842c-6592-3a119a97616a','33197b18-4bca-93d8-d456-3a119a97612e','46c0eabd-f0f6-163e-9c8d-3a119a97612e')     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:08:06.648 +08:00 [DBG] =========Yi-SQL耗时0.4407毫秒=====
2024-03-30 15:08:06.648 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:08:06.648 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 7.0548ms
2024-03-30 15:08:06.649 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:11.661 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:11.661 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:11.661 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:11.661 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:11.661 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:11.661 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:11.661 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:11.661 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:11.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:08:11.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:08:11.664 +08:00 [DBG] =========Yi-SQL耗时1.0979毫秒=====
2024-03-30 15:08:11.664 +08:00 [DBG] =========Yi-SQL耗时1.4115毫秒=====
2024-03-30 15:08:11.669 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:08:11.669 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:08:11.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-03-30 15:08:11.669 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 7.6669ms
2024-03-30 15:08:11.669 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 7.6437ms
2024-03-30 15:08:11.669 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:11.669 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:11.671 +08:00 [DBG] =========Yi-SQL耗时1.4033毫秒=====
2024-03-30 15:08:11.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-03-30 15:08:11.675 +08:00 [DBG] =========Yi-SQL耗时0.9752毫秒=====
2024-03-30 15:08:11.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 )  AND ( 1 = 1 )  ) CountTable 
===============================

2024-03-30 15:08:11.679 +08:00 [DBG] =========Yi-SQL耗时3.4923毫秒=====
2024-03-30 15:08:11.683 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  AND ( 1 = 1 )   ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-03-30 15:08:11.684 +08:00 [DBG] =========Yi-SQL耗时1.1838毫秒=====
2024-03-30 15:08:11.684 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:08:11.685 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 23.3749ms
2024-03-30 15:08:11.685 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:11.685 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:08:11.686 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 24.332ms
2024-03-30 15:08:11.686 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:13.193 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:13.193 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:13.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 )  AND ( 1 = 1 )  
===============================

2024-03-30 15:08:13.196 +08:00 [DBG] =========Yi-SQL耗时0.7839毫秒=====
2024-03-30 15:08:13.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )  AND ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-03-30 15:08:13.200 +08:00 [DBG] =========Yi-SQL耗时0.7236毫秒=====
2024-03-30 15:08:13.201 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:08:13.202 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 8.2555ms
2024-03-30 15:08:13.202 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:25.110 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:25.110 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:25.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 )  AND ( 1 = 1 )  ) CountTable 
===============================

2024-03-30 15:08:25.114 +08:00 [DBG] =========Yi-SQL耗时1.2109毫秒=====
2024-03-30 15:08:25.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  AND ( 1 = 1 )   ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-03-30 15:08:25.118 +08:00 [DBG] =========Yi-SQL耗时0.7815毫秒=====
2024-03-30 15:08:25.118 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:08:25.119 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 8.2335ms
2024-03-30 15:08:25.119 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:25.722 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:25.722 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:25.725 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 )  AND ( 1 = 1 )  ) CountTable 
===============================

2024-03-30 15:08:25.727 +08:00 [DBG] =========Yi-SQL耗时1.3538毫秒=====
2024-03-30 15:08:25.730 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  AND ( 1 = 1 )   ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-03-30 15:08:25.730 +08:00 [DBG] =========Yi-SQL耗时0.74毫秒=====
2024-03-30 15:08:25.731 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:08:25.731 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 8.8547ms
2024-03-30 15:08:25.731 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:37.799 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:08:37.800 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:37.800 +08:00 [INF] Route matched with {action = "PostLogout", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] PostLogout() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:37.802 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-03-30 15:08:37.802 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application) in 1.6039ms
2024-03-30 15:08:37.802 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:37.813 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:08:37.814 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:08:37.814 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:08:37.814 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 15:08:37.814 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 15:08:37.845 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:08:37.845 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:08:37.846 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:08:37.846 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 15:08:37.856 +08:00 [INF] 用户006238离开了，当前已连接1个
2024-03-30 15:08:37.858 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 15:08:37.858 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 15:08:37.872 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 15:08:38.008 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:08:38.009 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:08:38.009 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:08:38.010 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 15:08:38.010 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 15:08:38.096 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:08:38.096 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:08:38.096 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:08:38.097 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 15:08:38.151 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 15:08:38.151 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-03-30 15:08:38.153 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:38.153 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:08:38.155 +08:00 [DBG] =========Yi-SQL耗时1.5919毫秒=====
2024-03-30 15:08:38.155 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:38.157 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:08:38.157 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 6.1813ms
2024-03-30 15:08:38.157 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 15:08:38.161 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-03-30 15:08:38.161 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 5.5792ms
2024-03-30 15:08:38.161 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:40.213 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:08:40.214 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:40.214 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:40.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"   WHERE (( "username" = N'cc' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:08:40.217 +08:00 [DBG] =========Yi-SQL耗时0.7739毫秒=====
2024-03-30 15:08:40.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:08:40.220 +08:00 [DBG] =========Yi-SQL耗时0.6009毫秒=====
2024-03-30 15:08:40.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-03-30 15:08:40.221 +08:00 [DBG] =========Yi-SQL耗时0.3166毫秒=====
2024-03-30 15:08:40.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:08:40.222 +08:00 [DBG] =========Yi-SQL耗时0.303毫秒=====
2024-03-30 15:08:40.248 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-03-30 15:08:40.249 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 34.5438ms
2024-03-30 15:08:40.249 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:40.249 +08:00 [INF] 用户【e94b7363-80d1-10a3-eb2c-3a119a976151:cc】登入系统
2024-03-30 15:08:40.250 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "loginlog"  
           ("id","creationtime","loginuser","loginlocation","loginip","browser","os","logmsg","creatorid")
     VALUES
           (N'acc6ed14-c974-1df9-f241-3a11a05d3db9',CAST('2024-03-30 15:08:40.250' AS DATETIME),N'cc',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'cc登录系统',N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-03-30 15:08:40.251 +08:00 [DBG] =========Yi-SQL耗时0.7602毫秒=====
2024-03-30 15:08:40.254 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:08:40.255 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 15:08:40.255 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 15:08:40.260 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:40.260 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:40.262 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:08:40.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:08:40.263 +08:00 [DBG] =========Yi-SQL耗时0.6752毫秒=====
2024-03-30 15:08:40.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-03-30 15:08:40.265 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 15:08:40.265 +08:00 [DBG] =========Yi-SQL耗时0.3186毫秒=====
2024-03-30 15:08:40.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:08:40.267 +08:00 [DBG] =========Yi-SQL耗时0.3615毫秒=====
2024-03-30 15:08:40.267 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-03-30 15:08:40.267 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 7.1264ms
2024-03-30 15:08:40.268 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:40.273 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:40.273 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:40.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:08:40.275 +08:00 [DBG] =========Yi-SQL耗时0.632毫秒=====
2024-03-30 15:08:40.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-03-30 15:08:40.277 +08:00 [DBG] =========Yi-SQL耗时0.4259毫秒=====
2024-03-30 15:08:40.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:08:40.278 +08:00 [DBG] =========Yi-SQL耗时0.2974毫秒=====
2024-03-30 15:08:40.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:08:40.279 +08:00 [DBG] =========Yi-SQL耗时0.4626毫秒=====
2024-03-30 15:08:40.279 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:08:40.279 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 6.3806ms
2024-03-30 15:08:40.279 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:40.286 +08:00 [INF] 2024/3/30 15:08:40：cc,wTe9m7xHyW7r_kP2nFwdPg连接服务端success，当前已连接1个
2024-03-30 15:08:43.146 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:43.146 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:43.146 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:43.146 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:43.146 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:43.146 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:43.147 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:43.147 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:43.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:08:43.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:08:43.149 +08:00 [DBG] =========Yi-SQL耗时1.0006毫秒=====
2024-03-30 15:08:43.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-03-30 15:08:43.158 +08:00 [DBG] =========Yi-SQL耗时9.3783毫秒=====
2024-03-30 15:08:43.161 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:08:43.162 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 15.0006ms
2024-03-30 15:08:43.162 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:43.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-03-30 15:08:43.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-03-30 15:08:43.162 +08:00 [DBG] =========Yi-SQL耗时12.6572毫秒=====
2024-03-30 15:08:43.168 +08:00 [DBG] =========Yi-SQL耗时5.7521毫秒=====
2024-03-30 15:08:43.170 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:08:43.171 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 24.094ms
2024-03-30 15:08:43.171 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:43.171 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:08:43.172 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 25.1929ms
2024-03-30 15:08:43.172 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:43.239 +08:00 [DBG] =========Yi-SQL耗时76.2441毫秒=====
2024-03-30 15:08:43.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-03-30 15:08:43.240 +08:00 [DBG] =========Yi-SQL耗时0.9177毫秒=====
2024-03-30 15:08:43.241 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:08:43.241 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 93.7477ms
2024-03-30 15:08:43.241 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:43.656 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:43.656 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:43.658 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:08:43.659 +08:00 [DBG] =========Yi-SQL耗时0.8936毫秒=====
2024-03-30 15:08:43.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-03-30 15:08:43.663 +08:00 [DBG] =========Yi-SQL耗时1.3086毫秒=====
2024-03-30 15:08:43.664 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:08:43.664 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 7.7597ms
2024-03-30 15:08:43.664 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:54.277 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:54.277 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:54.277 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:54.277 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:54.279 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-03-30 15:08:54.279 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"  WHERE "id" = N'3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:08:54.279 +08:00 [DBG] =========Yi-SQL耗时0.9251毫秒=====
2024-03-30 15:08:54.279 +08:00 [DBG] =========Yi-SQL耗时0.8592毫秒=====
2024-03-30 15:08:54.288 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-03-30 15:08:54.288 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 10.8636ms
2024-03-30 15:08:54.288 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:54.295 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:08:54.299 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 21.8493ms
2024-03-30 15:08:54.299 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:54.323 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:08:54.323 +08:00 [INF] Route matched with {action = "GetListRoleId", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 15:08:54.325 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu" "m"  WHERE (EXISTS ( SELECT * FROM "rolemenu" "rm"  WHERE (( "roleid" = N'3580f6ed-3e5e-0cb3-ee9a-3a119a976148' ) AND ( "menuid" = "m"."id" )) ))  AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:08:54.327 +08:00 [DBG] =========Yi-SQL耗时2.0019毫秒=====
2024-03-30 15:08:54.329 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:08:54.329 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application) in 5.6681ms
2024-03-30 15:08:54.329 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:10:45.463 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 15:10:45.463 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:10:45.477 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-03-30 15:10:45.477 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 13.7746ms
2024-03-30 15:10:45.477 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 15:11:39.302 +08:00 [INF] 用户cc离开了，当前已连接1个
2024-03-30 15:11:39.308 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 15:11:39.314 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 15:11:39.488 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:11:39.489 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 15:11:39.489 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 15:11:39.502 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 15:11:39.503 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:11:39.503 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-03-30 15:11:39.504 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.0577ms
2024-03-30 15:11:39.504 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 15:11:39.569 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 15:11:39.569 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:11:39.572 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:11:39.575 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:11:39.577 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 15:11:39.608 +08:00 [INF] 2024/3/30 15:11:39：cc,NSBfDaKzz_jBBseEjAXXMA连接服务端success，当前已连接0个
2024-03-30 15:11:39.635 +08:00 [DBG] =========Yi-SQL耗时62.1432毫秒=====
2024-03-30 15:11:39.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-03-30 15:11:39.637 +08:00 [DBG] =========Yi-SQL耗时1.0958毫秒=====
2024-03-30 15:11:39.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:11:39.639 +08:00 [DBG] =========Yi-SQL耗时1.1891毫秒=====
2024-03-30 15:11:39.640 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:11:39.663 +08:00 [DBG] =========Yi-SQL耗时22.8805毫秒=====
2024-03-30 15:11:39.663 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:11:39.664 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 94.6186ms
2024-03-30 15:11:39.664 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 15:11:58.976 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:11:58.976 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:11:58.976 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:11:58.976 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-03-30 15:11:58.976 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 15:11:58.976 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 15:11:58.976 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:11:58.976 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 15:11:58.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:11:58.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:11:58.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-03-30 15:11:58.981 +08:00 [DBG] =========Yi-SQL耗时3.3983毫秒=====
2024-03-30 15:11:58.988 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:11:58.988 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.115ms
2024-03-30 15:11:58.988 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:11:58.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-03-30 15:11:58.992 +08:00 [DBG] =========Yi-SQL耗时2.8509毫秒=====
2024-03-30 15:11:58.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-03-30 15:11:59.003 +08:00 [DBG] =========Yi-SQL耗时7.0402毫秒=====
2024-03-30 15:11:59.003 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:11:59.004 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 27.3103ms
2024-03-30 15:11:59.004 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:11:59.054 +08:00 [DBG] =========Yi-SQL耗时76.008毫秒=====
2024-03-30 15:11:59.056 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-03-30 15:11:59.058 +08:00 [DBG] =========Yi-SQL耗时1.3374毫秒=====
2024-03-30 15:11:59.059 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:11:59.060 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 83.6655ms
2024-03-30 15:11:59.060 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:11:59.064 +08:00 [DBG] =========Yi-SQL耗时86.6226毫秒=====
2024-03-30 15:11:59.066 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:11:59.067 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 90.757ms
2024-03-30 15:11:59.067 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:25.821 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:12:25.822 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.RestPasswordAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:25.828 +08:00 [INF] Route matched with {action = "RestPassword", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] RestPasswordAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Account.RestPasswordDto) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:12:25.840 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'd7a9b677-bff8-c2ad-dab6-3a119a976152'    AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:12:25.842 +08:00 [DBG] =========Yi-SQL耗时1.8182毫秒=====
2024-03-30 15:12:25.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "user"  SET
           "isdeleted"=0,"name"=N'大测试',"age"=18,"username"=N'test',"password"=N'rGS0dtFBl7fd7M7BJEPQYRV21olGyQhU2eIt4_JQQFmwqmJ7ekuF7caWXamhs4QMeBDWjsXBdMjRdofZpn94-w',"salt"=N'M8O18qptF23iWcREWRQvEA==',"icon"=null,"nick"=N'测试',"email"=N'454313500@qq.com',"ip"=null,"address"=N'深圳',"phone"=15900000000,"introduction"=N'还有我！',"remark"=N'我没有描述！',"sex"=1,"deptid"=null,"creationtime"=CAST('2024-03-29 12:14:27.152' AS DATETIME),"creatorid"=null,"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-03-30 15:12:25.848' AS DATETIME),"ordernum"=1,"state"=1  WHERE "id"=N'd7a9b677-bff8-c2ad-dab6-3a119a976152'
===============================

2024-03-30 15:12:25.850 +08:00 [DBG] =========Yi-SQL耗时1.6872毫秒=====
2024-03-30 15:12:25.852 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-03-30 15:12:25.852 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.RestPasswordAsync (Yi.Framework.Rbac.Application) in 24.4829ms
2024-03-30 15:12:25.852 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.RestPasswordAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:30.411 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:30.411 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:30.411 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 15:12:30.411 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-03-30 15:12:30.411 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:30.411 +08:00 [INF] Route matched with {action = "Get", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 15:12:30.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:12:30.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'd7a9b677-bff8-c2ad-dab6-3a119a976152'    AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:12:30.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "post"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:12:30.414 +08:00 [DBG] =========Yi-SQL耗时1.4796毫秒=====
2024-03-30 15:12:30.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-03-30 15:12:30.417 +08:00 [DBG] =========Yi-SQL耗时4.5255毫秒=====
2024-03-30 15:12:30.420 +08:00 [DBG] =========Yi-SQL耗时7.6156毫秒=====
2024-03-30 15:12:30.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-03-30 15:12:30.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'd7a9b677-bff8-c2ad-dab6-3a119a976152'    
===============================

2024-03-30 15:12:30.423 +08:00 [DBG] =========Yi-SQL耗时6.1205毫秒=====
2024-03-30 15:12:30.424 +08:00 [DBG] =========Yi-SQL耗时1.7472毫秒=====
2024-03-30 15:12:30.425 +08:00 [DBG] =========Yi-SQL耗时1.6093毫秒=====
2024-03-30 15:12:30.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)    
===============================

2024-03-30 15:12:30.430 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:12:30.431 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:12:30.431 +08:00 [DBG] =========Yi-SQL耗时0.7336毫秒=====
2024-03-30 15:12:30.431 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 19.7608ms
2024-03-30 15:12:30.431 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 19.7771ms
2024-03-30 15:12:30.431 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:30.431 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:30.431 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"postid" as bid FROM "userpost"  WHERE   "userid" = 'd7a9b677-bff8-c2ad-dab6-3a119a976152'    
===============================

2024-03-30 15:12:30.432 +08:00 [DBG] =========Yi-SQL耗时0.9764毫秒=====
2024-03-30 15:12:30.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","postcode" AS "postcode","postname" AS "postname","remark" AS "remark" FROM "post"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)    
===============================

2024-03-30 15:12:30.433 +08:00 [DBG] =========Yi-SQL耗时0.4933毫秒=====
2024-03-30 15:12:30.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","deptname" AS "deptname","deptcode" AS "deptcode","leader" AS "leader","parentid" AS "parentid","remark" AS "remark" FROM "dept"  WHERE   "id" IN (null)    
===============================

2024-03-30 15:12:30.434 +08:00 [DBG] =========Yi-SQL耗时0.3502毫秒=====
2024-03-30 15:12:30.435 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto'.
2024-03-30 15:12:30.435 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application) in 23.9158ms
2024-03-30 15:12:30.435 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:38.942 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:12:38.942 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:38.945 +08:00 [INF] Route matched with {action = "Update", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 15:12:38.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ((N'test' = "username") AND NOT (N'd7a9b677-bff8-c2ad-dab6-3a119a976152' = "id") )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:12:38.956 +08:00 [DBG] =========Yi-SQL耗时0.7964毫秒=====
2024-03-30 15:12:38.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'd7a9b677-bff8-c2ad-dab6-3a119a976152'    AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:12:38.960 +08:00 [DBG] =========Yi-SQL耗时0.6162毫秒=====
2024-03-30 15:12:38.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "user"  SET
           "isdeleted"=0,"name"=N'大测试',"age"=18,"username"=N'test',"password"=N'rGS0dtFBl7fd7M7BJEPQYRV21olGyQhU2eIt4_JQQFmwqmJ7ekuF7caWXamhs4QMeBDWjsXBdMjRdofZpn94-w',"salt"=N'M8O18qptF23iWcREWRQvEA==',"icon"=null,"nick"=N'测试',"email"=N'454313500@qq.com',"ip"=null,"address"=N'深圳',"phone"=15900000000,"introduction"=N'还有我！',"remark"=N'我没有描述！',"sex"=1,"deptid"=null,"creationtime"=CAST('2024-03-29 12:14:27.152' AS DATETIME),"creatorid"=null,"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-03-30 15:12:38.970' AS DATETIME),"ordernum"=1,"state"=1  WHERE "id"=N'd7a9b677-bff8-c2ad-dab6-3a119a976152'
===============================

2024-03-30 15:12:38.971 +08:00 [DBG] =========Yi-SQL耗时0.7182毫秒=====
2024-03-30 15:12:38.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM "userrole" WHERE  ("userid" IN ('d7a9b677-bff8-c2ad-dab6-3a119a976152'))  
===============================

2024-03-30 15:12:38.972 +08:00 [DBG] =========Yi-SQL耗时0.7017毫秒=====
2024-03-30 15:12:38.973 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "userrole"  
           ("id","roleid","userid")
     VALUES
           (N'e86cda1f-766c-9c19-26ba-3a11a060e23d',N'3580f6ed-3e5e-0cb3-ee9a-3a119a976148',N'd7a9b677-bff8-c2ad-dab6-3a119a976152') ;
===============================

2024-03-30 15:12:38.973 +08:00 [DBG] =========Yi-SQL耗时0.4431毫秒=====
2024-03-30 15:12:38.974 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM "userpost" WHERE  ("userid" IN ('d7a9b677-bff8-c2ad-dab6-3a119a976152'))  
===============================

2024-03-30 15:12:38.974 +08:00 [DBG] =========Yi-SQL耗时0.3568毫秒=====
2024-03-30 15:12:38.975 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto'.
2024-03-30 15:12:38.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "operationlog"  
           ("id","title","opertype","requestmethod","operuser","operip","operlocation","method","requestparam","requestresult","creationtime","creatorid")
     VALUES
           (N'b9caed54-00f2-cff8-1ebb-3a11a060e23f',N'更新用户',2,N'PUT',N'cc',N'127.0.0.1',N'0 内网IP',N'/api/app/user/d7a9b677-bff8-c2ad-dab6-3a119a976152',null,N'{"Name":"大测试","Age":18,"UserName":"test","Icon":null,"Nick":"测试","Email":"454313500@qq.com","Ip":null,"Address":"深圳","Phone":15900000000,"Introduction":"还有我！","Remark":"我没有描述！","Sex":1,"State":true,"CreationTime":"2024-03-29T12:14:27.152854","DeptId":null,"Dept":null,"Posts":null,"Roles":null,"Id":"d7a9b677-bff8-c2ad-dab6-3a119a976152"}',CAST('2024-03-30 15:12:38.976' AS DATETIME),N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-03-30 15:12:38.978 +08:00 [DBG] =========Yi-SQL耗时1.4168毫秒=====
2024-03-30 15:12:38.978 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.UpdateAsync (Yi.Framework.Rbac.Application) in 33.1141ms
2024-03-30 15:12:38.978 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:38.993 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:38.994 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 15:12:38.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-03-30 15:12:38.998 +08:00 [DBG] =========Yi-SQL耗时1.6078毫秒=====
2024-03-30 15:12:39.000 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-03-30 15:12:39.003 +08:00 [DBG] =========Yi-SQL耗时2.8369毫秒=====
2024-03-30 15:12:39.003 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:12:39.004 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 9.842ms
2024-03-30 15:12:39.004 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:42.648 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:12:42.649 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:42.649 +08:00 [INF] Route matched with {action = "PostLogout", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] PostLogout() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:12:42.650 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-03-30 15:12:42.650 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application) in 0.8936ms
2024-03-30 15:12:42.650 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:42.656 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:12:42.657 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:12:42.657 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:12:42.658 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 15:12:42.658 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 15:12:42.691 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:12:42.692 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:12:42.692 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:12:42.692 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 15:12:42.736 +08:00 [INF] 用户cc离开了，当前已连接1个
2024-03-30 15:12:42.736 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 15:12:42.760 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 15:12:42.872 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:12:42.873 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:12:42.873 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:12:42.874 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 15:12:42.875 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 15:12:42.950 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:12:42.951 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:12:42.951 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:12:42.952 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 15:12:42.999 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:43.000 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:12:43.000 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 15:12:43.001 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-03-30 15:12:43.002 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:12:43.002 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-03-30 15:12:43.003 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 3.2254ms
2024-03-30 15:12:43.003 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:43.007 +08:00 [DBG] =========Yi-SQL耗时4.4924毫秒=====
2024-03-30 15:12:43.008 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:12:43.009 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 7.9273ms
2024-03-30 15:12:43.009 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 15:12:47.834 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:12:47.835 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:47.835 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:12:47.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"   WHERE (( "username" = N'test' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:12:47.840 +08:00 [DBG] =========Yi-SQL耗时1.8013毫秒=====
2024-03-30 15:12:47.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'd7a9b677-bff8-c2ad-dab6-3a119a976152'    AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:12:47.844 +08:00 [DBG] =========Yi-SQL耗时0.8898毫秒=====
2024-03-30 15:12:47.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'd7a9b677-bff8-c2ad-dab6-3a119a976152'    
===============================

2024-03-30 15:12:47.845 +08:00 [DBG] =========Yi-SQL耗时0.2514毫秒=====
2024-03-30 15:12:47.845 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:12:47.846 +08:00 [DBG] =========Yi-SQL耗时0.7969毫秒=====
2024-03-30 15:12:47.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "roleid" as aid,"menuid" as bid FROM "rolemenu"  WHERE   "roleid" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-03-30 15:12:47.847 +08:00 [DBG] =========Yi-SQL耗时0.4513毫秒=====
2024-03-30 15:12:47.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","menuname" AS "menuname","menutype" AS "menutype","permissioncode" AS "permissioncode","parentid" AS "parentid","menuicon" AS "menuicon","router" AS "router","islink" AS "islink","iscache" AS "iscache","isshow" AS "isshow","remark" AS "remark","component" AS "component","query" AS "query" FROM "menu"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN ('e6bf52fd-b827-33d0-b83c-3a119a97612e','60604454-c644-fd31-e57c-3a119a97612e','e893eea8-99b8-2d23-4c3f-3a119a97612e','ceecb9ff-5230-f3e0-79fe-3a119a97612e','0965b770-1de8-1c24-7e9f-3a119a97612e','49d3225a-5f55-53fe-01fd-3a119a97612e','51121df1-70bc-842c-6592-3a119a97616a','33197b18-4bca-93d8-d456-3a119a97612e','46c0eabd-f0f6-163e-9c8d-3a119a97612e')     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:12:47.848 +08:00 [DBG] =========Yi-SQL耗时0.6399毫秒=====
2024-03-30 15:12:47.865 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-03-30 15:12:47.865 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 29.9445ms
2024-03-30 15:12:47.865 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:47.866 +08:00 [INF] 用户【d7a9b677-bff8-c2ad-dab6-3a119a976152:test】登入系统
2024-03-30 15:12:47.866 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "loginlog"  
           ("id","creationtime","loginuser","loginlocation","loginip","browser","os","logmsg","creatorid")
     VALUES
           (N'3e9a1622-14fe-502d-11a9-3a11a06104fa',CAST('2024-03-30 15:12:47.866' AS DATETIME),N'test',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'test登录系统',N'd7a9b677-bff8-c2ad-dab6-3a119a976152') ;
===============================

2024-03-30 15:12:47.868 +08:00 [DBG] =========Yi-SQL耗时1.2609毫秒=====
2024-03-30 15:12:47.872 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:12:47.873 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 15:12:47.874 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 15:12:47.878 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:47.878 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:12:47.878 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:12:47.879 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 15:12:47.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'd7a9b677-bff8-c2ad-dab6-3a119a976152'    AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  
===============================

2024-03-30 15:12:47.882 +08:00 [DBG] =========Yi-SQL耗时0.7371毫秒=====
2024-03-30 15:12:47.883 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'd7a9b677-bff8-c2ad-dab6-3a119a976152'    
===============================

2024-03-30 15:12:47.884 +08:00 [DBG] =========Yi-SQL耗时0.2744毫秒=====
2024-03-30 15:12:47.884 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 ) AND ( 1 = 1 )    AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:12:47.884 +08:00 [DBG] =========Yi-SQL耗时0.299毫秒=====
2024-03-30 15:12:47.884 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "roleid" as aid,"menuid" as bid FROM "rolemenu"  WHERE   "roleid" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-03-30 15:12:47.885 +08:00 [DBG] =========Yi-SQL耗时0.7582毫秒=====
2024-03-30 15:12:47.886 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","menuname" AS "menuname","menutype" AS "menutype","permissioncode" AS "permissioncode","parentid" AS "parentid","menuicon" AS "menuicon","router" AS "router","islink" AS "islink","iscache" AS "iscache","isshow" AS "isshow","remark" AS "remark","component" AS "component","query" AS "query" FROM "menu"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN ('e6bf52fd-b827-33d0-b83c-3a119a97612e','60604454-c644-fd31-e57c-3a119a97612e','e893eea8-99b8-2d23-4c3f-3a119a97612e','ceecb9ff-5230-f3e0-79fe-3a119a97612e','0965b770-1de8-1c24-7e9f-3a119a97612e','49d3225a-5f55-53fe-01fd-3a119a97612e','51121df1-70bc-842c-6592-3a119a97616a','33197b18-4bca-93d8-d456-3a119a97612e','46c0eabd-f0f6-163e-9c8d-3a119a97612e')     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:12:47.886 +08:00 [DBG] =========Yi-SQL耗时0.7562毫秒=====
2024-03-30 15:12:47.887 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-03-30 15:12:47.887 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 8.6499ms
2024-03-30 15:12:47.887 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:47.901 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:47.901 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:12:47.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'd7a9b677-bff8-c2ad-dab6-3a119a976152'    AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  
===============================

2024-03-30 15:12:47.902 +08:00 [DBG] =========Yi-SQL耗时0.6517毫秒=====
2024-03-30 15:12:47.906 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'd7a9b677-bff8-c2ad-dab6-3a119a976152'    
===============================

2024-03-30 15:12:47.907 +08:00 [DBG] =========Yi-SQL耗时0.5307毫秒=====
2024-03-30 15:12:47.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 ) AND ( 1 = 1 )    AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:12:47.909 +08:00 [DBG] =========Yi-SQL耗时0.8819毫秒=====
2024-03-30 15:12:47.909 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "roleid" as aid,"menuid" as bid FROM "rolemenu"  WHERE   "roleid" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-03-30 15:12:47.909 +08:00 [DBG] =========Yi-SQL耗时0.3052毫秒=====
2024-03-30 15:12:47.910 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","menuname" AS "menuname","menutype" AS "menutype","permissioncode" AS "permissioncode","parentid" AS "parentid","menuicon" AS "menuicon","router" AS "router","islink" AS "islink","iscache" AS "iscache","isshow" AS "isshow","remark" AS "remark","component" AS "component","query" AS "query" FROM "menu"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN ('e6bf52fd-b827-33d0-b83c-3a119a97612e','60604454-c644-fd31-e57c-3a119a97612e','e893eea8-99b8-2d23-4c3f-3a119a97612e','ceecb9ff-5230-f3e0-79fe-3a119a97612e','0965b770-1de8-1c24-7e9f-3a119a97612e','49d3225a-5f55-53fe-01fd-3a119a97612e','51121df1-70bc-842c-6592-3a119a97616a','33197b18-4bca-93d8-d456-3a119a97612e','46c0eabd-f0f6-163e-9c8d-3a119a97612e')     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:12:47.911 +08:00 [DBG] =========Yi-SQL耗时0.5759毫秒=====
2024-03-30 15:12:47.911 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:12:47.911 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 10.4144ms
2024-03-30 15:12:47.911 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:47.912 +08:00 [INF] 2024/3/30 15:12:47：test,4BiikUjuUpMLtTVcOjjFrw连接服务端success，当前已连接1个
2024-03-30 15:12:51.388 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:51.388 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:51.388 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:51.388 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:51.389 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-03-30 15:12:51.389 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 15:12:51.389 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 15:12:51.389 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 15:12:51.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:12:51.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:12:51.392 +08:00 [DBG] =========Yi-SQL耗时1.9509毫秒=====
2024-03-30 15:12:51.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-03-30 15:12:51.392 +08:00 [DBG] =========Yi-SQL耗时2.7765毫秒=====
2024-03-30 15:12:51.399 +08:00 [DBG] =========Yi-SQL耗时5.894毫秒=====
2024-03-30 15:12:51.400 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:12:51.401 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:12:51.401 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.3456ms
2024-03-30 15:12:51.401 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.3975ms
2024-03-30 15:12:51.401 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:51.401 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:51.401 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 )  AND ( 1 = 1 )  ) CountTable 
===============================

2024-03-30 15:12:51.407 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-03-30 15:12:51.407 +08:00 [DBG] =========Yi-SQL耗时3.7933毫秒=====
2024-03-30 15:12:51.409 +08:00 [DBG] =========Yi-SQL耗时8.1583毫秒=====
2024-03-30 15:12:51.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  AND ( 1 = 1 )   ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-03-30 15:12:51.411 +08:00 [DBG] =========Yi-SQL耗时1.5952毫秒=====
2024-03-30 15:12:51.412 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:12:51.412 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 23.3026ms
2024-03-30 15:12:51.412 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:51.413 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:12:51.414 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 25.0511ms
2024-03-30 15:12:51.414 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:52.063 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:12:52.064 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 15:12:52.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 )  AND ( 1 = 1 )  
===============================

2024-03-30 15:12:52.066 +08:00 [DBG] =========Yi-SQL耗时0.9065毫秒=====
2024-03-30 15:12:52.070 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )  AND ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-03-30 15:12:52.071 +08:00 [DBG] =========Yi-SQL耗时1.0585毫秒=====
2024-03-30 15:12:52.072 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:12:52.072 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 8.6414ms
2024-03-30 15:12:52.072 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:14:13.248 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:14:13.248 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 15:14:13.250 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 0 )  AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 )  AND ( 1 = 1 )  ) CountTable 
===============================

2024-03-30 15:14:13.251 +08:00 [DBG] =========Yi-SQL耗时1.4408毫秒=====
2024-03-30 15:14:13.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 0 )  AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  AND ( 1 = 1 )   ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-03-30 15:14:13.258 +08:00 [DBG] =========Yi-SQL耗时1.2228毫秒=====
2024-03-30 15:14:13.259 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:14:13.259 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 10.9546ms
2024-03-30 15:14:13.259 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:14:15.864 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:14:15.864 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 15:14:15.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM "user" "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 )  AND ( 1 = 1 )  ) CountTable 
===============================

2024-03-30 15:14:15.866 +08:00 [DBG] =========Yi-SQL耗时0.9096毫秒=====
2024-03-30 15:14:15.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM "user" "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  AND ( 1 = 1 )   ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-03-30 15:14:15.870 +08:00 [DBG] =========Yi-SQL耗时1.3699毫秒=====
2024-03-30 15:14:15.870 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:14:15.871 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 7.0671ms
2024-03-30 15:14:15.871 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:14:32.680 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:14:32.680 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 15:14:32.693 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:14:32.693 +08:00 [DBG] =========Yi-SQL耗时0.6567毫秒=====
2024-03-30 15:14:32.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE  ((CASE WHEN  "deptid" IS NULL THEN  N'00000000-0000-0000-0000-000000000000' ELSE "deptid" END) IN ('e6ebca6a-f4a4-c5f6-2912-3a119a9760f2','92ddd400-2bd6-a928-ac61-3a119a9760f3','8ca24824-ac24-e8dd-9d21-3a119a9760f3','310e3b0b-b741-5786-ffcc-3a119a9760f3','e0c47979-f00d-26c7-101f-3a119a9760f3','a5100d19-9ace-6dbb-a926-3a119a9760f3','0259b42a-8817-9c60-1b65-3a119a9760f3','3f9ef02a-0f12-4ca5-0e4e-3a119a9760f3','38c6f3af-e240-a9bc-70bb-3a119a9760f3','25e0225d-3c6e-1ca6-74f9-3a119a9760f3'))   AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 )  AND ( 1 = 1 )  ) CountTable 
===============================

2024-03-30 15:14:32.707 +08:00 [DBG] =========Yi-SQL耗时1.1622毫秒=====
2024-03-30 15:14:32.708 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE  ((CASE WHEN  "deptid" IS NULL THEN  N'00000000-0000-0000-0000-000000000000' ELSE "deptid" END) IN ('e6ebca6a-f4a4-c5f6-2912-3a119a9760f2','92ddd400-2bd6-a928-ac61-3a119a9760f3','8ca24824-ac24-e8dd-9d21-3a119a9760f3','310e3b0b-b741-5786-ffcc-3a119a9760f3','e0c47979-f00d-26c7-101f-3a119a9760f3','a5100d19-9ace-6dbb-a926-3a119a9760f3','0259b42a-8817-9c60-1b65-3a119a9760f3','3f9ef02a-0f12-4ca5-0e4e-3a119a9760f3','38c6f3af-e240-a9bc-70bb-3a119a9760f3','25e0225d-3c6e-1ca6-74f9-3a119a9760f3'))   AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  AND ( 1 = 1 )   ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-03-30 15:14:32.709 +08:00 [DBG] =========Yi-SQL耗时1.212毫秒=====
2024-03-30 15:14:32.710 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:14:32.710 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 29.6181ms
2024-03-30 15:14:32.710 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:14:48.474 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:14:48.474 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 15:14:48.476 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 )  AND ( 1 = 1 )  
===============================

2024-03-30 15:14:48.476 +08:00 [DBG] =========Yi-SQL耗时0.6662毫秒=====
2024-03-30 15:14:48.480 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )  AND ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-03-30 15:14:48.481 +08:00 [DBG] =========Yi-SQL耗时1.0658毫秒=====
2024-03-30 15:14:48.482 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:14:48.482 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 7.4414ms
2024-03-30 15:14:48.482 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:14:51.246 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:14:51.246 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 15:14:51.248 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 )  AND ( 1 = 1 )  
===============================

2024-03-30 15:14:51.248 +08:00 [DBG] =========Yi-SQL耗时0.6747毫秒=====
2024-03-30 15:14:51.250 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )  AND ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-03-30 15:14:51.252 +08:00 [DBG] =========Yi-SQL耗时1.1231毫秒=====
2024-03-30 15:14:51.253 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:14:51.253 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 6.9973ms
2024-03-30 15:14:51.253 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:19:10.791 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:19:10.792 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-03-30 15:19:10.792 +08:00 [INF] Route matched with {action = "PostLogout", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] PostLogout() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:19:10.793 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-03-30 15:19:10.793 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application) in 0.8687ms
2024-03-30 15:19:10.793 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-03-30 15:19:10.799 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:19:10.800 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:19:10.800 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:19:10.801 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 15:19:10.801 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 15:19:10.824 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:19:10.824 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:19:10.824 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:19:10.825 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 15:19:10.900 +08:00 [INF] 用户test离开了，当前已连接2个
2024-03-30 15:19:10.900 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 15:19:10.900 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 15:19:10.900 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 15:19:11.031 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:19:11.032 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:19:11.032 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:19:11.033 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 15:19:11.033 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 15:19:11.116 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:19:11.117 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:19:11.117 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:19:11.117 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 15:19:11.179 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:19:11.179 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 15:19:11.179 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:19:11.179 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-03-30 15:19:11.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:19:11.182 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-03-30 15:19:11.183 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 3.5476ms
2024-03-30 15:19:11.183 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:19:11.362 +08:00 [DBG] =========Yi-SQL耗时181.341毫秒=====
2024-03-30 15:19:11.363 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:19:11.363 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 184.3777ms
2024-03-30 15:19:11.363 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 15:19:13.726 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:19:13.726 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:19:13.726 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:19:13.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"   WHERE (( "username" = N'cc' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-03-30 15:19:13.730 +08:00 [DBG] =========Yi-SQL耗时1.8353毫秒=====
2024-03-30 15:19:13.732 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:19:13.732 +08:00 [DBG] =========Yi-SQL耗时0.5385毫秒=====
2024-03-30 15:19:13.733 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-03-30 15:19:13.734 +08:00 [DBG] =========Yi-SQL耗时0.8526毫秒=====
2024-03-30 15:19:13.734 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:19:13.735 +08:00 [DBG] =========Yi-SQL耗时0.6319毫秒=====
2024-03-30 15:19:13.772 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-03-30 15:19:13.772 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 45.7358ms
2024-03-30 15:19:13.772 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:19:13.773 +08:00 [INF] 用户【e94b7363-80d1-10a3-eb2c-3a119a976151:cc】登入系统
2024-03-30 15:19:13.774 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "loginlog"  
           ("id","creationtime","loginuser","loginlocation","loginip","browser","os","logmsg","creatorid")
     VALUES
           (N'4c317770-ff6f-dc33-5ff1-3a11a066e86d',CAST('2024-03-30 15:19:13.773' AS DATETIME),N'cc',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'cc登录系统',N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-03-30 15:19:13.775 +08:00 [DBG] =========Yi-SQL耗时1.3741毫秒=====
2024-03-30 15:19:13.778 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:19:13.779 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 15:19:13.779 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 15:19:13.785 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:19:13.785 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 15:19:13.785 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:19:13.785 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 15:19:13.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:19:13.788 +08:00 [DBG] =========Yi-SQL耗时0.5718毫秒=====
2024-03-30 15:19:13.789 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-03-30 15:19:13.789 +08:00 [DBG] =========Yi-SQL耗时0.3329毫秒=====
2024-03-30 15:19:13.790 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:19:13.790 +08:00 [DBG] =========Yi-SQL耗时0.2255毫秒=====
2024-03-30 15:19:13.790 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-03-30 15:19:13.790 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 5.5177ms
2024-03-30 15:19:13.791 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-03-30 15:19:13.798 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 15:19:13.798 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:19:13.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:19:13.799 +08:00 [DBG] =========Yi-SQL耗时0.5638毫秒=====
2024-03-30 15:19:13.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-03-30 15:19:13.801 +08:00 [DBG] =========Yi-SQL耗时0.4252毫秒=====
2024-03-30 15:19:13.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-03-30 15:19:13.802 +08:00 [DBG] =========Yi-SQL耗时0.1918毫秒=====
2024-03-30 15:19:13.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:19:13.803 +08:00 [DBG] =========Yi-SQL耗时0.6398毫秒=====
2024-03-30 15:19:13.803 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:19:13.803 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 5.6931ms
2024-03-30 15:19:13.804 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-03-30 15:19:13.824 +08:00 [INF] 2024/3/30 15:19:13：cc,9jxzUNsrdlgfOvTtvGc8HA连接服务端success，当前已连接1个
2024-03-30 15:19:16.586 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:19:16.586 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:19:16.586 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 15:19:16.586 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-03-30 15:19:16.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:19:16.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:19:16.588 +08:00 [DBG] =========Yi-SQL耗时1.2442毫秒=====
2024-03-30 15:19:16.590 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:19:16.591 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 4.2626ms
2024-03-30 15:19:16.591 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:19:16.645 +08:00 [DBG] =========Yi-SQL耗时56.9936毫秒=====
2024-03-30 15:19:16.647 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-03-30 15:19:16.647 +08:00 [DBG] =========Yi-SQL耗时0.4572毫秒=====
2024-03-30 15:19:16.648 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:19:16.648 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 61.9924ms
2024-03-30 15:19:16.648 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:19:17.482 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:19:17.482 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 15:19:17.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-03-30 15:19:17.485 +08:00 [DBG] =========Yi-SQL耗时1.6552毫秒=====
2024-03-30 15:19:17.498 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:19:17.501 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 18.9926ms
2024-03-30 15:19:17.501 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:26:38.391 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:26:38.391 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 15:26:38.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-03-30 15:26:38.586 +08:00 [DBG] =========Yi-SQL耗时192.4299毫秒=====
2024-03-30 15:26:38.607 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:26:38.620 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 229.511ms
2024-03-30 15:26:38.621 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:29:56.566 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:29:56.566 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 15:29:56.566 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:29:56.566 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:29:56.567 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-03-30 15:29:56.567 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 15:29:56.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:29:56.576 +08:00 [DBG] =========Yi-SQL耗时3.0315毫秒=====
2024-03-30 15:29:56.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-03-30 15:29:56.619 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:29:56.619 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 52.9233ms
2024-03-30 15:29:56.620 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:29:56.621 +08:00 [DBG] =========Yi-SQL耗时38.7451毫秒=====
2024-03-30 15:29:56.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-03-30 15:29:56.623 +08:00 [DBG] =========Yi-SQL耗时0.9944毫秒=====
2024-03-30 15:29:56.635 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:29:56.635 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 68.7328ms
2024-03-30 15:29:56.635 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:29:56.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-03-30 15:29:56.641 +08:00 [DBG] =========Yi-SQL耗时4.8594毫秒=====
2024-03-30 15:29:56.644 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-03-30 15:29:56.646 +08:00 [DBG] =========Yi-SQL耗时2.1601毫秒=====
2024-03-30 15:29:56.646 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:29:56.647 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 80.3707ms
2024-03-30 15:29:56.647 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:29:58.214 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetExportExcelAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:29:58.229 +08:00 [INF] Route matched with {action = "GetExportExcel", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetExportExcelAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 15:29:58.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-03-30 15:29:58.275 +08:00 [DBG] =========Yi-SQL耗时1.1193毫秒=====
2024-03-30 15:29:58.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10000 offset 0
===============================

2024-03-30 15:29:58.279 +08:00 [DBG] =========Yi-SQL耗时2.6351毫秒=====
2024-03-30 15:29:58.380 +08:00 [INF] Executing PhysicalFileResult, sending file '/wwwroot/temp/UserEntity_2024-03-30_15-29-58_a0a3ec19-d20c-4844-b48e-b71f7d23bf3f.xlsx' with download name '' ...
2024-03-30 15:29:58.409 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetExportExcelAsync (Yi.Framework.Rbac.Application) in 180.1079ms
2024-03-30 15:29:58.409 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetExportExcelAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:30:14.668 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:30:14.668 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-03-30 15:30:14.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:30:14.670 +08:00 [DBG] =========Yi-SQL耗时0.8414毫秒=====
2024-03-30 15:30:14.672 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:30:14.673 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 4.8471ms
2024-03-30 15:30:14.673 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-03-30 15:30:14.676 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:30:14.676 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-03-30 15:30:14.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-03-30 15:30:14.679 +08:00 [DBG] =========Yi-SQL耗时0.8609毫秒=====
2024-03-30 15:30:14.694 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:30:14.698 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 21.8102ms
2024-03-30 15:30:14.698 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:30:16.783 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:30:16.783 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-03-30 15:30:16.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-03-30 15:30:16.786 +08:00 [DBG] =========Yi-SQL耗时0.8038毫秒=====
2024-03-30 15:30:16.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-03-30 15:30:16.788 +08:00 [DBG] =========Yi-SQL耗时0.9664毫秒=====
2024-03-30 15:30:16.790 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:30:16.791 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 7.2074ms
2024-03-30 15:30:16.791 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:30:20.643 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:30:20.643 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-03-30 15:30:20.650 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "post"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:30:20.651 +08:00 [DBG] =========Yi-SQL耗时1.1092毫秒=====
2024-03-30 15:30:20.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-03-30 15:30:20.654 +08:00 [DBG] =========Yi-SQL耗时0.4669毫秒=====
2024-03-30 15:30:20.655 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:30:20.655 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 11.943ms
2024-03-30 15:30:20.655 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:30:34.278 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetExportExcelAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:30:34.278 +08:00 [INF] Route matched with {action = "GetExportExcel", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetExportExcelAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-03-30 15:30:34.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-03-30 15:30:34.283 +08:00 [DBG] =========Yi-SQL耗时1.489毫秒=====
2024-03-30 15:30:34.286 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10000 offset 0
===============================

2024-03-30 15:30:34.288 +08:00 [DBG] =========Yi-SQL耗时1.3182毫秒=====
2024-03-30 15:30:34.294 +08:00 [INF] Executing PhysicalFileResult, sending file '/wwwroot/temp/UserEntity_2024-03-30_15-30-34_83d2102f-b703-4a36-a900-40c2eac8c912.xlsx' with download name '' ...
2024-03-30 15:30:34.296 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetExportExcelAsync (Yi.Framework.Rbac.Application) in 18.3414ms
2024-03-30 15:30:34.296 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetExportExcelAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:31:46.990 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:31:46.994 +08:00 [INF] Route matched with {action = "GetList", controller = "Online", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Domain.Shared.Model.OnlineUserModel]] GetListAsync(Yi.Framework.Rbac.Domain.Shared.Model.OnlineUserModel) on controller Yi.Framework.Rbac.Application.Services.Monitor.OnlineService (Yi.Framework.Rbac.Application).
2024-03-30 15:31:47.039 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Domain.Shared.Model.OnlineUserModel, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:31:47.048 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.GetListAsync (Yi.Framework.Rbac.Application) in 53.4435ms
2024-03-30 15:31:47.048 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:31:52.896 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:31:52.897 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.ForceOut (Yi.Framework.Rbac.Application)'
2024-03-30 15:31:52.900 +08:00 [INF] Route matched with {action = "ForceOut", controller = "Online", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] ForceOut(System.String) on controller Yi.Framework.Rbac.Application.Services.Monitor.OnlineService (Yi.Framework.Rbac.Application).
2024-03-30 15:31:52.909 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-03-30 15:31:52.909 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.ForceOut (Yi.Framework.Rbac.Application) in 8.9147ms
2024-03-30 15:31:52.909 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.ForceOut (Yi.Framework.Rbac.Application)'
2024-03-30 15:31:52.914 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:31:52.915 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-03-30 15:31:52.915 +08:00 [INF] Route matched with {action = "PostLogout", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] PostLogout() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:31:52.920 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-03-30 15:31:52.920 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application) in 4.6112ms
2024-03-30 15:31:52.920 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-03-30 15:31:52.930 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:31:52.931 +08:00 [INF] Route matched with {action = "GetList", controller = "Online", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Domain.Shared.Model.OnlineUserModel]] GetListAsync(Yi.Framework.Rbac.Domain.Shared.Model.OnlineUserModel) on controller Yi.Framework.Rbac.Application.Services.Monitor.OnlineService (Yi.Framework.Rbac.Application).
2024-03-30 15:31:52.931 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:31:52.931 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Domain.Shared.Model.OnlineUserModel, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:31:52.931 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.GetListAsync (Yi.Framework.Rbac.Application) in 0.713ms
2024-03-30 15:31:52.931 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:31:52.932 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:31:52.933 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:31:52.933 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 15:31:52.935 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 15:31:54.608 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:31:54.609 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:31:54.610 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:31:54.610 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 15:31:54.724 +08:00 [INF] 用户cc离开了，当前已连接1个
2024-03-30 15:31:54.724 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 15:31:54.724 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 15:31:54.724 +08:00 [INF] Executed endpoint '/hub/main'
2024-03-30 15:31:54.841 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:31:54.842 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:31:54.842 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:31:54.842 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-03-30 15:31:54.843 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-03-30 15:31:54.982 +08:00 [INF] CORS policy execution successful.
2024-03-30 15:31:54.983 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-03-30 15:31:54.983 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-03-30 15:31:54.983 +08:00 [INF] Executing endpoint '/hub/main'
2024-03-30 15:31:55.062 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 15:31:55.062 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:31:55.062 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-03-30 15:31:55.062 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-03-30 15:31:55.067 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-03-30 15:31:55.092 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-03-30 15:31:55.092 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 29.8863ms
2024-03-30 15:31:55.092 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-03-30 15:31:55.136 +08:00 [DBG] =========Yi-SQL耗时68.5137毫秒=====
2024-03-30 15:31:55.136 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-03-30 15:31:55.137 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 74.1458ms
2024-03-30 15:31:55.137 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-03-30 15:31:56.790 +08:00 [INF] Executed endpoint '/hub/main'
